<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="description" content="TR-181 – Device Data Model for CWMP
Endpoints and USP Agents: TR-181 Documentation and Theory of
Operations" />
  <title>BBF – TR-181 – Device Data Model for CWMP Endpoints and USP Agents</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for citations */
    div.csl-bib-body { }
    div.csl-entry {
      clear: both;
    }
    .hanging-indent div.csl-entry {
      margin-left:2em;
      text-indent:-2em;
    }
    div.csl-left-margin {
      min-width:2em;
      float:left;
    }
    div.csl-right-inline {
      margin-left:2em;
      padding-left:1em;
    }
    div.csl-indent {
      margin-left: 2em;
    }  </style>
  <link rel="stylesheet" href="bbf.css" />
  <link rel="stylesheet" href="extra.css" />
  <link rel="stylesheet" href="release.css" />
  <link rel="stylesheet" href="toc.css" />
  <link rel="stylesheet" href="local.css" />
  <!-- Automatic hover links scripts -->
  <script>
  window.addEventListener('DOMContentLoaded', function() {
    var hoverlink = null;

    var elems = document.querySelectorAll('.auto-hoverlink:not(section)');
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];

        elem.addEventListener('mouseenter', event => {
          var target = event.target;
          var info_attr = target.attributes.getNamedItem('data-info');
          var anchor_attr = target.attributes.getNamedItem('data-anchor');
          var thing = info_attr ? info_attr.value : target.localName
          /* we check the parent to cover the case where pandoc has moved the
             id from a header to its parent section */
          var anchor = target.id || target.parentElement.id ||
                                    (anchor_attr ? anchor_attr.value : null);

          if (hoverlink) {
            hoverlink.remove();
            hoverlink = null;
          }

          if (!anchor) {
              console.warn('%s %s has no id or data-anchor',
                           thing, target.textContent);
          } else {
            hoverlink = document.createElement('a');
            hoverlink.href = '#' + anchor;
            hoverlink.className = 'hoverlink';
            hoverlink.title = 'Permalink to this ' + thing;
            target.appendChild(hoverlink);
          }
        });

        elem.addEventListener('mouseleave', () => {
          if (hoverlink) {
            setTimeout(function(href) {
              if (hoverlink && hoverlink.href == href) {
                hoverlink.remove();
                hoverlink = null;
              }
            }, 1000, hoverlink.href);
          }
        });
      }
  });
  </script>
  <!-- Automatic hover links styles -->
  <style>
  :root {
      --hoverlink-size: 0.9em;
  }

  .hoverlink {
      text-decoration: none;
  }

  .hoverlink::before {
      content: " ";
  }

  .hoverlink::after {
      display: inline-block;
      content: "";
      width: var(--hoverlink-size);
      height: var(--hoverlink-size);
      background-size: var(--hoverlink-size) var(--hoverlink-size);
      /* https://icon-library.com/images/permalink-icon/permalink-icon-17.jpg
         (resized from 512x512 to 64x64) */
      background-image: url(permalink.png);
  }
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<div class="main-content">
<header id="title-block-header">
<h1 class="title auto-hoverlink" id="title">TR-181 – Device Data Model
for CWMP Endpoints and USP Agents</h1>
<p class="subtitle">Issue: 2 Amendment 16 <span
class="release"></span></p>
<p class="date">Issue Date: June 2023</p>
</header>
<nav id="SIDEBAR" role="doc-toc">
<ul>
<li><a href="#sec:executive-summary"
id="toc-sec:executive-summary">Executive Summary</a></li>
<li><a href="#sec:purpose-and-scope" id="toc-sec:purpose-and-scope">1
Purpose and Scope</a>
<ul>
<li><a href="#sec:purpose" id="toc-sec:purpose">1.1 Purpose</a></li>
<li><a href="#sec:scope" id="toc-sec:scope">1.2 Scope</a>
<ul>
<li><a href="#sec:detailed-structure-for-common-elements"
id="toc-sec:detailed-structure-for-common-elements">1.2.1 Detailed
structure for common elements</a></li>
<li><a href="#sec:detailed-structure-for-cwmp-specific-elements"
id="toc-sec:detailed-structure-for-cwmp-specific-elements">1.2.2
Detailed structure for CWMP specific elements</a></li>
<li><a href="#sec:detailed-structure-for-usp-specific-elements"
id="toc-sec:detailed-structure-for-usp-specific-elements">1.2.3 Detailed
structure for USP specific elements</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:references-and-terminology"
id="toc-sec:references-and-terminology">2 References and Terminology</a>
<ul>
<li><a href="#sec:conventions" id="toc-sec:conventions">2.1
Conventions</a></li>
<li><a href="#sec:references" id="toc-sec:references">2.2
References</a></li>
<li><a href="#sec:definitions" id="toc-sec:definitions">2.3
Definitions</a></li>
<li><a href="#sec:abbreviations" id="toc-sec:abbreviations">2.4
Abbreviations</a></li>
</ul></li>
<li><a href="#sec:bbftype-impact" id="toc-sec:bbftype-impact">3
Technical Report Impact</a>
<ul>
<li><a href="#sec:energy-efficiency" id="toc-sec:energy-efficiency">3.1
Energy Efficiency</a></li>
<li><a href="#sec:ipv6" id="toc-sec:ipv6">3.2 IPv6</a></li>
<li><a href="#sec:security" id="toc-sec:security">3.3 Security</a></li>
<li><a href="#sec:privacy" id="toc-sec:privacy">3.4 Privacy</a></li>
</ul></li>
<li><a href="#sec:architecture" id="toc-sec:architecture">4
Architecture</a>
<ul>
<li><a href="#sec:interface-layers" id="toc-sec:interface-layers">4.1
Interface Layers</a></li>
<li><a href="#sec:interface-objects" id="toc-sec:interface-objects">4.2
Interface objects</a>
<ul>
<li><a href="#sec:lower-layers" id="toc-sec:lower-layers">4.2.1 Lower
Layers</a></li>
<li><a href="#sec:administrative-and-operational-status"
id="toc-sec:administrative-and-operational-status">4.2.2 Administrative
and Operational Status</a></li>
<li><a href="#sec:stacking-and-operational-status"
id="toc-sec:stacking-and-operational-status">4.2.3 Stacking and
Operational Status</a></li>
<li><a href="#sec:vendor-specific-interface-objects"
id="toc-sec:vendor-specific-interface-objects">4.2.4 Vendor-specific
Interface Objects</a></li>
</ul></li>
<li><a href="#sec:interfacestack-table"
id="toc-sec:interfacestack-table">4.3 InterfaceStack Table</a></li>
</ul></li>
<li><a href="#sec:parameter-definitions"
id="toc-sec:parameter-definitions">5 Parameter Definitions</a></li>
<li><a href="#sec:bridging-and-queuing"
id="toc-sec:bridging-and-queuing">Annex A: Bridging and Queuing</a>
<ul>
<li><a href="#sec:queuing-and-bridging-model"
id="toc-sec:queuing-and-bridging-model">A.1 Queuing and Bridging
Model</a>
<ul>
<li><a href="#sec:packet-classification"
id="toc-sec:packet-classification">A.1.1 Packet Classification</a></li>
<li><a href="#sec:policing" id="toc-sec:policing">A.1.2
Policing</a></li>
<li><a href="#sec:queuing-and-scheduling"
id="toc-sec:queuing-and-scheduling">A.1.3 Queuing and
Scheduling</a></li>
<li><a href="#sec:bridging" id="toc-sec:bridging">A.1.4
Bridging</a></li>
</ul></li>
<li><a href="#sec:default-layer-23-qos-mapping"
id="toc-sec:default-layer-23-qos-mapping">A.2 Default Layer 2/3 QoS
Mapping</a></li>
<li><a href="#sec:urn-definitions-for-app-and-flow-tables"
id="toc-sec:urn-definitions-for-app-and-flow-tables">A.3 URN Definitions
for App and Flow Tables</a>
<ul>
<li><a href="#sec:app-protocolidentifier"
id="toc-sec:app-protocolidentifier">A.3.1 App
ProtocolIdentifier</a></li>
<li><a href="#sec:flow-type" id="toc-sec:flow-type">A.3.2 Flow
Type</a></li>
<li><a href="#sec:flow-typeparameters"
id="toc-sec:flow-typeparameters">A.3.3 Flow TypeParameters</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:tunneling" id="toc-sec:tunneling">Annex B:
Tunneling</a>
<ul>
<li><a href="#sec:overview" id="toc-sec:overview">B.1 Overview</a></li>
<li><a href="#sec:tunneling-details" id="toc-sec:tunneling-details">B.2
Details</a></li>
</ul></li>
<li><a href="#sec:software-module-management-uuid-usage"
id="toc-sec:software-module-management-uuid-usage">Annex C: Software
Module Management UUID Usage</a>
<ul>
<li><a href="#sec:overview-1" id="toc-sec:overview-1">C.1
Overview</a></li>
<li><a href="#sec:uuid-generation-requirements"
id="toc-sec:uuid-generation-requirements">C.2 UUID Generation
Requirements</a></li>
<li><a href="#sec:agent-requirements"
id="toc-sec:agent-requirements">C.3 Agent Requirements</a></li>
</ul></li>
<li><a href="#sec:example-rg-queuing-architecture"
id="toc-sec:example-rg-queuing-architecture">Appendix I: Example RG
Queuing Architecture</a></li>
<li><a href="#sec:use-of-bridging-objects-for-vlan-tagging"
id="toc-sec:use-of-bridging-objects-for-vlan-tagging">Appendix II: Use
of Bridging Objects for VLAN Tagging</a>
<ul>
<li><a href="#sec:tagged-lan-to-tagged-wan-traffic-vlan-bridging"
id="toc-sec:tagged-lan-to-tagged-wan-traffic-vlan-bridging">II.1 Tagged
LAN to Tagged WAN Traffic (VLAN Bridging)</a></li>
<li><a
href="#sec:tagged-lan-to-tagged-wan-traffic-special-case-with-vlan-id-translation"
id="toc-sec:tagged-lan-to-tagged-wan-traffic-special-case-with-vlan-id-translation">II.2
Tagged LAN to Tagged WAN Traffic (Special Case with VLAN ID
Translation)</a></li>
<li><a href="#sec:untagged-lan-to-tagged-wan-traffic"
id="toc-sec:untagged-lan-to-tagged-wan-traffic">II.3 Untagged LAN to
Tagged WAN Traffic</a></li>
<li><a href="#sec:internally-generated-to-tagged-wan-traffic"
id="toc-sec:internally-generated-to-tagged-wan-traffic">II.4 Internally
Generated to Tagged WAN Traffic</a></li>
<li><a href="#sec:other-issues" id="toc-sec:other-issues">II.5 Other
Issues</a>
<ul>
<li><a href="#sec:more-than-one-downstream-interface-in-a-bridge"
id="toc-sec:more-than-one-downstream-interface-in-a-bridge">II.5.1 More
than one Downstream Interface in a Bridge</a></li>
<li><a href="#sec:802.1d-re-marking"
id="toc-sec:802.1d-re-marking">II.5.2 802.1D (Re)-marking</a></li>
<li><a
href="#sec:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface"
id="toc-sec:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface">II.5.3
More than one VLAN ID Tag Admitted on the Same Downstream
Interface</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:wi-fi-theory-of-operation"
id="toc-sec:wi-fi-theory-of-operation">Appendix III: Wi-Fi Theory of
Operation</a>
<ul>
<li><a href="#sec:multi-radio-and-multi-band-wi-fi-radio-devices"
id="toc-sec:multi-radio-and-multi-band-wi-fi-radio-devices">III.1
Multi-radio and Multi-band Wi-Fi Radio Devices</a></li>
<li><a href="#sec:definitions-1" id="toc-sec:definitions-1">III.2
Definitions</a></li>
<li><a href="#sec:number-of-instances-of-wifi.radio-object"
id="toc-sec:number-of-instances-of-wifi.radio-object">III.3 Number of
Instances of WiFi.Radio Object</a></li>
<li><a href="#sec:supportedfrequencybands-and-operatingfrequencyband"
id="toc-sec:supportedfrequencybands-and-operatingfrequencyband">III.4
SupportedFrequencyBands and OperatingFrequencyBand</a></li>
<li><a
href="#sec:behavior-of-dual-band-radios-when-operatingfrequencyband-changed"
id="toc-sec:behavior-of-dual-band-radios-when-operatingfrequencyband-changed">III.5
Behavior of Dual-band Radios when OperatingFrequencyBand
Changed</a></li>
<li><a href="#sec:supportedstandards-and-operatingstandards"
id="toc-sec:supportedstandards-and-operatingstandards">III.6
SupportedStandards and OperatingStandards</a></li>
<li><a href="#sec:different-types-of-wifi-errors"
id="toc-sec:different-types-of-wifi-errors">III.7 Different Types of
WiFi Errors</a></li>
<li><a href="#sec:wi-fi-data-elements"
id="toc-sec:wi-fi-data-elements">III.8 Wi-Fi Data Elements</a></li>
<li><a href="#sec:incorporating-wi-fi-data-elements-into-tr-181"
id="toc-sec:incorporating-wi-fi-data-elements-into-tr-181">III.9
Incorporating Wi-Fi Data Elements into TR-181</a>
<ul>
<li><a href="#sec:data-sources-for-wi-fi-data-elements"
id="toc-sec:data-sources-for-wi-fi-data-elements">III.9.1 Data Sources
for Wi-Fi Data Elements</a></li>
<li><a
href="#sec:mapping-new-wi-fi-data-elements-objects-and-parameters"
id="toc-sec:mapping-new-wi-fi-data-elements-objects-and-parameters">III.9.2
Mapping new Wi-Fi Data Elements objects and parameters</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:use-cases" id="toc-sec:use-cases">Appendix IV: Use
Cases</a>
<ul>
<li><a href="#sec:create-a-wan-connection"
id="toc-sec:create-a-wan-connection">IV.1 Create a WAN
Connection</a></li>
<li><a href="#sec:modify-a-wan-connection"
id="toc-sec:modify-a-wan-connection">IV.2 Modify a WAN
Connection</a></li>
<li><a href="#sec:delete-a-wan-connection"
id="toc-sec:delete-a-wan-connection">IV.3 Delete a WAN
Connection</a></li>
<li><a href="#sec:discover-whether-the-device-is-a-gateway"
id="toc-sec:discover-whether-the-device-is-a-gateway">IV.4 Discover
whether the Device is a Gateway</a></li>
<li><a href="#sec:provide-extended-home-networking-topology-view"
id="toc-sec:provide-extended-home-networking-topology-view">IV.5 Provide
Extended Home Networking Topology View</a></li>
<li><a href="#sec:determine-current-interfaces-configuration"
id="toc-sec:determine-current-interfaces-configuration">IV.6 Determine
Current Interfaces Configuration</a></li>
<li><a href="#sec:create-a-wlan-connection"
id="toc-sec:create-a-wlan-connection">IV.7 Create a WLAN
Connection</a></li>
<li><a href="#sec:delete-a-wlan-connection"
id="toc-sec:delete-a-wlan-connection">IV.8 Delete a WLAN
Connection</a></li>
<li><a href="#sec:configure-a-dhcp-client-and-server"
id="toc-sec:configure-a-dhcp-client-and-server">IV.9 Configure a DHCP
Client and Server</a>
<ul>
<li><a href="#sec:dhcp-client-configuration-acme-devices"
id="toc-sec:dhcp-client-configuration-acme-devices">IV.9.1 DHCP Client
Configuration (ACME devices)</a></li>
<li><a href="#sec:dhcp-server-configuration-gateway"
id="toc-sec:dhcp-server-configuration-gateway">IV.9.2 DHCP Server
Configuration (gateway)</a></li>
</ul></li>
<li><a href="#sec:reconfigure-an-existing-interface"
id="toc-sec:reconfigure-an-existing-interface">IV.10 Reconfigure an
Existing Interface</a></li>
<li><a href="#sec:backup-restore-using-vendor-configuration-files"
id="toc-sec:backup-restore-using-vendor-configuration-files">IV.11
Backup / Restore Using Vendor Configuration Files</a></li>
</ul></li>
<li><a href="#sec:ipv6-data-modeling-theory-of-operation"
id="toc-sec:ipv6-data-modeling-theory-of-operation">Appendix V: IPv6
Data Modeling Theory of Operation</a>
<ul>
<li><a href="#sec:ipv6-overview" id="toc-sec:ipv6-overview">V.1 IPv6
Overview</a></li>
<li><a href="#sec:data-model-overview"
id="toc-sec:data-model-overview">V.2 Data Model Overview</a></li>
<li><a href="#sec:enabling-ipv6" id="toc-sec:enabling-ipv6">V.3 Enabling
IPv6</a></li>
<li><a href="#sec:configuring-upstream-ip-interfaces"
id="toc-sec:configuring-upstream-ip-interfaces">V.4 Configuring Upstream
IP Interfaces</a>
<ul>
<li><a
href="#sec:configuration-messages-sent-out-the-upstream-ip-interface"
id="toc-sec:configuration-messages-sent-out-the-upstream-ip-interface">V.4.1
Configuration Messages Sent Out the Upstream IP Interface</a></li>
<li><a href="#sec:ipv6-prefixes" id="toc-sec:ipv6-prefixes">V.4.2 IPv6
Prefixes</a></li>
<li><a href="#sec:ipv6-addresses" id="toc-sec:ipv6-addresses">V.4.3 IPv6
Addresses</a></li>
</ul></li>
<li><a href="#sec:configuring-downstream-ip-interfaces"
id="toc-sec:configuring-downstream-ip-interfaces">V.5 Configuring
Downstream IP Interfaces</a>
<ul>
<li><a href="#sec:ipv6-prefixes-1" id="toc-sec:ipv6-prefixes-1">V.5.1
IPv6 Prefixes</a></li>
<li><a href="#sec:ipv6-addresses-1" id="toc-sec:ipv6-addresses-1">V.5.2
IPv6 Addresses</a></li>
</ul></li>
<li><a href="#sec:device-interactions"
id="toc-sec:device-interactions">V.6 Device Interactions</a>
<ul>
<li><a href="#sec:active-configuration"
id="toc-sec:active-configuration">V.6.1 Active Configuration</a></li>
<li><a href="#sec:monitoring" id="toc-sec:monitoring">V.6.2
Monitoring</a></li>
</ul></li>
<li><a href="#sec:configuring-ipv6-routing-and-forwarding"
id="toc-sec:configuring-ipv6-routing-and-forwarding">V.7 Configuring
IPv6 Routing and Forwarding</a></li>
</ul></li>
<li><a href="#sec:rd-theory-of-operation"
id="toc-sec:rd-theory-of-operation">Appendix VI: 6rd Theory of
Operation</a>
<ul>
<li><a href="#sec:rfc-5969-configuration-parameters"
id="toc-sec:rfc-5969-configuration-parameters">VI.1 RFC 5969
Configuration Parameters</a></li>
<li><a href="#sec:internal-configuration-parameters"
id="toc-sec:internal-configuration-parameters">VI.2 Internal
Configuration Parameters</a></li>
<li><a href="#sec:ipv4-address-source"
id="toc-sec:ipv4-address-source">VI.3 IPv4 Address Source</a></li>
<li><a href="#sec:sending-all-traffic-to-the-border-relay-server"
id="toc-sec:sending-all-traffic-to-the-border-relay-server">VI.4 Sending
All Traffic to the Border Relay Server</a></li>
<li><a href="#sec:internal-treatment-of-ipv6-packets"
id="toc-sec:internal-treatment-of-ipv6-packets">VI.5 Internal Treatment
of IPv6 Packets</a></li>
</ul></li>
<li><a href="#sec:dual-stack-lite-theory-of-operation"
id="toc-sec:dual-stack-lite-theory-of-operation">Appendix VII:
Dual-Stack Lite Theory of Operation</a>
<ul>
<li><a href="#sec:internal-treatment-of-ipv4-packets"
id="toc-sec:internal-treatment-of-ipv4-packets">VII.1 Internal Treatment
of IPv4 Packets</a></li>
</ul></li>
<li><a href="#sec:advanced-firewall-example-configuration"
id="toc-sec:advanced-firewall-example-configuration">Appendix VIII:
Advanced Firewall Example Configuration</a>
<ul>
<li><a href="#sec:config-level" id="toc-sec:config-level">VIII.1 Config
level</a></li>
<li><a href="#sec:firewall-policy" id="toc-sec:firewall-policy">VIII.2
Firewall policy</a>
<ul>
<li><a href="#sec:policy-level" id="toc-sec:policy-level">VIII.2.1
Policy Level</a></li>
<li><a href="#sec:policy-referencing"
id="toc-sec:policy-referencing">VIII.2.2 Policy referencing</a></li>
<li><a href="#sec:policy" id="toc-sec:policy">VIII.2.3 Policy</a></li>
<li><a href="#sec:remarks" id="toc-sec:remarks">VIII.2.4
Remarks</a></li>
</ul></li>
<li><a href="#sec:dmz-example" id="toc-sec:dmz-example">VIII.3 DMZ
example</a></li>
<li><a href="#sec:pinhole-example" id="toc-sec:pinhole-example">VIII.4
Pinhole example</a></li>
<li><a href="#sec:service-example" id="toc-sec:service-example">VIII.5
Service example</a></li>
</ul></li>
<li><a href="#sec:ipsec-theory-of-operation"
id="toc-sec:ipsec-theory-of-operation">Appendix IX: IPsec Theory of
Operation</a>
<ul>
<li><a href="#sec:ipsec" id="toc-sec:ipsec">IX.1 IPsec</a></li>
<li><a href="#sec:ipsec.filter" id="toc-sec:ipsec.filter">IX.2
IPsec.Filter</a></li>
<li><a href="#sec:ipsec.profile" id="toc-sec:ipsec.profile">IX.3
IPsec.Profile</a></li>
<li><a href="#sec:ipsec.tunnel" id="toc-sec:ipsec.tunnel">IX.4
IPsec.Tunnel</a></li>
<li><a href="#sec:ipsec.ikev2sa" id="toc-sec:ipsec.ikev2sa">IX.5
IPsec.IKEv2SA</a></li>
<li><a href="#sec:ipsec.ikev2sa.childsa"
id="toc-sec:ipsec.ikev2sa.childsa">IX.6 IPsec.IKEv2SA.ChildSA</a></li>
</ul></li>
<li><a href="#sec:etsi-m2m-remote-entity-management-theory-of-operation"
id="toc-sec:etsi-m2m-remote-entity-management-theory-of-operation">Appendix
X: ETSI M2M Remote Entity Management Theory of Operation</a>
<ul>
<li><a href="#sec:etsi-m2m-area-networks"
id="toc-sec:etsi-m2m-area-networks">X.1 ETSI M2M Area Networks</a></li>
<li><a href="#sec:device2-data-model-and-functionality-for-etsi-m2m-rem"
id="toc-sec:device2-data-model-and-functionality-for-etsi-m2m-rem">X.2
Device:2 Data Model and Functionality for ETSI M2M REM</a>
<ul>
<li><a href="#sec:tr-069-functionality-for-etsi-m2m-rem"
id="toc-sec:tr-069-functionality-for-etsi-m2m-rem">X.2.1 TR-069
Functionality for ETSI M2M REM</a></li>
</ul></li>
<li><a
href="#sec:device2-data-model-and-functionality-for-etsi-m2m-rem-1"
id="toc-sec:device2-data-model-and-functionality-for-etsi-m2m-rem-1">X.3
Device:2 Data Model and Functionality for ETSI M2M REM</a>
<ul>
<li><a href="#sec:m2m-service-scl-execution-environment"
id="toc-sec:m2m-service-scl-execution-environment">X.3.1 M2M Service SCL
Execution Environment</a></li>
<li><a href="#sec:etsim2m-object" id="toc-sec:etsim2m-object">X.3.2
ETSIM2M Object</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:provider-bridge-theory-of-operation"
id="toc-sec:provider-bridge-theory-of-operation">Appendix XI: Provider
Bridge Theory of Operation</a>
<ul>
<li><a href="#sec:residential-domain-scenario"
id="toc-sec:residential-domain-scenario">XI.1 Residential Domain
Scenario</a></li>
<li><a href="#sec:device-traffic-scenario"
id="toc-sec:device-traffic-scenario">XI.2 Device Traffic
Scenario</a></li>
<li><a href="#sec:public-and-roaming-domain-scenarios"
id="toc-sec:public-and-roaming-domain-scenarios">XI.3 Public and Roaming
Domain Scenarios</a></li>
<li><a href="#sec:provisioning-provider-bridges"
id="toc-sec:provisioning-provider-bridges">XI.4 Provisioning Provider
Bridges</a>
<ul>
<li><a
href="#sec:associating-customer-edge-ports-with-customer-network-ports"
id="toc-sec:associating-customer-edge-ports-with-customer-network-ports">XI.4.1
Associating Customer Edge Ports with Customer Network Ports</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:zigbee-theory-of-operation"
id="toc-sec:zigbee-theory-of-operation">Appendix XII: ZigBee Theory of
Operation</a>
<ul>
<li><a href="#sec:cwmp-management-using-the-zigbee-data-model"
id="toc-sec:cwmp-management-using-the-zigbee-data-model">XII.1 CWMP
management using the ZigBee data model</a></li>
<li><a href="#sec:cwmp-proxying-mechanisms-and-the-zigbee-data-model"
id="toc-sec:cwmp-proxying-mechanisms-and-the-zigbee-data-model">XII.2
CWMP proxying mechanisms and the ZigBee data model</a></li>
</ul></li>
<li><a href="#sec:port-control-protocol-theory-of-operation"
id="toc-sec:port-control-protocol-theory-of-operation">Appendix XIII:
Port Control Protocol Theory of Operation</a>
<ul>
<li><a href="#sec:configuration-and-monitoring-of-the-pcp-server"
id="toc-sec:configuration-and-monitoring-of-the-pcp-server">XIII.1
Configuration and monitoring of the PCP Server</a></li>
<li><a href="#sec:monitoring-and-setting-rules-set-by-the-pcp-client"
id="toc-sec:monitoring-and-setting-rules-set-by-the-pcp-client">XIII.2
Monitoring and setting rules set by the PCP client</a></li>
<li><a href="#sec:rapid-recovery" id="toc-sec:rapid-recovery">XIII.3
Rapid recovery</a></li>
</ul></li>
<li><a href="#sec:gre-tunnel-theory-of-operation"
id="toc-sec:gre-tunnel-theory-of-operation">Appendix XIV: GRE Tunnel
Theory of Operation</a>
<ul>
<li><a href="#sec:l2-payload-over-gre"
id="toc-sec:l2-payload-over-gre">XIV.1 L2 Payload over GRE</a></li>
<li><a href="#sec:l3-payload-over-gre"
id="toc-sec:l3-payload-over-gre">XIV.2 L3 Payload over GRE</a></li>
</ul></li>
<li><a href="#sec:map-theory-of-operation"
id="toc-sec:map-theory-of-operation">Appendix XV: MAP Theory of
Operation</a>
<ul>
<li><a href="#sec:map-configuration-parameters"
id="toc-sec:map-configuration-parameters">XV.1 MAP Configuration
Parameters</a></li>
<li><a href="#sec:internal-treatment-of-ipv4-packets-1"
id="toc-sec:internal-treatment-of-ipv4-packets-1">XV.2 Internal
Treatment of IPv4 Packets</a></li>
</ul></li>
<li><a href="#sec:g.fast-theory-of-operation"
id="toc-sec:g.fast-theory-of-operation">Appendix XVI: G.fast Theory of
Operation</a></li>
<li><a href="#sec:usb-host-theory-of-operation"
id="toc-sec:usb-host-theory-of-operation">Appendix XVII: USB Host Theory
of Operation</a>
<ul>
<li><a href="#sec:overview-2" id="toc-sec:overview-2">XVII.1
Overview</a></li>
</ul></li>
<li><a href="#sec:location-management"
id="toc-sec:location-management">Appendix XVIII: Location Management</a>
<ul>
<li><a href="#sec:overview-3" id="toc-sec:overview-3">XVIII.1
Overview</a></li>
<li><a href="#sec:multiple-instances-of-location-data"
id="toc-sec:multiple-instances-of-location-data">XVIII.2 Multiple
Instances of Location Data</a></li>
<li><a href="#sec:cwmp-usp-manual-gps-and-agps-configured-location"
id="toc-sec:cwmp-usp-manual-gps-and-agps-configured-location">XVIII.3
CWMP, USP, Manual, GPS, and AGPS Configured Location</a>
<ul>
<li><a
href="#sec:example-manual-gps-agps-and-externalcwmp-rootobject.location.i.dataobject.-format"
id="toc-sec:example-manual-gps-agps-and-externalcwmp-rootobject.location.i.dataobject.-format">XVIII.3.1
Example: Manual, GPS, AGPS, and External:CWMP
&lt;rootObject&gt;.Location.{i}.DataObject. Format</a></li>
<li><a href="#sec:rfc-5491-and-rfc-5139-location-element-definitions"
id="toc-sec:rfc-5491-and-rfc-5139-location-element-definitions">XVIII.3.2
RFC 5491 and RFC 5139 Location Element Definitions</a></li>
<li><a
href="#sec:use-of-rfc-5491-and-rfc-5139-location-xml-elements-in-cwmp-or-usp"
id="toc-sec:use-of-rfc-5491-and-rfc-5139-location-xml-elements-in-cwmp-or-usp">XVIII.3.3
Use of RFC 5491 and RFC 5139 Location XML Elements in CWMP or
USP</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:fault-management"
id="toc-sec:fault-management">Appendix XIX: Fault Management</a>
<ul>
<li><a href="#sec:overview-4" id="toc-sec:overview-4">XIX.1
Overview</a></li>
</ul></li>
<li><a href="#sec:basapm-and-lmap-theory-of-operation"
id="toc-sec:basapm-and-lmap-theory-of-operation">Appendix XX: BASAPM and
LMAP Theory of Operation</a>
<ul>
<li><a
href="#sec:tr-069-family-of-specifications-in-the-context-of-tr-304"
id="toc-sec:tr-069-family-of-specifications-in-the-context-of-tr-304">XX.1
TR-069 Family of Specifications in the Context of TR-304</a>
<ul>
<li><a href="#sec:tr-304-and-ietf-lmap-frameworks"
id="toc-sec:tr-304-and-ietf-lmap-frameworks">XX.1.1 TR-304 and IETF LMAP
Frameworks</a></li>
<li><a href="#sec:cwmp-for-pre-configuration"
id="toc-sec:cwmp-for-pre-configuration">XX.1.2 CWMP for
Pre-configuration</a></li>
<li><a
href="#sec:cwmp-for-control-and-pre-configuration-ipdr-for-reporting"
id="toc-sec:cwmp-for-control-and-pre-configuration-ipdr-for-reporting">XX.1.3
CWMP for Control and Pre-configuration, IPDR for Reporting</a></li>
<li><a href="#sec:cwmp-as-a-proxier-ipdr-for-reporting"
id="toc-sec:cwmp-as-a-proxier-ipdr-for-reporting">XX.1.4 CWMP as a
Proxier, IPDR for Reporting</a></li>
<li><a href="#sec:multi-acs-deployment"
id="toc-sec:multi-acs-deployment">XX.1.5 Multi-ACS Deployment</a></li>
</ul></li>
<li><a href="#sec:derivation-of-data-model-elements"
id="toc-sec:derivation-of-data-model-elements">XX.2 Derivation of Data
Model Elements</a>
<ul>
<li><a href="#sec:device.basapm" id="toc-sec:device.basapm">XX.2.1
Device.BASAPM</a></li>
<li><a href="#sec:device.lmap.measurementagent"
id="toc-sec:device.lmap.measurementagent">XX.2.2
Device.LMAP.MeasurementAgent</a></li>
</ul></li>
<li><a href="#sec:bulk-data-collection-in-the-context-of-lmap"
id="toc-sec:bulk-data-collection-in-the-context-of-lmap">XX.3 Bulk Data
Collection in the Context of LMAP</a></li>
<li><a href="#sec:tr-143-diagnostics-in-lmap"
id="toc-sec:tr-143-diagnostics-in-lmap">XX.4 TR-143 Diagnostics in
LMAP</a></li>
</ul></li>
<li><a href="#sec:g-theory-of-operation"
id="toc-sec:g-theory-of-operation">Appendix XXI: 5G Theory of
Operation</a>
<ul>
<li><a href="#sec:overview-5" id="toc-sec:overview-5">XXI.1
Overview</a></li>
<li><a href="#sec:architecture-1" id="toc-sec:architecture-1">XXI.2
Architecture</a>
<ul>
<li><a href="#sec:network-functions"
id="toc-sec:network-functions">XXI.2.1 Network Functions</a></li>
</ul></li>
<li><a href="#sec:concepts" id="toc-sec:concepts">XXI.3 Concepts</a>
<ul>
<li><a href="#sec:control-user-plane-separation-cups"
id="toc-sec:control-user-plane-separation-cups">XXI.3.1 Control User
Plane Separation (CUPS)</a></li>
<li><a href="#sec:policy-1" id="toc-sec:policy-1">XXI.3.2
Policy</a></li>
<li><a href="#sec:multiple-pdu-sessions"
id="toc-sec:multiple-pdu-sessions">XXI.3.3 Multiple PDU
sessions</a></li>
<li><a href="#sec:g-qos" id="toc-sec:g-qos">XXI.3.4 5G QoS</a></li>
<li><a href="#sec:data-network-name-dnn"
id="toc-sec:data-network-name-dnn">XXI.3.5 Data Network Name
(DNN)</a></li>
<li><a href="#sec:multiple-access-networks"
id="toc-sec:multiple-access-networks">XXI.3.6 Multiple Access
Networks</a></li>
<li><a href="#sec:network-slicing" id="toc-sec:network-slicing">XXI.3.7
Network Slicing</a></li>
</ul></li>
<li><a href="#sec:data-model-elements"
id="toc-sec:data-model-elements">XXI.4 Data Model Elements</a>
<ul>
<li><a href="#sec:interface-stack" id="toc-sec:interface-stack">XXI.4.1
Interface Stack</a></li>
<li><a href="#sec:data-model" id="toc-sec:data-model">XXI.4.2 Data
Model</a></li>
<li><a href="#sec:examples" id="toc-sec:examples">XXI.4.3
Examples</a></li>
</ul></li>
</ul></li>
<li><a href="#sec:data-elements-theory-of-operations"
id="toc-sec:data-elements-theory-of-operations">Appendix XXII: Data
Elements Theory of Operations</a></li>
<li><a href="#sec:logical-interfaces-theory-of-operations"
id="toc-sec:logical-interfaces-theory-of-operations">Appendix XXIII:
Logical Interfaces Theory of Operations</a>
<ul>
<li><a href="#sec:introduction" id="toc-sec:introduction">XXIII.1
Introduction</a></li>
<li><a href="#sec:concept" id="toc-sec:concept">XXIII.2 Concept</a></li>
<li><a href="#sec:wan-mode-changes"
id="toc-sec:wan-mode-changes">XXIII.3 WAN mode changes</a></li>
<li><a href="#sec:how-to-use" id="toc-sec:how-to-use">XXIII.4 How to
use</a></li>
<li><a href="#sec:examples-1" id="toc-sec:examples-1">XXIII.5
Examples</a>
<ul>
<li><a href="#sec:tagged---untagged-ethernet-switching"
id="toc-sec:tagged---untagged-ethernet-switching">XXIII.5.1 Tagged -
untagged Ethernet switching</a></li>
<li><a href="#sec:ipv4-and-ipv6-on-a-different-network-interface"
id="toc-sec:ipv4-and-ipv6-on-a-different-network-interface">XXIII.5.2
IPv4 and IPv6 on a different network interface</a></li>
</ul></li>
</ul></li>
</ul>
</nav>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="list-of-figures">List of Figures</h3>
<ol>
<li><a
href="#fig:cwmp-specific-device2-data-model-structure--overview">CWMP-specific
Device:2 Data Model Structure – Overview</a></li>
<li><a
href="#fig:usp-specific-device2-data-model-structure--overview">USP-specific
Device:2 Data Model Structure – Overview</a></li>
<li><a href="#fig:device2-data-model-structure--device-level">Device:2
Data Model Structure – Device Level</a></li>
<li><a
href="#fig:device2-data-model-structure--common-interface-stack-and-networking-technologies">Device:2
Data Model Structure – Common Interface Stack and Networking
Technologies</a></li>
<li><a
href="#fig:device2-data-model-structure--common-applications-and-protocols">Device:2
Data Model Structure – Common Applications and Protocols</a></li>
<li><a
href="#fig:device2-data-model-structure--cwmp-management">Device:2 Data
Model Structure – CWMP Management</a></li>
<li><a
href="#fig:device2-data-model-structure--cwmp-specific-applications-and-protocols">Device:2
Data Model Structure – CWMP-specific applications and protocols</a></li>
<li><a href="#fig:device2-data-model-structure--usp-management">Device:2
Data Model Structure – USP Management</a></li>
<li><a
href="#fig:device2-data-model-structure--usp-specific-applications-and-protocols">Device:2
Data Model Structure – USP-specific applications and protocols</a></li>
<li><a href="#fig:osi-layers-and-interface-objects">OSI Layers and
Interface Objects</a></li>
<li><a href="#fig:interface-lowerlayers">Interface LowerLayers</a></li>
<li><a
href="#fig:ignoring-a-vendor-specific-interface-object-in-the-stack">Ignoring
a Vendor-specific Interface Object in the Stack</a></li>
<li><a
href="#fig:ignoring-a-vendor-specific-interface-object-in-the-stack-multiple-sub-objects">Ignoring
a Vendor-specific Interface Object in the Stack (multiple
sub-objects)</a></li>
<li><a href="#fig:simple-router-example-interfaces-visualized">Simple
Router Example (Interfaces Visualized)</a></li>
<li><a href="#fig:queuing-model-of-a-device">Queuing Model of a
Device</a></li>
<li><a href="#fig:tunneling-overview">Tunneling Overview</a></li>
<li><a
href="#fig:tunneling-overview-showing-forwarding-decisions">Tunneling
Overview (Showing Forwarding Decisions)</a></li>
<li><a
href="#fig:sample-flow-of-upstream-tunneled-traffic-through-the-device">Sample
Flow of Upstream Tunneled Traffic through the Device</a></li>
<li><a
href="#fig:sample-flow-of-downstream-tunneled-traffic-through-the-device">Sample
Flow of Downstream Tunneled Traffic through the Device</a></li>
<li><a href="#fig:general-layer-3-tunneling-interface-stack">General
Layer 3 Tunneling Interface Stack</a></li>
<li><a
href="#fig:general-layer-3-tunneling-from-tunneling-overview">General
Layer 3 Tunneling (from Tunneling Overview)</a></li>
<li><a href="#fig:l2tp-interface-stack-example">L2TP Interface Stack
Example</a></li>
<li><a href="#fig:general-layer-2-tunneling-interface-stack">General
Layer 2 Tunneling Interface Stack</a></li>
<li><a href="#fig:queuing-and-scheduling-example-for-rg">Queuing and
Scheduling Example for RG</a></li>
<li><a
href="#fig:examples-of-vlan-configuration-based-on-bridging-and-vlan-termination-objects">Examples
of VLAN configuration based on Bridging and VLAN Termination
objects</a></li>
<li><a href="#fig:bridge-1-model">Bridge 1 model</a></li>
<li><a href="#fig:bridge-2-model">Bridge 2 model</a></li>
<li><a href="#fig:bridge-3-model">Bridge 3 model</a></li>
<li><a href="#fig:vlan-termination-model">VLAN Termination
model</a></li>
<li><a href="#fig:bridge-1-model-additional-ethernet-interfaces">Bridge
1 model (additional Ethernet interfaces)</a></li>
<li><a
href="#fig:example-of-vlan-configuration-in-a-2-box-scenario">Example of
VLAN configuration in a 2 box scenario</a></li>
<li><a href="#fig:bridge-123-model">Bridge 1,2,3 model</a></li>
<li><a href="#fig:wifi-functions-within-layers">WiFi functions within
layers</a></li>
<li><a href="#fig:device-user-configuration-backup">Device User
Configuration Backup</a></li>
<li><a href="#fig:device-user-configuration-restore">Device User
Configuration Restore</a></li>
<li><a href="#fig:relationship-of-protocols-to-data-model">Relationship
of Protocols to Data Model</a></li>
<li><a
href="#fig:internal-relationships-of-ipv6-addresses-and-prefixes">Internal
Relationships of IPv6 Addresses and Prefixes</a></li>
<li><a href="#fig:example-ipv6-rg-configuration">Example IPv6 RG
Configuration</a></li>
<li><a href="#fig:sample-6rd-routing-and-forwarding">Sample 6rd Routing
and Forwarding</a></li>
<li><a href="#fig:sample-ds-lite-routing-and-forwarding">Sample DS-Lite
Routing and Forwarding</a></li>
<li><a href="#fig:policy-configuration-example">Policy configuration
example</a></li>
<li><a href="#fig:dmz-example">DMZ example</a></li>
<li><a href="#fig:pinhole-example">Pinhole example</a></li>
<li><a href="#fig:local-service-example">Local service example</a></li>
<li><a href="#fig:ipsec-data-model-objects">IPsec Data Model
Objects</a></li>
<li><a href="#fig:etsi-high-level-functional-architecture">ETSI High
Level Functional Architecture</a></li>
<li><a href="#fig:m2m-scl-functional-architecture-framework">M2M SCL
Functional Architecture Framework</a></li>
<li><a href="#fig:m2m-rem-service-capability">M2M REM Service
Capability</a></li>
<li><a href="#fig:etsi-m2m-devices-and-gateways">ETSI M2M Devices and
Gateways</a></li>
<li><a href="#fig:example-m2m-network">Example M2M Network</a></li>
<li><a href="#fig:m2m-device-discovery-for-proxy-management">M2M Device
Discovery for Proxy Management</a></li>
<li><a href="#fig:etsi-m2m-data-model-structure">ETSI M2M Data Model
Structure</a></li>
<li><a href="#fig:provider-bridge-scenarios">Provider Bridge
Scenarios</a></li>
<li><a href="#fig:provider-bridge-components">Provider Bridge
Components</a></li>
<li><a
href="#fig:usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069">Usage
of the data model to manage ZigBee devices with TR-069</a></li>
<li><a
href="#fig:example-sequence-diagram-of-zigbee-management-with-tr-069">Example
sequence diagram of ZigBee management with TR-069</a></li>
<li><a
href="#fig:example-of-a-pcp-client-embedded-in-the-rg-using-cwmp">Example
of a PCP Client embedded in the RG using CWMP</a></li>
<li><a
href="#fig:example-of-a-pcp-client-embedded-in-a-device-using-cwmp-with-pcp-proxy-in-the-rg">Example
of a PCP Client embedded in a device using CWMP, with PCP Proxy in the
RG</a></li>
<li><a href="#fig:vlan-traffic-over-gre">VLAN Traffic over GRE</a></li>
<li><a href="#fig:l2-over-gre-tunnel">L2 over GRE Tunnel</a></li>
<li><a href="#fig:ip-over-ip-gre-encapsulation">IP over IP GRE
Encapsulation</a></li>
<li><a href="#fig:l3-over-gre-tunnel">L3 over GRE Tunnel</a></li>
<li><a href="#fig:map-t-architecture">MAP-T Architecture</a></li>
<li><a href="#fig:sample-map-routing-and-forwarding">Sample MAP Routing
and Forwarding</a></li>
<li><a
href="#fig:sample-map-routing-and-forwarding-interface-stack">Sample MAP
Routing and Forwarding (Interface Stack)</a></li>
<li><a href="#fig:ptm-link-for-dsl-mode-line">PTM Link for DSL mode
Line</a></li>
<li><a href="#fig:ptm-link-for-fast-mode-line">PTM Link for FAST mode
Line</a></li>
<li><a href="#fig:ptm-link-bonding-groups-for-fast-mode-lines">PTM Link
Bonding Groups for FAST mode Lines</a></li>
<li><a href="#fig:ptm-link-bonding-groups-for-dsl-mode-lines">PTM Link
Bonding Groups for DSL mode Lines</a></li>
<li><a href="#fig:example-usb-host-connections">Example USB Host
Connections</a></li>
<li><a href="#fig:tr-304-framework">TR-304 Framework</a></li>
<li><a href="#fig:lmap-framework">LMAP Framework</a></li>
<li><a href="#fig:cwmp-for-pre-configuration">CWMP for
Pre-configuration</a></li>
<li><a
href="#fig:cwmp-for-control-and-pre-configuration-ipdr-for-reporting">CWMP
for Control and Pre-configuration, IPDR for Reporting</a></li>
<li><a href="#fig:cwmp-proxy-device-deployment">CWMP Proxy Device
Deployment</a></li>
<li><a href="#fig:cwmp-multi-acs-deployment">CWMP Multi-ACS
Deployment</a></li>
<li><a
href="#fig:integration-of-bulk-data-profiles-with-lmap">Integration of
Bulk Data Profiles with LMAP</a></li>
<li><a href="#fig:5g-converged-core-network">5G Converged Core
Network</a></li>
<li><a href="#fig:5g-architecture">5G Architecture</a></li>
<li><a href="#fig:fixed-access-only-example">Fixed access only
example</a></li>
<li><a href="#fig:cellular-access-only-example">Cellular access only
example</a></li>
<li><a href="#fig:hybrid-access-example">Hybrid access example</a></li>
<li><a href="#fig:device.wwc-objects">Device.WWC objects</a></li>
<li><a href="#fig:device.pdu-objects">Device.PDU objects</a></li>
<li><a href="#fig:device.fwe-objects">Device.FWE objects</a></li>
<li><a href="#fig:logical-interfaces-problem-statement">Logical
interfaces problem statement</a></li>
<li><a href="#fig:solution-using-logical-interfaces">solution using
logical interfaces</a></li>
<li><a
href="#fig:logical-interfaces-example-ipv4-and-ipv6-are-on-different-network-interface">Logical
interfaces example: IPv4 and IPv6 are on different network
interface</a></li>
</ol>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="list-of-tables">List of Tables</h3>
<ol>
<li><a href="#tbl:simple-router-example-interfacestack-table">Simple
Router Example (InterfaceStack table)</a></li>
<li><a href="#tbl:simple-router-example-interface-lowerlayers">Simple
Router Example (Interface LowerLayers)</a></li>
<li><a href="#tbl:default-layer-23-qos-mapping">Default Layer 2/3 QoS
Mapping</a></li>
<li><a href="#tbl:protocolidentifer-urns">ProtocolIdentifer
URNs</a></li>
<li><a
href="#tbl:flow-typeparameters-values-for-flow-type-urndslforum-orgpppoe">Flow
TypeParameters values for flow type urn:dslforum-org:pppoe</a></li>
<li><a href="#tbl:tagged-lan-to-tagged-wan-configuration">Tagged LAN to
tagged WAN configuration</a></li>
<li><a
href="#tbl:tagged-lan-to-tagged-wan-configuration-vlan-id-translation">Tagged
LAN to tagged WAN configuration (VLAN ID translation)</a></li>
<li><a href="#tbl:untagged-lan-to-tagged-wan-configuration">Untagged LAN
to tagged WAN configuration</a></li>
<li><a
href="#tbl:internally-generated-to-tagged-wan-configuration">Internally
generated to tagged WAN configuration</a></li>
<li><a
href="#tbl:configuration-to-be-added-to-tagged-lan-to-tagged-wan-configuration-table">Configuration
to be added to “Tagged LAN to tagged WAN configuration” table</a></li>
<li><a href="#tbl:802.1d-re-marking">802.1D (re-)marking</a></li>
<li><a
href="#tbl:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface">More
than one VLAN ID tag admitted on the same Downstream interface</a></li>
<li><a
href="#tbl:objects-and-parameters-in-wi-fi-native-that-correspond-to-wi-fi-data-elements">Objects
and parameters in Wi-Fi Native that correspond to Wi-Fi Data
Elements</a></li>
<li><a
href="#tbl:objects-and-parameters-in-wi-fi-data-elements-that-correspond-to-wi-fi-native">Objects
and parameters in Wi-Fi Data Elements that correspond to Wi-Fi
Native</a></li>
<li><a href="#tbl:rfc-5969-configuration-parameter-mapping">RFC 5969
Configuration Parameter Mapping</a></li>
<li><a href="#tbl:fm-object-definition">FM Object Definition</a></li>
<li><a
href="#tbl:mapping-lmap-information-model-parameters-to-data-model-parameters">Mapping
LMAP Information Model Parameters to Data Model Parameters</a></li>
<li><a href="#tbl:device.wwc-objects">Device.WWC objects</a></li>
<li><a href="#tbl:device.pdu-objects">Device.PDU objects</a></li>
<li><a href="#tbl:device.fwe-objects">Device.FWE objects</a></li>
</ol>
<h3 class="unnumbered unlisted new-page auto-hoverlink"
data-info="header" id="sec:notice">Notice</h3>
<p>The Broadband Forum is a non-profit corporation organized to create
guidelines for broadband network system development and deployment. This
Technical Report has been approved by members of the Forum. This
Technical Report is subject to change. This Technical Report is owned
and copyrighted by the Broadband Forum, and all rights are reserved.
Portions of this Technical Report may be owned and/or copyrighted by
Broadband Forum members.</p>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="sec:intellectual-property">Intellectual Property</h3>
<p>Recipients of this Technical Report are requested to submit, with
their comments, notification of any relevant patent claims or other
intellectual property rights of which they may be aware that might be
infringed by any implementation of this Technical Report, or use of any
software code normatively referenced in this Technical Report, and to
provide supporting documentation.</p>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="sec:terms-of-use">Terms of Use</h3>
<p><strong>1. License</strong></p>
<p>Broadband Forum hereby grants you the right, without charge, on a
perpetual, non-exclusive and worldwide basis, to utilize the Technical
Report for the purpose of developing, making, having made, using,
marketing, importing, offering to sell or license, and selling or
licensing, and to otherwise distribute, products complying with the
Technical Report, in all cases subject to the conditions set forth in
this notice and any relevant patent and other intellectual property
rights of third parties (which may include members of Broadband Forum).
This license grant does not include the right to sublicense, modify or
create derivative works based upon the Technical Report except to the
extent this Technical Report includes text implementable in computer
code, in which case your right under this License to create and modify
derivative works is limited to modifying and creating derivative works
of such code. For the avoidance of doubt, except as qualified by the
preceding sentence, products implementing this Technical Report are not
deemed to be derivative works of the Technical Report.</p>
<p><strong>2. NO WARRANTIES</strong></p>
<p>THIS TECHNICAL REPORT IS BEING OFFERED WITHOUT ANY WARRANTY
WHATSOEVER, AND IN PARTICULAR, ANY WARRANTY OF NONINFRINGEMENT AND ANY
IMPLIED WARRANTIES ARE EXPRESSLY DISCLAIMED. ANY USE OF THIS TECHNICAL
REPORT SHALL BE MADE ENTIRELY AT THE USER’S OR IMPLEMENTER’S OWN RISK,
AND NEITHER THE BROADBAND FORUM, NOR ANY OF ITS MEMBERS OR SUBMITTERS,
SHALL HAVE ANY LIABILITY WHATSOEVER TO ANY USER, IMPLEMENTER, OR THIRD
PARTY FOR ANY DAMAGES OF ANY NATURE WHATSOEVER, DIRECTLY OR INDIRECTLY,
ARISING FROM THE USE OF THIS TECHNICAL REPORT, INCLUDING BUT NOT LIMITED
TO, ANY CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL, AND INDIRECT
DAMAGES.</p>
<p><strong>3. THIRD PARTY RIGHTS</strong></p>
<p>Without limiting the generality of Section 2 above, BROADBAND FORUM
ASSUMES NO RESPONSIBILITY TO COMPILE, CONFIRM, UPDATE OR MAKE PUBLIC ANY
THIRD PARTY ASSERTIONS OF PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS
THAT MIGHT NOW OR IN THE FUTURE BE INFRINGED BY AN IMPLEMENTATION OF THE
TECHNICAL REPORT IN ITS CURRENT, OR IN ANY FUTURE FORM. IF ANY SUCH
RIGHTS ARE DESCRIBED ON THE TECHNICAL REPORT, BROADBAND FORUM TAKES NO
POSITION AS TO THE VALIDITY OR INVALIDITY OF SUCH ASSERTIONS, OR THAT
ALL SUCH ASSERTIONS THAT HAVE OR MAY BE MADE ARE SO LISTED.</p>
<p>All copies of this Technical Report (or any portion hereof) must
include the notices, legends, and other provisions set forth on this
page.</p>
<!-- do not edit! this file was created from PROJECT.yaml by project-parser.py -->
<h3 class="unnumbered unlisted new-page auto-hoverlink"
data-info="header" id="sec:issue-history">Issue History</h3>
<table class="bbf-revision-history" style="width:100%;">
<colgroup>
<col style="width: 13%" />
<col style="width: 13%" />
<col style="width: 13%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Issue Number</th>
<th style="text-align: left;">Approval Date</th>
<th style="text-align: left;">Issue Editor</th>
<th style="text-align: left;">Changes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2.pdf">Issue
2</a></td>
<td style="text-align: left;">May 2010</td>
<td style="text-align: left;"><ul>
<li>Paul Sigurdson, Broadband Forum</li>
<li>William Lupton, 2Wire</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Original</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;">Issue 2 Amendment 1</td>
<td style="text-align: left;">November 2010</td>
<td style="text-align: left;"><ul>
<li>Paul Sigurdson, Broadband Forum</li>
<li>William Lupton, 2Wire</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Issue 2 Corrigendum 1</td>
<td style="text-align: left;">November 2010</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-2.pdf">Issue
2 Amendment 2</a></td>
<td style="text-align: left;">February 2011</td>
<td style="text-align: left;"><ul>
<li>Paul Sigurdson, Broadband Forum</li>
<li>William Lupton, Pace</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added IPv6 and Firewall Appendices</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Issue 2 Amendment 3</td>
<td style="text-align: left;">July 2011</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;">Issue 2 Amendment 4</td>
<td style="text-align: left;">November 2011</td>
<td style="text-align: left;"><ul>
<li>William Lupton, Pace</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-5.pdf">Issue
2 Amendment 5</a></td>
<td style="text-align: left;">May 2012</td>
<td style="text-align: left;"><ul>
<li>William Lupton, Pace</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added Tunneling Annex and IPsec Appendix</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-6.pdf">Issue
2 Amendment 6</a></td>
<td style="text-align: left;">November 2012</td>
<td style="text-align: left;"><ul>
<li>Tim Carey, Alcatel-Lucent</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added support M2M SCL Administration as an Appendix</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-7.pdf">Issue
2 Amendment 7</a></td>
<td style="text-align: left;">November 2013</td>
<td style="text-align: left;"><ul>
<li>Apostolos Papageorgiou, NEC</li>
<li>William Lupton, Cisco</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added ZigBee and Provider Bridge theory of operation</li>
<li>Added backup/restore theory of operation</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-8.pdf">Issue
2 Amendment 8</a></td>
<td style="text-align: left;">September 2014</td>
<td style="text-align: left;"><ul>
<li>William Lupton, Cisco</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Updated Annex B on tunneling</li>
<li>Added GRE, MAP and PCP theory of operation</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Issue 2 Amendment 9</td>
<td style="text-align: left;">December 2014</td>
<td style="text-align: left;"><ul>
<li>Douglas Knisely, Qualcomm, Inc</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-10.pdf">Issue
2 Amendment 10</a></td>
<td style="text-align: left;">November 2015</td>
<td style="text-align: left;"><ul>
<li>Klaus Wich, Axiros</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>No changes to the specification</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Issue 2 Corrigendum 2</td>
<td style="text-align: left;">July 2016</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><ul>
<li>Removed <em>SSID</em> unique key from <em>WiFi.SSID</em> object</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-11.pdf">Issue
2 Amendment 11</a></td>
<td style="text-align: left;">July 2016</td>
<td style="text-align: left;"><ul>
<li>Klaus Wich, Axiros</li>
<li>Mark Tabry, Google</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added G.fast theory of operation</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-12.pdf">Issue
2 Amendment 12</a></td>
<td style="text-align: left;">March 2018</td>
<td style="text-align: left;"><ul>
<li>Steve Nicolai, Arris</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added Appendix I, II, IV from TR-157a10 as Appendix XVII, XVIII and
XIX</li>
<li>Added Appendix XX BASAPM and LMAP Theory of Operations</li>
<li>Added Annex H from TR-069a5 as Annex C</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-13.pdf">Issue
2 Amendment 13</a></td>
<td style="text-align: left;">September 2019</td>
<td style="text-align: left;"><ul>
<li>Klaus Wich, Huawei</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Unified text for CWMP and USP support</li>
<li>Updated references</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-14.pdf">Issue
2 Amendment 14</a></td>
<td style="text-align: left;">November 2020</td>
<td style="text-align: left;"><ul>
<li>David Woolley, Telstra</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Added Appendix XXI 5G - Wireline Wireless Convergence and Appendix
XXII Data Elements</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;">Issue 2 Amendment 14 Corrigendum 1</td>
<td style="text-align: left;">November 2020</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-15.pdf">Issue
2 Amendment 15</a></td>
<td style="text-align: left;">January 2022</td>
<td style="text-align: left;"><ul>
<li>William Lupton, Broadband Forum</li>
</ul></td>
<td style="text-align: left;"><ul>
<li>Converted the document to markdown and extended the Wi-Fi Theory of
Operation</li>
</ul></td>
</tr>
<tr class="even">
<td style="text-align: left;">Issue 2 Amendment 15 Corrigendum 1</td>
<td style="text-align: left;">April 2022</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><ul>
<li>Document not updated</li>
</ul></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.broadband-forum.org/download/TR-181_Issue-2_Amendment-16.pdf">Issue
2 Amendment 16</a></td>
<td style="text-align: left;">June 2023</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"><ul>
<li>Refreshed all diagrams</li>
<li>Added ToO appendix for logical interfaces concept</li>
<li>Extended advanced firewall appendix</li>
<li>Updated Wi-Fi theory of operation</li>
</ul></td>
</tr>
</tbody>
</table>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="sec:bbfworkarea-work-area-directors"> Work Area Directors</h3>
<ul>
<li>Jason Walls, QA Cafe</li>
<li>John Blackford, CommScope</li>
</ul>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="sec:bbfprojectstream-project-stream-leaders"> Project Stream
Leaders</h3>
<ul>
<li>Daniel Egger, Axiros</li>
<li>William Lupton, Broadband Forum</li>
</ul>
<h3 class="unnumbered unlisted auto-hoverlink" data-info="header"
id="sec:acknowledgments">Acknowledgments</h3>
<ul>
<li>Al Morton, AT&amp;T</li>
<li>Alexandre Abdo, Sagemcom</li>
<li>André-Jean Côté, Snom</li>
<li>Barbara Stark, AT&amp;T</li>
<li>Charles Foster, BT</li>
<li>Chen Li, AT&amp;T</li>
<li>Chris Gray, Orange</li>
<li>Daniel Egger, Axiros</li>
<li>David Cluytens, Orange</li>
<li>Jason Walls, QA Cafe</li>
<li>Johan Jacobs, Orange</li>
<li>John Blackford, Commscope</li>
<li>Ken Kerpez, DZS</li>
<li>Laurent Alarcon, Sagemcom</li>
<li>Matthieu Anne, Orange</li>
<li>Patrick Rogier, Orange</li>
<li>Ramesh Rajasekaran, Nokia</li>
<li>Richard Holme, Commscope</li>
<li>Tim Spets, Nokia</li>
<li>William Lupton, BBF</li>
</ul>
<h1 class="unnumbered new-page auto-hoverlink" data-info="header"
id="sec:executive-summary">Executive Summary</h1>
<p>TR-181 Issue 2 defines version 2 of the Device data model (Device:2).
The Device:2 data model applies to all types of TR-069 or USP enabled
devices, including End Devices, Residential Gateways, and other Network
Infrastructure Devices.</p>
<p>The Device:2 data model defined in this Technical Report consists of
a set of data objects covering things like basic device information,
time-of-day configuration, network interface and protocol stack
configuration, routing and bridging management, throughput statistics,
and diagnostic tests. It also defines a baseline profile that specifies
a minimum level of data model support.</p>
<p>The cornerstone of the Device:2 data model is the interface stacking
mechanism. Network interfaces and protocol layers are modeled as
independent data objects that can be stacked, one on top of the other,
into whatever configuration a device might support.</p>
<h1 class="new-page auto-hoverlink" data-info="header"
id="sec:purpose-and-scope">1 Purpose and Scope</h1>
<h2 class="auto-hoverlink" data-info="header" id="sec:purpose">1.1
Purpose</h2>
<p>This Technical Report defines version 2 of the Device data model
(Device:2). The Device:2 data model applies to all types of TR-069 or
USP enabled devices, including End Devices, Residential Gateways, and
other Network Infrastructure Devices.</p>
<h2 class="auto-hoverlink" data-info="header" id="sec:scope">1.2
Scope</h2>
<p>The Device:2 data model defined in this Technical Report consists of
a set of data objects covering things like basic device information,
time-of-day configuration, network interface and protocol stack
configuration, routing and bridging management, throughput statistics,
and diagnostic tests. It also defines a baseline profile that specifies
a minimum level of data model support.</p>
<p>The cornerstone of the Device:2 data model is the interface stacking
mechanism. Network interfaces and protocol layers are modeled as
independent data objects (a.k.a. interface objects) that can be stacked,
one on top of the other, into whatever configuration a device might
support.</p>
<p>Because the Device:2 data model can be used with either the USP or
the CWMP (TR-069) protocol, it contains some objects and parameters
which only apply if the specific protocol is used.</p>
<p><a href="#fig:cwmp-specific-device2-data-model-structure--overview"
class="figure">Figure 1</a> illustrates the top-level Device:2 data
model structure for CWMP, <a
href="#fig:usp-specific-device2-data-model-structure--overview"
class="figure">Figure 2</a> the top-level Device:2 data model structure
for USP.</p>
<figure id="fig:cwmp-specific-device2-data-model-structure--overview">
<img src="images/tr-181-2-cwmp-overview.png"
id="img:cwmp-specific-device2-data-model-structure--overview"
alt="CWMP-specific Device:2 Data Model Structure – Overview" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:cwmp-specific-device2-data-model-structure--overview">
Figure 1:
CWMP-specific Device:2 Data Model Structure – Overview
</div></figcaption>
</figure>
<figure id="fig:usp-specific-device2-data-model-structure--overview">
<img src="images/tr-181-2-usp-overview.png"
id="img:usp-specific-device2-data-model-structure--overview"
alt="USP-specific Device:2 Data Model Structure – Overview" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:usp-specific-device2-data-model-structure--overview">
Figure 2:
USP-specific Device:2 Data Model Structure – Overview
</div></figcaption>
</figure>
<h3 class="new-page auto-hoverlink" data-info="header"
id="sec:detailed-structure-for-common-elements">1.2.1 Detailed structure
for common elements</h3>
<p>The next figures illustrate the data model structure of the common
parts in greater detail. This structure applies equally for USP and
CWMP. See <em><a href="#sec:parameter-definitions"
class="heading">Parameter Definitions</a></em> for the complete list of
objects.</p>
<figure id="fig:device2-data-model-structure--device-level">
<img src="images/tr-181-2-usp-device.png"
id="img:device2-data-model-structure--device-level"
alt="Device:2 Data Model Structure – Device Level" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--device-level">
Figure 3:
Device:2 Data Model Structure – Device Level
</div></figcaption>
</figure>
<figure
id="fig:device2-data-model-structure--common-interface-stack-and-networking-technologies">
<img src="images/tr-181-2-usp-ifstack.png"
id="img:device2-data-model-structure--common-interface-stack-and-networking-technologies"
alt="Device:2 Data Model Structure – Common Interface Stack and Networking Technologies" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--common-interface-stack-and-networking-technologies">
Figure 4:
Device:2 Data Model Structure – Common Interface Stack and Networking
Technologies
</div></figcaption>
</figure>
<figure
id="fig:device2-data-model-structure--common-applications-and-protocols">
<img src="images/tr-181-2-usp-protocols.png"
id="img:device2-data-model-structure--common-applications-and-protocols"
alt="Device:2 Data Model Structure – Common Applications and Protocols" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--common-applications-and-protocols">
Figure 5:
Device:2 Data Model Structure – Common Applications and Protocols
</div></figcaption>
</figure>
<h3 class="auto-hoverlink" data-info="header"
id="sec:detailed-structure-for-cwmp-specific-elements">1.2.2 Detailed
structure for CWMP specific elements</h3>
<p>The next figures illustrate the data model structure of the CWMP
specific parts in greater detail. See <em><a
href="#sec:parameter-definitions" class="heading">Parameter
Definitions</a></em> for the complete list of objects.</p>
<figure id="fig:device2-data-model-structure--cwmp-management">
<img src="images/tr-181-2-cwmp-cwmp-management.png"
id="img:device2-data-model-structure--cwmp-management"
alt="Device:2 Data Model Structure – CWMP Management" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--cwmp-management">
Figure 6:
Device:2 Data Model Structure – CWMP Management
</div></figcaption>
</figure>
<figure
id="fig:device2-data-model-structure--cwmp-specific-applications-and-protocols">
<img src="images/tr-181-2-cwmp-cwmp-protocols.png"
id="img:device2-data-model-structure--cwmp-specific-applications-and-protocols"
alt="Device:2 Data Model Structure – CWMP-specific applications and protocols" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--cwmp-specific-applications-and-protocols">
Figure 7:
Device:2 Data Model Structure – CWMP-specific applications and protocols
</div></figcaption>
</figure>
<h3 class="new-page auto-hoverlink" data-info="header"
id="sec:detailed-structure-for-usp-specific-elements">1.2.3 Detailed
structure for USP specific elements</h3>
<p>The next figures illustrate the data model structure of the USP
specific parts in greater detail. See <em><a
href="#sec:parameter-definitions" class="heading">Parameter
Definitions</a></em> for the complete list of objects.</p>
<figure id="fig:device2-data-model-structure--usp-management">
<img src="images/tr-181-2-usp-usp-management.png"
id="img:device2-data-model-structure--usp-management"
alt="Device:2 Data Model Structure – USP Management" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--usp-management">
Figure 8:
Device:2 Data Model Structure – USP Management
</div></figcaption>
</figure>
<figure
id="fig:device2-data-model-structure--usp-specific-applications-and-protocols">
<img src="images/tr-181-2-usp-usp-protocols.png"
id="img:device2-data-model-structure--usp-specific-applications-and-protocols"
alt="Device:2 Data Model Structure – USP-specific applications and protocols" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device2-data-model-structure--usp-specific-applications-and-protocols">
Figure 9:
Device:2 Data Model Structure – USP-specific applications and protocols
</div></figcaption>
</figure>
<h1 class="new-page auto-hoverlink" data-info="header"
id="sec:references-and-terminology">2 References and Terminology</h1>
<h2 class="auto-hoverlink" data-info="header" id="sec:conventions">2.1
Conventions</h2>
<p>In this Technical Report, several words are used to signify the
requirements of the specification. These words are always capitalized.
More information can be found in RFC 2119 <span class="citation"
data-cites="RFC2119"><a href="#ref-RFC2119"
role="doc-biblioref">[13]</a></span>.</p>
<div class="borderless">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>MUST</strong></td>
<td>This word, or the term “REQUIRED”, means that the definition is an
absolute requirement of the specification.</td>
</tr>
<tr class="even">
<td><strong>MUST NOT</strong></td>
<td>This phrase means that the definition is an absolute prohibition of
the specification.</td>
</tr>
<tr class="odd">
<td><strong>SHOULD</strong></td>
<td>This word, or the term “RECOMMENDED”, means that there could exist
valid reasons in particular circumstances to ignore this item, but the
full implications need to be understood and carefully weighed before
choosing a different course.</td>
</tr>
<tr class="even">
<td><strong>SHOULD NOT</strong></td>
<td>This phrase, or the phrase “NOT RECOMMENDED” means that there could
exist valid reasons in particular circumstances when the particular
behavior is acceptable or even useful, but the full implications need to
be understood and the case carefully weighed before implementing any
behavior described with this label.</td>
</tr>
<tr class="odd">
<td><strong>MAY</strong></td>
<td>This word, or the term “OPTIONAL”, means that this item is one of an
allowed set of alternatives. An implementation that does not include
this option MUST be prepared to inter-operate with another
implementation that does include the option.</td>
</tr>
</tbody>
</table>
</div>
<p>The key words “DEPRECATED” and “OBSOLETED” in this Technical Report
are to be interpreted as defined in TR-106 <span class="citation"
data-cites="TR-106"><a href="#ref-TR-106"
role="doc-biblioref">[60]</a></span>.</p>
<h2 class="auto-hoverlink" data-info="header" id="sec:references">2.2
References</h2>
<p>The following references are of relevance to this Technical Report.
At the time of publication, the editions indicated were valid. All
references are subject to revision; users of this Technical Report are
therefore encouraged to investigate the possibility of applying the most
recent edition of the references listed below.</p>
<p>A list of currently valid Broadband Forum Technical Reports is
published at <a href="https://www.broadband-forum.org"
class="uri">https://www.broadband-forum.org</a>.</p>
<div id="refs" class="references csl-bib-body" role="list">
<div id="ref-3GPP-TS.23.501" class="csl-entry" role="listitem">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline"><a
href="https://www.3gpp.org/ftp/Specs/html-info/23501.htm">3GPP TS
23.501</a>, <em>System architecture for the 5G System (5GS); Stage
2</em>, 3GPP SA WG2</div>
</div>
<div id="ref-3GPP-TS.23.503" class="csl-entry" role="listitem">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline"><a
href="https://www.3gpp.org/ftp/Specs/html-info/23503.htm">3GPP TS
23.503</a>, <em>Policy and charging control framework for the 5G System
(5GS); Stage 2</em>, 3GPP CT WG4, 2019</div>
</div>
<div id="ref-DataElements" class="csl-entry" role="listitem">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline"><a
href="https://www.wi-fi.org/discover-wi-fi/specifications">Data Elements
Specification</a>, <em>Wi-Fi Data Elements Specification</em>, Wi-Fi
Alliance, 2021</div>
</div>
<div id="ref-draft-boucadair-pcp-flow-examples" class="csl-entry"
role="listitem">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline"><a
href="https://datatracker.ietf.org/doc/html/draft-boucadair-pcp-flow-examples-04">draft-boucadair-pcp-flow-examples-04</a>,
<em>Port Control Protocol (PCP) Flow Examples</em>, IETF, 2015</div>
</div>
<div id="ref-ETSIM2MFA" class="csl-entry" role="listitem">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline"><a
href="https://docbox.etsi.org/M2M/Open/Latest_Drafts/00002ed121v116.pdf">ETSI
TS 102 690 v1.1.6</a>, <em>Machine-to-Machine Communications (M2M
Functional Architecture)</em>, ETSI, 2012</div>
</div>
<div id="ref-ETSIM2MInterfaces" class="csl-entry" role="listitem">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline"><a
href="https://docbox.etsi.org/M2M/Open/Latest_Drafts/00010ed121v116.pdf">ETSI
TS 102 921 v1.1.6</a>, <em>M2M mIa, dIa and mId Interfaces</em>, ETSI,
2012</div>
</div>
<div id="ref-IANA-Method-Tokens" class="csl-entry" role="listitem">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline"><a
href="https://www.iana.org/assignments/method-tokens/method-tokens.xhtml">IANA
Method Tokens Registry</a>, <em>Method Tokens</em>, IANA, 2008</div>
</div>
<div id="ref-ICSA-Baseline" class="csl-entry" role="listitem">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline"><a
href="https://www.icsalabs.com/sites/default/files/baseline.pdf">ICSA
Baseline Modular Firewall Certification Criteria</a>, <em>Baseline
module - version 4.1</em>, ICSA Labs, 2008</div>
</div>
<div id="ref-ICSA-Residential" class="csl-entry" role="listitem">
<div class="csl-left-margin">[9] </div><div class="csl-right-inline"><a
href="https://www.icsalabs.com/sites/default/files/residential.pdf">ICSA
Residential Modular Firewall Certification Criteria</a>, <em>Required
Services Security Policy - Residential Category module - version
4.1</em>, ICSA Labs, 2008</div>
</div>
<div id="ref-802.1D-2004" class="csl-entry" role="listitem">
<div class="csl-left-margin">[10] </div><div class="csl-right-inline"><a
href="http://ieeexplore.ieee.org/servlet/opac?punumber=9155">IEEE Std
802.1D-2004</a>, <em>IEEE Standard for Local and metropolitan area
networks: Media Access Control (MAC) Bridges</em>, IEEE, 2004</div>
</div>
<div id="ref-802.1Q-2011" class="csl-entry" role="listitem">
<div class="csl-left-margin">[11] </div><div class="csl-right-inline"><a
href="https://standards.ieee.org/getieee802/download/802.1Q-2011.pdf">IEEE
Std 802.1Q-2011</a>, <em>MAC Bridges and Virtual Bridge Local Area
Networks</em>, IEEE, 2011</div>
</div>
<div id="ref-REC-xmlschema-0-20041028" class="csl-entry"
role="listitem">
<div class="csl-left-margin">[12] </div><div class="csl-right-inline"><a
href="https://www.w3.org/TR/2004/REC-xmlschema-0-20041028">REC-xmlschema-0-20041028</a>,
<em>XML Schema Part 0: Primer Second Edition</em>, W3C, 2004</div>
</div>
<div id="ref-RFC2119" class="csl-entry" role="listitem">
<div class="csl-left-margin">[13] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2119.html">RFC 2119</a>, <em>Key
words for use in RFCs to Indicate Requirement Levels</em>, IETF,
1997</div>
</div>
<div id="ref-RFC2460" class="csl-entry" role="listitem">
<div class="csl-left-margin">[14] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2460.html">RFC 2460</a>,
<em>Internet Protocol, Version 6 (IPv6) Specification</em>, IETF,
1998</div>
</div>
<div id="ref-RFC2464" class="csl-entry" role="listitem">
<div class="csl-left-margin">[15] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2464.html">RFC 2464</a>,
<em>Transmission of IPv6 Packets over Ethernet Networks</em>, IETF,
1998</div>
</div>
<div id="ref-RFC2597" class="csl-entry" role="listitem">
<div class="csl-left-margin">[16] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2597.html">RFC 2597</a>,
<em>Assured Forwarding PHB Group</em>, IETF, 1999</div>
</div>
<div id="ref-RFC2661" class="csl-entry" role="listitem">
<div class="csl-left-margin">[17] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2661.html">RFC 2661</a>,
<em>Layer Two Tunneling Protocol <span>‘L2TP’</span></em>, IETF,
1999</div>
</div>
<div id="ref-RFC2784" class="csl-entry" role="listitem">
<div class="csl-left-margin">[18] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2784.html">RFC 2784</a>,
<em>Generic Routing Encapsulation (GRE)</em>, IETF, 2000</div>
</div>
<div id="ref-RFC2863" class="csl-entry" role="listitem">
<div class="csl-left-margin">[19] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2863.html">RFC 2863</a>, <em>The
Interfaces Group MIB</em>, IETF, 2000</div>
</div>
<div id="ref-RFC2890" class="csl-entry" role="listitem">
<div class="csl-left-margin">[20] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc2890.html">RFC 2890</a>, <em>Key
and Sequence Number Extensions to GRE</em>, IETF, 2000</div>
</div>
<div id="ref-RFC3246" class="csl-entry" role="listitem">
<div class="csl-left-margin">[21] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc3246.html">RFC 3246</a>, <em>An
Expedited Forwarding PHB (Per-Hop Behavior)</em>, IETF, 2002</div>
</div>
<div id="ref-RFC3261" class="csl-entry" role="listitem">
<div class="csl-left-margin">[22] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc3261.html">RFC 3261</a>,
<em>SIP: Session Initiation Protocol</em>, IETF, 2002</div>
</div>
<div id="ref-RFC3315" class="csl-entry" role="listitem">
<div class="csl-left-margin">[23] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc3315.html">RFC 3315</a>,
<em>Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</em>, IETF,
2003</div>
</div>
<div id="ref-RFC3435" class="csl-entry" role="listitem">
<div class="csl-left-margin">[24] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc3435.html">RFC 3435</a>,
<em>Media Gateway Control Protocol (MGCP) Version 1.0</em>, IETF,
2003</div>
</div>
<div id="ref-RFC3633" class="csl-entry" role="listitem">
<div class="csl-left-margin">[25] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc3633.html">RFC 3633</a>,
<em>IPv6 Prefix Options for Dynamic Host Configuration Protocol (DHCP)
version 6</em>, IETF, 2003</div>
</div>
<div id="ref-RFC3986" class="csl-entry" role="listitem">
<div class="csl-left-margin">[26] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc3986.html">RFC 3986</a>,
<em>Uniform Resource Identifier (URI): Generic Syntax</em>, IETF,
2005</div>
</div>
<div id="ref-RFC4119" class="csl-entry" role="listitem">
<div class="csl-left-margin">[27] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4119.html">RFC 4119</a>, <em>A
Presence-based GEOPRIV Location Object Format</em>, IETF, 2005</div>
</div>
<div id="ref-RFC4122" class="csl-entry" role="listitem">
<div class="csl-left-margin">[28] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4122.html">RFC 4122</a>, <em>A
Universally Unique IDentifier (UUID) URN Namespace</em>, IETF,
2005</div>
</div>
<div id="ref-RFC4191" class="csl-entry" role="listitem">
<div class="csl-left-margin">[29] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4191.html">RFC 4191</a>,
<em>Default Router Preferences and More-Specific Routes</em>, IETF,
2005</div>
</div>
<div id="ref-RFC4193" class="csl-entry" role="listitem">
<div class="csl-left-margin">[30] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4193.html">RFC 4193</a>,
<em>Unique Local IPv6 Unicast Addresses</em>, IETF, 2005</div>
</div>
<div id="ref-RFC4301" class="csl-entry" role="listitem">
<div class="csl-left-margin">[31] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4301.html">RFC 4301</a>,
<em>Security Architecture for the Internet Protocol</em>, IETF,
2005</div>
</div>
<div id="ref-RFC4302" class="csl-entry" role="listitem">
<div class="csl-left-margin">[32] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4302.html">RFC 4302</a>, <em>IP
Authentication Header</em>, IETF, 2005</div>
</div>
<div id="ref-RFC4303" class="csl-entry" role="listitem">
<div class="csl-left-margin">[33] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4303.html">RFC 4303</a>, <em>IP
Encapsulating Security Payload (ESP)</em>, IETF, 2005</div>
</div>
<div id="ref-RFC4479" class="csl-entry" role="listitem">
<div class="csl-left-margin">[34] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4479.html">RFC 4479</a>, <em>A
Data Model for Presence</em>, IETF, 2006</div>
</div>
<div id="ref-RFC4566" class="csl-entry" role="listitem">
<div class="csl-left-margin">[35] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4566.html">RFC 4566</a>,
<em>SDP: Session Description Protocol</em>, IETF, 2006</div>
</div>
<div id="ref-RFC4861" class="csl-entry" role="listitem">
<div class="csl-left-margin">[36] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4861.html">RFC 4861</a>,
<em>Neighbor Discovery for IP version 6 (IPv6)</em>, IETF, 2007</div>
</div>
<div id="ref-RFC4862" class="csl-entry" role="listitem">
<div class="csl-left-margin">[37] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc4862.html">RFC 4862</a>,
<em>IPv6 Stateless Address Autoconfiguration</em>, IETF, 2007</div>
</div>
<div id="ref-RFC5072" class="csl-entry" role="listitem">
<div class="csl-left-margin">[38] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc5072.html">RFC 5072</a>, <em>IP
Version 6 over PPP</em>, IETF, 2007</div>
</div>
<div id="ref-RFC5139" class="csl-entry" role="listitem">
<div class="csl-left-margin">[39] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc5139.html">RFC 5139</a>,
<em>Revised Civic Location Format for Presence Information Data Format
Location Object (PIDF-LO)</em>, IETF, 2008</div>
</div>
<div id="ref-RFC5491" class="csl-entry" role="listitem">
<div class="csl-left-margin">[40] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc5491.html">RFC 5491</a>,
<em>GEOPRIV Presence Information Data Format Location Object (PIDF-LO)
Usage Clarification, Considerations, and Recommendations</em>, IETF,
2009</div>
</div>
<div id="ref-RFC5969" class="csl-entry" role="listitem">
<div class="csl-left-margin">[41] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc5969.html">RFC 5969</a>,
<em>IPv6 Rapid Deployment on IPv4 Infrastructures (6rd) -- Protocol
Specification</em>, IETF, 2010</div>
</div>
<div id="ref-RFC5996" class="csl-entry" role="listitem">
<div class="csl-left-margin">[42] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc5996.html">RFC 5996</a>,
<em>Internet Key Exchange Protocol Version 2 (IKEv2)</em>, IETF,
2010</div>
</div>
<div id="ref-RFC6106" class="csl-entry" role="listitem">
<div class="csl-left-margin">[43] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc6106.html">RFC 6106</a>,
<em>IPv6 Router Advertisement Options for DNS Configuration</em>, IETF,
2010</div>
</div>
<div id="ref-RFC6333" class="csl-entry" role="listitem">
<div class="csl-left-margin">[44] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc6333.html">RFC 6333</a>,
<em>Dual-Stack Lite Broadband Deployments Following IPv4
Exhaustion</em>, IETF, 2011</div>
</div>
<div id="ref-RFC6334" class="csl-entry" role="listitem">
<div class="csl-left-margin">[45] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc6334.html">RFC 6334</a>,
<em>Dynamic Host Configuration Protocol for IPv6 (DHCPv6) Option for
Dual-Stack Lite</em>, IETF, 2011</div>
</div>
<div id="ref-RFC6887" class="csl-entry" role="listitem">
<div class="csl-left-margin">[46] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc6887.html">RFC 6887</a>,
<em>Port Control Protocol (PCP)</em>, IETF, 2013</div>
</div>
<div id="ref-RFC6970" class="csl-entry" role="listitem">
<div class="csl-left-margin">[47] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc6970.html">RFC 6970</a>,
<em>Universal Plug and Play (UPnP) Internet Gateway Device - Port
Control Protocol Interworking Function (IGD-PCP IWF)</em>, IETF,
2013</div>
</div>
<div id="ref-RFC7291" class="csl-entry" role="listitem">
<div class="csl-left-margin">[48] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7291.html">RFC 7291</a>,
<em>DHCP Options for the Port Control Protocol (PCP)</em>, IETF,
2014</div>
</div>
<div id="ref-RFC7488" class="csl-entry" role="listitem">
<div class="csl-left-margin">[49] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7488.html">RFC 7488</a>,
<em>Port Control Protocol (PCP) Server Selection</em>, IETF, 2015</div>
</div>
<div id="ref-RFC7594" class="csl-entry" role="listitem">
<div class="csl-left-margin">[50] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7594.html">RFC 7594</a>, <em>A
Framework for Large-Scale Measurement of Broadband Performance
(LMAP)</em>, IETF, 2015</div>
</div>
<div id="ref-RFC7597" class="csl-entry" role="listitem">
<div class="csl-left-margin">[51] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7597.html">RFC 7597</a>,
<em>Mapping of Address and Port with Encapsulation (MAP-E)</em>, IETF,
2015</div>
</div>
<div id="ref-RFC7598" class="csl-entry" role="listitem">
<div class="csl-left-margin">[52] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7598.html">RFC 7598</a>,
<em>DHCPv6 Options for Configuration of Softwire Address and Port-Mapped
Clients</em>, IETF, 2015</div>
</div>
<div id="ref-RFC7599" class="csl-entry" role="listitem">
<div class="csl-left-margin">[53] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7599.html">RFC 7599</a>,
<em>Mapping of Address and Port using Translation (MAP-T)</em>, IETF,
2015</div>
</div>
<div id="ref-RFC7648" class="csl-entry" role="listitem">
<div class="csl-left-margin">[54] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc7648.html">RFC 7648</a>,
<em>Port Control Protocol (PCP) Proxy Function</em>, IETF, 2015</div>
</div>
<div id="ref-RFC8193" class="csl-entry" role="listitem">
<div class="csl-left-margin">[55] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc8193.html">RFC 8193</a>,
<em>Information Model for Large-Scale Measurement Platforms
(LMAPs)</em>, IETF, 2017</div>
</div>
<div id="ref-RFC8822" class="csl-entry" role="listitem">
<div class="csl-left-margin">[56] </div><div class="csl-right-inline"><a
href="https://www.rfc-editor.org/rfc/rfc8822.html">RFC 8822</a>, <em>5G
Wireless Wireline Convergence User Plane Encapsulation (5WE)</em>, IETF,
2021</div>
</div>
<div id="ref-TR-059" class="csl-entry" role="listitem">
<div class="csl-left-margin">[57] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-059.pdf">TR-059</a>,
<em>DSL Evolution - Architecture Requirements for the Support of
QoS-Enabled IP Services</em>, Broadband Forum, 2003</div>
</div>
<div id="ref-TR-069" class="csl-entry" role="listitem">
<div class="csl-left-margin">[58] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-069.pdf">TR-069
Amendment 6</a>, <em>CPE WAN Management Protocol</em>, Broadband Forum,
2018</div>
</div>
<div id="ref-TR-101" class="csl-entry" role="listitem">
<div class="csl-left-margin">[59] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-101.pdf">TR-101 Issue
2</a>, <em>Migration to Ethernet Based DSL Aggregation</em>, Broadband
Forum, 2011</div>
</div>
<div id="ref-TR-106" class="csl-entry" role="listitem">
<div class="csl-left-margin">[60] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-106.pdf">TR-106
Amendment 8</a>, <em>Data Model Template for CWMP Endpoints and USP
Agents</em>, Broadband Forum, 2018</div>
</div>
<div id="ref-TR-124" class="csl-entry" role="listitem">
<div class="csl-left-margin">[61] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-124.pdf">TR-124 Issue
5</a>, <em>Functional Requirements for Broadband Residential Gateway
Devices</em>, Broadband Forum, 2016</div>
</div>
<div id="ref-TR-143" class="csl-entry" role="listitem">
<div class="csl-left-margin">[62] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-143.pdf">TR-143
Amendment 1 Corrigendum 1</a>, <em>Enabling Network Throughput
Performance Tests and Statistical Monitoring</em>, Broadband Forum,
2015</div>
</div>
<div id="ref-TR-177" class="csl-entry" role="listitem">
<div class="csl-left-margin">[63] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-177.pdf">TR-177
Corrigendum 1</a>, <em>IPv6 in the context of TR-101</em>, Broadband
Forum, 2017</div>
</div>
<div id="ref-TR-187" class="csl-entry" role="listitem">
<div class="csl-left-margin">[64] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-187.pdf">TR-187 Issue
2</a>, <em>IPv6 for PPP Broadband Access</em>, Broadband Forum,
2013</div>
</div>
<div id="ref-TR-232" class="csl-entry" role="listitem">
<div class="csl-left-margin">[65] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-232.pdf">TR-232</a>,
<em>Bulk Data Collection</em>, Broadband Forum, 2012</div>
</div>
<div id="ref-TR-304" class="csl-entry" role="listitem">
<div class="csl-left-margin">[66] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-304.pdf">TR-304</a>,
<em>Broadband Access Service Attributes and Performance Metrics</em>,
Broadband Forum, 2015</div>
</div>
<div id="ref-TR-369" class="csl-entry" role="listitem">
<div class="csl-left-margin">[67] </div><div class="csl-right-inline"><a
href="https://usp.technology/specification">TR-369 Issue 1 Amendment
2</a>, <em>User Services Platform</em>, Broadband Forum, 2022</div>
</div>
<div id="ref-TR-470" class="csl-entry" role="listitem">
<div class="csl-left-margin">[68] </div><div class="csl-right-inline"><a
href="https://www.broadband-forum.org/download/TR-470.pdf">TR-470</a>,
<em>5G Wireless Wireline Convergence Architecture</em>, Broadband Forum,
2020</div>
</div>
<div id="ref-X.200" class="csl-entry" role="listitem">
<div class="csl-left-margin">[69] </div><div class="csl-right-inline"><a
href="https://www.itu.int/rec/T-REC-X.200-199407-I/en">X.200</a>,
<em>Information technology - Open Systems Interconnection - Basic
Reference Model: The basic model</em>, ITU-T, 1994</div>
</div>
<div id="ref-ZigBee2007" class="csl-entry" role="listitem">
<div class="csl-left-margin">[70] </div><div class="csl-right-inline"><a
href="https://csa-iot.org/all-solutions/zigbee">ZigBee 2007
Specification</a>, <em>ZigBee 2007 Specification</em>, ZigBee Alliance,
2007</div>
</div>
</div>
<h2 class="auto-hoverlink" data-info="header" id="sec:definitions">2.3
Definitions</h2>
<p>The following terminology is used throughout this Technical
Report.</p>
<div class="borderless">
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 75%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>5G Residential Gateway</strong></td>
<td>A CPE that uses native 5G control plane N1 signaling.</td>
</tr>
<tr class="even">
<td><strong>ACS</strong></td>
<td>Auto-Configuration Server. This is a component in the broadband
network responsible for <em>CWMP</em> auto-configuration of the
<em>CPE</em> for advanced services.</td>
</tr>
<tr class="odd">
<td><strong>Agent</strong></td>
<td>A generic term that refers (as appropriate) to either a CWMP
Endpoint or to a USP Agent.</td>
</tr>
<tr class="even">
<td><strong>AGF</strong></td>
<td>A function connecting wireline access networks to the 5GC. AGF-CP is
the control plane while AGF-UP is the user plane of the AGF.</td>
</tr>
<tr class="odd">
<td><strong>AMF</strong></td>
<td>The AMF is a 5G control plane function that terminates N1 and N2. It
is responsible for mobility and access related functions.</td>
</tr>
<tr class="even">
<td><strong>CPE</strong></td>
<td>Customer Premises Equipment; refers (as appropriate) to any
<em>CWMP</em>-enabled <span class="citation" data-cites="TR-069"><a
href="#ref-TR-069" role="doc-biblioref">[58]</a></span> or
<em>USP</em>-enabled <span class="citation" data-cites="TR-369"><a
href="#ref-TR-369" role="doc-biblioref">[67]</a></span> device and
therefore covers both Internet Gateway devices and LAN-side end
devices.</td>
</tr>
<tr class="odd">
<td><strong>Command</strong></td>
<td>A named element allowing a USP Controller to execute an operation on
a USP Agent. This concept does not apply to CWMP, which uses Objects
and/or Parameters to simulate operations.</td>
</tr>
<tr class="even">
<td><strong>Component</strong></td>
<td>A named collection of <em>Objects</em> and/or <em>Parameters</em>
and/or Profiles that can be included anywhere within a <em>Data
Model</em>.</td>
</tr>
<tr class="odd">
<td><strong>Controller</strong></td>
<td>A generic term that refers (as appropriate) to either a CWMP ACS or
a USP Controller.</td>
</tr>
<tr class="even">
<td><strong>CWMP</strong></td>
<td><em>CPE</em> WAN Management Protocol. Defined in TR-069 <span
class="citation" data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span>, CWMP is a communication protocol
between an <em>ACS</em> and a CWMP-enabled <em>CPE</em> that defines a
mechanism for secure auto-configuration of a <em>CPE</em> and other
<em>CPE</em> management functions in a common framework.</td>
</tr>
<tr class="odd">
<td><strong>CWMP Endpoint</strong></td>
<td>A CWMP termination point used by a CWMP-enabled CPE for
communication with the ACS<em>.</em></td>
</tr>
<tr class="even">
<td><strong>Data Model</strong></td>
<td>A hierarchical set of <em>Objects,</em> <em>Parameters, Commands
and/or Events</em> that define the managed objects accessible via a
particular <em>Agent</em>.</td>
</tr>
<tr class="odd">
<td><strong>Device</strong></td>
<td>Used here as a synonym for <em>CPE</em>.</td>
</tr>
<tr class="even">
<td><strong>DM Instance</strong></td>
<td>Data Model Schema instance document. This is an XML document that
conforms to the <em>DM Schema</em> and to any additional rules specified
in or referenced by the <em>DM Schema</em>.</td>
</tr>
<tr class="odd">
<td><strong>DM Schema</strong></td>
<td>Data Model Schema. This is the XML Schema <span class="citation"
data-cites="REC-xmlschema-0-20041028"><a
href="#ref-REC-xmlschema-0-20041028"
role="doc-biblioref">[12]</a></span> that is used for defining data
models for use with <em>CWMP and USP</em>.</td>
</tr>
<tr class="even">
<td><strong>Downstream Interface</strong></td>
<td>A physical interface object whose Upstream parameter is set to
<em>false</em>, or an interface that is associated with such a physical
interface via the InterfaceStack. For example, a downstream IP Interface
is an IP.Interface object that is associated with an Upstream=false
physical layer interface.</td>
</tr>
<tr class="odd">
<td><strong>Event</strong></td>
<td>An indication that something of interest has happened that requires
the Agent to notify the Controller.</td>
</tr>
<tr class="even">
<td><strong>Fixed Network Residential Gateway</strong></td>
<td>A CPE connecting a home LAN to the WAN, which does not exchange N1
signaling with the 5GC.</td>
</tr>
<tr class="odd">
<td><strong>Interface Object</strong></td>
<td>A type of <em>Object</em> that models a network interface or
protocol layer. Commonly referred to as an interface. They can be
stacked, one on top of the other, using <em>Path References</em> in
order to dynamically define the relationships between interfaces.</td>
</tr>
<tr class="even">
<td><strong>N1</strong></td>
<td>Reference point between the 5G-RG and the AMF and between the AGF
and AMF in case of FN-RG.</td>
</tr>
<tr class="odd">
<td><strong>N2</strong></td>
<td>Reference point between W-5GAN and AMF. On the W-5GAN side, the
termination point is the AGF-CP.</td>
</tr>
<tr class="even">
<td><strong>N3</strong></td>
<td>Reference point between W-5GAN and UPF. On the W-5GAN side, the
termination point is the AGF-UP.</td>
</tr>
<tr class="odd">
<td><strong>Object</strong></td>
<td>An internal node in the name hierarchy, i.e., a node that can have
Object, Parameter, Command and/or Event children. An Object name is a
Path Name.</td>
</tr>
<tr class="even">
<td><strong>Parameter</strong></td>
<td>A name-value pair that represents part of a CPE or USP Agent’s
configuration or status. A Parameter name is a Path Name.</td>
</tr>
<tr class="odd">
<td><strong>Path Name</strong></td>
<td>A name that has a hierarchical structure similar to files in a
directory, with each level separated by a “.” (dot). References an
Object, Parameter, Command or Event.</td>
</tr>
<tr class="even">
<td><strong>Path Reference</strong></td>
<td>Describes how a parameter can reference another parameter or object
via its path name (A.2.3.4/TR-106 <span class="citation"
data-cites="TR-106"><a href="#ref-TR-106"
role="doc-biblioref">[60]</a></span>). Such a reference can be weak or
strong (Section A.2.3.6/TR-106 <span class="citation"
data-cites="TR-106"><a href="#ref-TR-106"
role="doc-biblioref">[60]</a></span>).</td>
</tr>
<tr class="odd">
<td><strong>Upstream Interface</strong></td>
<td>A physical interface object whose Upstream parameter is set to
<em>true</em>, or an interface that is associated with such a physical
interface via the InterfaceStack. For example, an upstream IP Interface
is an IP.Interface object that is associated with an Upstream=true
physical layer interface.</td>
</tr>
<tr class="even">
<td><strong>USP</strong></td>
<td>User Services Platform. Defined in TR-369 <span class="citation"
data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span>, USP is an evolution of CWMP that
allows applications to manipulate Service Elements in a network of
Controllers and Agents.</td>
</tr>
<tr class="odd">
<td><strong>USP Agent</strong></td>
<td>A USP Agent is a USP Endpoint that exposes Service Elements to one
or more USP Controllers.</td>
</tr>
<tr class="even">
<td><strong>USP Controller</strong></td>
<td>A USP Controller is a USP Endpoint that manipulates Service Elements
through one or more USP Agents.</td>
</tr>
<tr class="odd">
<td><strong>USP Endpoint</strong></td>
<td>A USP Endpoint is a termination point for a USP message.</td>
</tr>
<tr class="even">
<td><strong>Wireline 5G Access Network</strong></td>
<td>This is a wireline AN that can connect to a 5G core via the AGF. The
egress interfaces of a W-5GAN form the border between access and core.
The interfaces are N2 for the control plane and N3 for the user
plane.</td>
</tr>
</tbody>
</table>
</div>
<h2 class="auto-hoverlink" data-info="header" id="sec:abbreviations">2.4
Abbreviations</h2>
<p>This Technical Report uses the following abbreviations:</p>
<div class="borderless">
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 76%" />
</colgroup>
<tbody>
<tr class="odd">
<td>3GPP</td>
<td>Third Generation Partnership Project</td>
</tr>
<tr class="even">
<td>5G-RG</td>
<td>5G Residential Gateway</td>
</tr>
<tr class="odd">
<td>5QI</td>
<td>5G QoS Indicator</td>
</tr>
<tr class="even">
<td>5WE</td>
<td>5G Wireline Encapsulation</td>
</tr>
<tr class="odd">
<td>AAA</td>
<td>Authentication, Authorization and Accounting</td>
</tr>
<tr class="even">
<td>AGF</td>
<td>Access Gateway Function</td>
</tr>
<tr class="odd">
<td>ARP</td>
<td>Allocation and Retention Priority</td>
</tr>
<tr class="even">
<td>ATM</td>
<td>Asynchronous Transfer Mode</td>
</tr>
<tr class="odd">
<td>ATSSS</td>
<td>Access Traffic Steering Switching and Splitting</td>
</tr>
<tr class="even">
<td>BNG</td>
<td>Broadband Network Gateway</td>
</tr>
<tr class="odd">
<td>CGN</td>
<td>Carrier Grade NAT</td>
</tr>
<tr class="even">
<td>CUPS</td>
<td>Control User Plane Separation</td>
</tr>
<tr class="odd">
<td>DHCP</td>
<td>Dynamic Host Configuration Protocol</td>
</tr>
<tr class="even">
<td>DHCPv6</td>
<td>Dynamic Host Configuration Protocol for IPv6</td>
</tr>
<tr class="odd">
<td>DNN</td>
<td>Data Network Name</td>
</tr>
<tr class="even">
<td>DSCP</td>
<td>Differentiated Services Code Point</td>
</tr>
<tr class="odd">
<td>DSL</td>
<td>Digital Subscriber Line</td>
</tr>
<tr class="even">
<td>FMIF</td>
<td>Fixed Mobile Interworking Function</td>
</tr>
<tr class="odd">
<td>FN-RG</td>
<td>Fixed Network Residential Gateway</td>
</tr>
<tr class="even">
<td>GBR</td>
<td>Guaranteed Bit Rate</td>
</tr>
<tr class="odd">
<td>IoT</td>
<td>Internet of Things</td>
</tr>
<tr class="even">
<td>IP</td>
<td>Internet Protocol</td>
</tr>
<tr class="odd">
<td>IPsec</td>
<td>Internet Protocol Security</td>
</tr>
<tr class="even">
<td>LCP</td>
<td>Link Control Protocol</td>
</tr>
<tr class="odd">
<td>M2M</td>
<td>Machine to Machine</td>
</tr>
<tr class="even">
<td>NAS</td>
<td>Non Access Stratum</td>
</tr>
<tr class="odd">
<td>NAT</td>
<td>Network Address Translation</td>
</tr>
<tr class="even">
<td>NSCL</td>
<td>Network Service Capability Layer</td>
</tr>
<tr class="odd">
<td>OSI</td>
<td>Open Systems Interconnection</td>
</tr>
<tr class="even">
<td>PCF</td>
<td>Policy Control Function</td>
</tr>
<tr class="odd">
<td>PCO</td>
<td>Protocol Configuration Options</td>
</tr>
<tr class="even">
<td>PCP</td>
<td>Port Control Protocol</td>
</tr>
<tr class="odd">
<td>PDU</td>
<td>Protocol Data Unit</td>
</tr>
<tr class="even">
<td>PPP</td>
<td>Point-to-Point Protocol</td>
</tr>
<tr class="odd">
<td>PPPoE</td>
<td>Point-to-Point Protocol over Ethernet</td>
</tr>
<tr class="even">
<td>PTM</td>
<td>Packet Transfer Mode</td>
</tr>
<tr class="odd">
<td>QFI</td>
<td>QoS Flow Indicator</td>
</tr>
<tr class="even">
<td>QoS</td>
<td>Quality of Service</td>
</tr>
<tr class="odd">
<td>REM</td>
<td>Remote Entity Management</td>
</tr>
<tr class="even">
<td>RG</td>
<td>Residential Gateway</td>
</tr>
<tr class="odd">
<td>RPC</td>
<td>Remote Procedure Call</td>
</tr>
<tr class="even">
<td>RQI</td>
<td>Reflective QoS Indicator</td>
</tr>
<tr class="odd">
<td>SCL</td>
<td>Service Capability Layer</td>
</tr>
<tr class="even">
<td>S-NSSAI</td>
<td>Single Network Slice Selection Assistance Information</td>
</tr>
<tr class="odd">
<td>SSID</td>
<td>Service Set Identifier</td>
</tr>
<tr class="even">
<td>TR</td>
<td>Technical Report</td>
</tr>
<tr class="odd">
<td>UPF</td>
<td>User Plane Function</td>
</tr>
<tr class="even">
<td>URI</td>
<td>Uniform Resource Identifier <span class="citation"
data-cites="RFC3986"><a href="#ref-RFC3986"
role="doc-biblioref">[26]</a></span></td>
</tr>
<tr class="odd">
<td>URL</td>
<td>Uniform Resource Locator <span class="citation"
data-cites="RFC3986"><a href="#ref-RFC3986"
role="doc-biblioref">[26]</a></span></td>
</tr>
<tr class="even">
<td>URSP</td>
<td>User equipment Route Selection Policy</td>
</tr>
<tr class="odd">
<td>USB</td>
<td>Universal Serial Bus</td>
</tr>
<tr class="even">
<td>UUID</td>
<td>Universally Unique IDentifier</td>
</tr>
<tr class="odd">
<td>VLAN</td>
<td>Virtual Local Area Network</td>
</tr>
<tr class="even">
<td>W-5GAN</td>
<td>Wireline 5G Access Network</td>
</tr>
<tr class="odd">
<td>WFA</td>
<td>Wi-Fi Alliance</td>
</tr>
<tr class="even">
<td>WWC</td>
<td>Wireline Wireless Convergence</td>
</tr>
<tr class="odd">
<td>xREM</td>
<td>x (Device or Gateway) Remote Entity Management</td>
</tr>
<tr class="even">
<td>ZDO</td>
<td>ZigBee Device Object</td>
</tr>
</tbody>
</table>
</div>
<h1 class="auto-hoverlink" data-info="header" id="sec:bbftype-impact">3
Technical Report Impact</h1>
<h2 class="auto-hoverlink" data-info="header"
id="sec:energy-efficiency">3.1 Energy Efficiency</h2>
<p>TR-181 Issue 2 Amendment 16 has no impact on Energy Efficiency.</p>
<h2 class="auto-hoverlink" data-info="header" id="sec:ipv6">3.2
IPv6</h2>
<p>TR-181 Issue 2 Amendment 16 defines IPv6 extensions (introduced in
Issue 2 Amendment 2) to the Device:2 data model.</p>
<h2 class="auto-hoverlink" data-info="header" id="sec:security">3.3
Security</h2>
<p>TR-181 Issue 2 Amendment 16 has no impact on Security.</p>
<h2 class="auto-hoverlink" data-info="header" id="sec:privacy">3.4
Privacy</h2>
<p>TR-181 Issue 2 Amendment 16 has no impact on Privacy.</p>
<h1 class="new-page auto-hoverlink" data-info="header"
id="sec:architecture">4 Architecture</h1>
<h2 class="auto-hoverlink" data-info="header"
id="sec:interface-layers">4.1 Interface Layers</h2>
<p>This Technical Report models network interfaces and protocol layers
as independent data objects, generally referred to as interface objects
(or interfaces). Interface objects can be stacked, one on top of the
other, using path references in order to dynamically define the
relationships between interfaces.</p>
<p>The interface object and interface stack are concepts inspired by RFC
2863 <span class="citation" data-cites="RFC2863"><a href="#ref-RFC2863"
role="doc-biblioref">[19]</a></span>.</p>
<p>Within the Device:2 data model, interface objects are arbitrarily
restricted to definitions that operate at or below the IP network layer
(i.e., layers 1 through 3 of the OSI model <span class="citation"
data-cites="X.200"><a href="#ref-X.200"
role="doc-biblioref">[69]</a></span>). However, vendor-specific
interface objects MAY be defined which fall outside this restricted
scope.</p>
<p><a href="#fig:osi-layers-and-interface-objects" class="figure">Figure
10</a> lists the interface objects defined in the Device:2 data model.
The indicated OSI layer is non-normative; it serves as a guide only,
illustrating at what level in the stack an interface object is expected
to appear. However, a CPE need not support or use all interfaces, which
means that the figure does not reflect all possible stacking
combinations and restrictions. For example, one CPE stack might exclude
DSL Bonding, while another CPE stack might include DSL Bonding but
exclude Bridging, while still another might include VLANTermination
under PPP, or VLANTermination under IP with no PPP, or even Ethernet
Link under IP with no VLANTermination and no PPP.</p>
<div class="note">
<p>Throughout this Technical Report, object names are often abbreviated
in order to improve readability. For example,
Device.Ethernet.VLANTermination.{i}. is the full name of a Device:2
object, but might casually be referred to as
Ethernet.VLANTermination.{i} or VLANTermination.{i} or VLANTermination,
just so long as the abbreviation is unambiguous (with respect to
similarly named objects defined elsewhere within the data model).</p>
</div>
<div class="note">
<p>The Bridge.{i}.Port.{i} object models both management (upwards
facing) Bridge Ports and non-management (downwards facing) Bridge Ports,
where each instance is configured as one or the other. Management Bridge
Ports are stacked above non-management Bridge Ports.</p>
</div>
<figure id="fig:osi-layers-and-interface-objects">
<img src="images/osi-layers-and-interface-objects.png"
id="img:osi-layers-and-interface-objects"
alt="OSI Layers and Interface Objects" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:osi-layers-and-interface-objects">
Figure 10:
OSI Layers and Interface Objects
</div></figcaption>
</figure>
<h2 class="auto-hoverlink" data-info="header"
id="sec:interface-objects">4.2 Interface objects</h2>
<p>An interface object is a type of network interface or protocol layer.
Each type of interface is modeled by a Device:2 data model table, with a
row per interface instance (e.g., IP.Interface.{i} for IP
Interfaces).</p>
<p>Each interface object contains a core set of parameters and objects,
which serves as the template for defining interface objects within the
data model. Interface objects can also contain other parameters and
sub-objects specific to the type of interface.</p>
<p>The core set of parameters consists of:</p>
<div class="borderless">
<table>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<tbody>
<tr class="odd">
<td>Enable</td>
<td>The administrative state of the interface (i.e., boolean indicating
enabled or disabled)</td>
</tr>
<tr class="even">
<td>Status</td>
<td>The operational state of the interface (i.e., Up, Down, Unknown,
Dormant, NotPresent, LowerLayerDown, Error)</td>
</tr>
<tr class="odd">
<td>Alias</td>
<td>An alternate name used to identify the interface, which is assigned
an initial value by the CPE but can later be chosen by the
Controller</td>
</tr>
<tr class="even">
<td>Name</td>
<td>The textual name used to identify the interface, which is chosen by
the CPE</td>
</tr>
<tr class="odd">
<td>LastChange</td>
<td>The accumulated time in seconds since the interface entered its
current operational state</td>
</tr>
<tr class="even">
<td>LowerLayers</td>
<td>A list of path references to interface objects that are stacked
immediately below the interface</td>
</tr>
</tbody>
</table>
</div>
<p>Also, a core set of statistics parameters is contained within a Stats
sub-object. The definition of these parameters MAY be customized for
each interface type. The core set of parameters within the Stats
sub-object consists of:</p>
<div class="borderless">
<table>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<tbody>
<tr class="odd">
<td>BytesSent</td>
<td>The total number of bytes transmitted out of the interface,
including framing characters.</td>
</tr>
<tr class="even">
<td>BytesReceived</td>
<td>The total number of bytes received on the interface, including
framing characters.</td>
</tr>
<tr class="odd">
<td>PacketsSent</td>
<td>The total number of packets transmitted out of the interface.</td>
</tr>
<tr class="even">
<td>PacketsReceived</td>
<td>The total number of packets received on the interface.</td>
</tr>
<tr class="odd">
<td>ErrorsSent</td>
<td>The total number of outbound packets that could not be transmitted
because of errors.</td>
</tr>
<tr class="even">
<td>ErrorsReceived</td>
<td>The total number of inbound packets that contained errors preventing
them from being delivered to a higher-layer protocol.</td>
</tr>
<tr class="odd">
<td>UnicastPacketsSent</td>
<td>The total number of packets requested for transmission, which were
not addressed to a multicast or broadcast address at this layer,
including those that were discarded or not sent.</td>
</tr>
<tr class="even">
<td>UnicastPacketsReceived</td>
<td>The total number of received packets, delivered by this layer to a
higher layer, which were not addressed to a multicast or broadcast
address at this layer.</td>
</tr>
<tr class="odd">
<td>DiscardPacketsSent</td>
<td>The total number of outbound packets, which were chosen to be
discarded even though no errors had been detected to prevent their being
transmitted.</td>
</tr>
<tr class="even">
<td>DiscardPacketsReceived</td>
<td>The total number of inbound packets, which were chosen to be
discarded even though no errors had been detected to prevent their being
delivered.</td>
</tr>
<tr class="odd">
<td>MulticastPacketsSent</td>
<td>The total number of packets that higher-layer protocols requested
for transmission and which were addressed to a multicast address at this
layer, including those that were discarded or not sent.</td>
</tr>
<tr class="even">
<td>MulticastPacketsReceived</td>
<td>The total number of received packets, delivered by this layer to a
higher layer, which were addressed to a multicast address at this
layer.</td>
</tr>
<tr class="odd">
<td>BroadcastPacketsSent</td>
<td>The total number of packets that higher-level protocols requested
for transmission and which were addressed to a broadcast address at this
layer, including those that were discarded or not sent.</td>
</tr>
<tr class="even">
<td>BroadcastPacketsReceived</td>
<td>The total number of received packets, delivered by this layer to a
higher layer, which were addressed to a broadcast address at this
layer.</td>
</tr>
<tr class="odd">
<td>UnknownProtoPacketsReceived</td>
<td>The total number of packets received via the interface, which were
discarded because of an unknown or unsupported protocol.</td>
</tr>
</tbody>
</table>
</div>
<div class="note">
<p>The CPE MUST reset an interface’s Stats parameters (unless otherwise
stated in individual object or parameter descriptions) either when the
interface becomes operationally down due to a previous administrative
down (i.e., the interface’s Status parameter transitions to a down state
after the interface is disabled) or when the interface becomes
administratively up (i.e., the interface’s Enable parameter transitions
from false to true). Administrative and operational status are discussed
in <em><a href="#sec:administrative-and-operational-status"
class="heading">Administrative and Operational Status</a></em>.</p>
</div>
<h3 class="auto-hoverlink" data-info="header"
id="sec:lower-layers">4.2.1 Lower Layers</h3>
<p>Each interface object can be stacked on top of zero or more other
interface objects, which MUST be specified using its LowerLayers
parameter. By having each interface object, in turn, reference the
interface objects in its lower layer; a logical hierarchy of all
interface relationships is built up.</p>
<p>The LowerLayers parameter is a comma-separated list of path
references to interface objects. Each item in the list represents an
interface object that is stacked immediately below the referencing
interface. If a referenced interface is deleted, the CPE MUST remove the
corresponding item from this list (i.e., items in the LowerLayers
parameter are strong references).</p>
<p>These relationships between interface objects can either be set by
management action, in order to specify new interface configurations, or
be pre-configured within the CPE.</p>
<p>A CPE MUST reject any attempt to set LowerLayers values that would
result in an invalid or unsupported configuration. The corresponding
fault response from the CPE MUST indicate this, using the appropriate
protocol response.</p>
<p>The lowest layer in a fully configured and operational stack is
generally the physical interface (e.g., DSL Line instance representing a
DSL physical link). Within these physical interface objects the
LowerLayers parameter will be an empty list, unless some lower layer
vendor-specific interface objects are defined and present. Higher layer
interface objects MAY operate without a physical layer being modeled,
however this is a local matter to the CPE.</p>
<p><a href="#fig:interface-lowerlayers" class="figure">Figure 11</a>
illustrates the use of the LowerLayers parameter. A, B, C, and D
represent interface objects. Interface A’s LowerLayers parameter
references interfaces B and C. Interface B’s LowerLayers parameter
references interface D. Interfaces C and D have no interface references
specified in their LowerLayers parameters. In this way, a multi-layered
interface stack is configured. If the Controller were to delete
interface B, then the CPE would update interface A’s LowerLayers
parameter to no longer reference interface B (and interface D would be
stranded, no longer referenced by the now deleted interface B).</p>
<figure id="fig:interface-lowerlayers">
<img src="images/interface-lowerlayers.png"
id="img:interface-lowerlayers" alt="Interface LowerLayers" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:interface-lowerlayers">
Figure 11:
Interface LowerLayers
</div></figcaption>
</figure>
<h3 class="auto-hoverlink" data-info="header"
id="sec:administrative-and-operational-status">4.2.2 Administrative and
Operational Status</h3>
<div class="note">
<p>Many of the requirements outlined in this section were derived from
Section 3.1.13/RFC 2863 <span class="citation" data-cites="RFC2863"><a
href="#ref-RFC2863" role="doc-biblioref">[19]</a></span>.</p>
</div>
<p>An interface object’s Enable and Status parameters specify the
current administrative and operational status of the interface,
respectively. Valid values for the Status parameter are: Up, Down,
Unknown, Dormant, NotPresent, LowerLayerDown, and Error.</p>
<p>The CPE MUST do everything possible in order to follow the
operational state transitions as described below. In some cases, these
requirements are defined as SHOULD; this is not an indication that they
are optional. These transitions, and the relationship between the Enable
parameter and the Status parameter, are required behavior – it is simply
the timing of how long these state transitions take that is
implementation specific.</p>
<p>When the Enable parameter is <em>false</em> the Status parameter
SHOULD normally be <em>Down</em> (or <em>NotPresent</em> or
<em>Error</em> if there is a fault condition on the interface). Note
that when the Enable parameter transitions to <em>false</em>, it is
possible that the Status parameter’s transition to <em>Down</em> might
occur after a small time lag if the CPE needs to first complete certain
operations (e.g., finish transmitting a packet).</p>
<p>When the Enable parameter is changed to <em>true</em>, the Status
SHOULD do one of the following:</p>
<ul>
<li>Change to <em>Up</em> if and only if the interface is able to
transmit and receive network traffic.</li>
<li>Change to <em>Dormant</em> if and only if the interface is operable,
but is waiting for external actions before it can transmit and receive
network traffic.</li>
<li>Change to <em>LowerLayerDown</em> if and only if the interface is
prevented from entering the <em>Up</em> state because one or more of the
interfaces beneath it is down.</li>
<li>Remain in the <em>Error</em> state if there is an error or other
fault condition detected on the interface.</li>
<li>Remain in the <em>NotPresent</em> state if the interface has missing
(typically hardware) components.</li>
<li>Change to <em>Unknown</em> if the state of the interface cannot be
determined for some reason.</li>
</ul>
<p>The <em>Dormant</em> state indicates that the interface is operable,
but it is waiting for external events to occur before it can
transmit/receive traffic. When such events occur, and the interface is
then able to transmit/receive traffic, the Status SHOULD change to the
<em>Up</em> state. Note that both the <em>Up</em> and <em>Dormant</em>
states are considered healthy states.</p>
<p>The <em>Down</em>, <em>NotPresent</em>, <em>LowerLayerDown,</em> and
<em>Error</em> states all indicate that the interface is down. The
<em>NotPresent</em> state indicates that the interface is down
specifically because of a missing (typically hardware) component. The
<em>LowerLayerDown</em> state indicates that the interface is stacked on
top of one or more other interfaces, and that this interface is down
specifically because one or more of these lower-layer interfaces is
down.</p>
<p>The <em>Error</em> state indicates that the interface is down because
an error or other fault condition was detected on the interface.</p>
<h3 class="auto-hoverlink" data-info="header"
id="sec:stacking-and-operational-status">4.2.3 Stacking and Operational
Status</h3>
<div class="note">
<p>The requirements outlined in this section were derived from Section
3.1.14/RFC 2863 <span class="citation" data-cites="RFC2863"><a
href="#ref-RFC2863" role="doc-biblioref">[19]</a></span>.</p>
</div>
<p>When an interface object is stacked on top of lower-layer interfaces
(i.e., is not a bottommost layer in the stack), then:</p>
<ul>
<li>The interface SHOULD be <em>Up</em> if it is able to
transmit/receive traffic due to one or more interfaces lower down in the
stack being <em>Up</em>, irrespective of whether other interfaces below
it are in a non-<em>Up</em> state (i.e., the interface is functioning in
conjunction with at least some of its lower-layered interfaces).</li>
<li>The interface MAY be <em>Up</em> or <em>Dormant</em> if one or more
interfaces lower down in the stack are <em>Dormant</em> and all other
interfaces below it are in a non-<em>Up</em> state.</li>
<li>The interface is expected to be <em>LowerLayerDown</em> while all
interfaces lower down in the stack are either <em>Down</em>,
<em>NotPresent</em>, <em>LowerLayerDown,</em> or <em>Error</em>.</li>
</ul>
<h3 class="auto-hoverlink" data-info="header"
id="sec:vendor-specific-interface-objects">4.2.4 Vendor-specific
Interface Objects</h3>
<p>Vendor-specific interface objects MAY be defined and used. If such
objects are specified by vendors, they MUST be preceded by
*X_&lt;VENDOR&gt;_* and follow the syntax for vendor extensions used for
parameter names (as defined in Section 3.3/TR-106 <span class="citation"
data-cites="TR-106"><a href="#ref-TR-106"
role="doc-biblioref">[60]</a></span>).</p>
<p>If the Controller encounters an unknown vendor-specific interface
object within a CPE’s interface stack, rather than responding with a
fault, the Controller MUST proceed as if this object’s upper-layer
interfaces were directly linked to its lower-layer interfaces. This
applies whether the Controller encounters such an object via the <a
href="#sec:interfacestack-table" class="heading">InterfaceStack
table</a> or via an interface object’s LowerLayers parameter.</p>
<p><a
href="#fig:ignoring-a-vendor-specific-interface-object-in-the-stack"
class="figure">Figure 12</a> illustrates a stacked vendor-specific
interface object being bypassed by the Controller, where there is just
one object below the vendor-specific object.</p>
<figure
id="fig:ignoring-a-vendor-specific-interface-object-in-the-stack">
<img
src="images/ignoring-a-vendor-specific-interface-object-in-the-stack.png"
id="img:ignoring-a-vendor-specific-interface-object-in-the-stack"
alt="Ignoring a Vendor-specific Interface Object in the Stack" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ignoring-a-vendor-specific-interface-object-in-the-stack">
Figure 12:
Ignoring a Vendor-specific Interface Object in the Stack
</div></figcaption>
</figure>
<p><a
href="#fig:ignoring-a-vendor-specific-interface-object-in-the-stack-multiple-sub-objects"
class="figure">Figure 13</a> illustrates a stacked vendor-specific
interface object being bypassed by the Controller, where there are
multiple objects below the vendor-specific object.</p>
<figure
id="fig:ignoring-a-vendor-specific-interface-object-in-the-stack-multiple-sub-objects">
<img
src="images/ignoring-a-vendor-specific-interface-object-in-the-stack-multiple-sub-objects.png"
id="img:ignoring-a-vendor-specific-interface-object-in-the-stack-multiple-sub-objects"
alt="Ignoring a Vendor-specific Interface Object in the Stack (multiple sub-objects)" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ignoring-a-vendor-specific-interface-object-in-the-stack-multiple-sub-objects">
Figure 13:
Ignoring a Vendor-specific Interface Object in the Stack (multiple
sub-objects)
</div></figcaption>
</figure>
<h2 class="auto-hoverlink" data-info="header"
id="sec:interfacestack-table">4.3 InterfaceStack Table</h2>
<p>Although the interface stack can be traversed via <a
href="#sec:lower-layers" class="heading">LowerLayers parameters</a>, an
alternate mechanism is provided to aid in visualizing the overall
stacking relationships and to quickly access objects within the
stack.</p>
<p>The InterfaceStack table is a Device:2 data model object, namely
<em>Device.InterfaceStack.{i}</em>. This is a read-only table whose rows
are auto-generated by the CPE based on the current relationships that
are configured between interface objects (via each interface instance’s
LowerLayers parameter). Each table row represents a “link” between a
higher-layer interface object (referenced by its HigherLayer parameter)
and a lower-layer interface object (referenced by its LowerLayer
parameter). This means that an InterfaceStack table row’s HigherLayer
and LowerLayer parameters will always both be non-null.</p>
<div class="note">
<p>As a consequence, interface instances that have been stranded will
not be represented within the InterfaceStack table. It is also likely
that multiple, disjoint groups of stacked interface objects will coexist
within the table (for example, each IP interface will be the root of a
disjoint group; unused “fragments”, e.g., a secondary DSL channel with a
configured ATM PVC that isn’t attached to anything above, will linger if
they remain interconnected; and finally, partially configured
“fragments” can be present when an interface stack is being set up).</p>
</div>
<div class="note">
<p>An interface instance is considered stranded when it has no lower
layer references to or from other interface instances. Stranded
interface instances will be omitted from the InterfaceStack table until
such time as they are stacked, above or below another interface
instance, via a LowerLayers parameter reference.</p>
</div>
<p>A CPE MUST autonomously add or remove rows in the InterfaceStack
table in response to the following circumstances:</p>
<ul>
<li>An interface’s LowerLayers parameter was updated to remove a
reference to another interface (i.e., a “link” is being removed from the
stack).</li>
<li>An interface’s LowerLayers parameter was updated to add a reference
to another interface (i.e., a “link” is being added to the stack).</li>
<li>An interface was deleted that had referenced, or been referenced by,
one other interface (i.e., a “link” is being removed from the
stack).</li>
<li>An interface was deleted that had referenced, or been referenced by,
multiple interfaces (i.e., multiple “links” are being removed from the
stack).</li>
</ul>
<p>Once the CPE issues the response to the Controller request, all
autonomous InterfaceStack table changes associated with the
corresponding request (as described in the preceding paragraph) MUST be
available for subsequent commands to operate on, regardless of whether
or not these changes have been applied by the CPE.</p>
<p>As an example, <a
href="#tbl:simple-router-example-interfacestack-table"
class="table">Table 1</a> lists an InterfaceStack table configuration
imagined for a fictitious, simple router. Each row in this table
corresponds to a row in the InterfaceStack table. The specified objects
and instance numbers are manufactured for the sake of this example; real
world configurations will likely differ.</p>
<table id="tbl:simple-router-example-interfacestack-table">
<caption><div class="auto-hoverlink"
data-anchor="tbl:simple-router-example-interfacestack-table">
Table 1: Simple Router Example (InterfaceStack table)
</div></caption>
<colgroup>
<col style="width: 18%" />
<col style="width: 39%" />
<col style="width: 41%" />
</colgroup>
<thead>
<tr class="header">
<th>Row/Instance</th>
<th>Higher Layer Interface</th>
<th>Lower Layer Interface</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Device.IP.Interface.1</td>
<td>Device.PPP.Interface.1</td>
</tr>
<tr class="even">
<td>2</td>
<td>Device.PPP.Interface.1</td>
<td>Device.Ethernet.Link.1</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Device.Ethernet.Link.1</td>
<td>Device.ATM.Link.1</td>
</tr>
<tr class="even">
<td>4</td>
<td>Device.ATM.Link.1</td>
<td>Device.DSL.Channel.1</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Device.DSL.Channel.1</td>
<td>Device.DSL.Line.1</td>
</tr>
<tr class="even">
<td>6</td>
<td>Device.IP.Interface.2</td>
<td>Device.Ethernet.Link.2</td>
</tr>
<tr class="odd">
<td>7</td>
<td>Device.Ethernet.Link.2</td>
<td>Device.ATM.Link.2</td>
</tr>
<tr class="even">
<td>8</td>
<td>Device.ATM.Link.2</td>
<td>Device.DSL.Channel.1</td>
</tr>
<tr class="odd">
<td>9</td>
<td>Device.IP.Interface.3</td>
<td>Device.Ethernet.Link.3</td>
</tr>
<tr class="even">
<td>10</td>
<td>Device.Ethernet.Link.3</td>
<td>Device.Bridging.Bridge.1.Port.1</td>
</tr>
<tr class="odd">
<td>11</td>
<td>Device.Bridging.Bridge.1.Port.1</td>
<td>Device.Bridging.Bridge.1.Port.2</td>
</tr>
<tr class="even">
<td>12</td>
<td>Device.Bridging.Bridge.1.Port.2</td>
<td>Device.Ethernet.Interface.1</td>
</tr>
<tr class="odd">
<td>13</td>
<td>Device.Bridging.Bridge.1.Port.1</td>
<td>Device.Bridging.Bridge.1.Port.3</td>
</tr>
<tr class="even">
<td>14</td>
<td>Device.Bridging.Bridge.1.Port.3</td>
<td>Device.Ethernet.Interface.2</td>
</tr>
<tr class="odd">
<td>15</td>
<td>Device.Bridging.Bridge.1.Port.1</td>
<td>Device.Bridging.Bridge.1.Port.4</td>
</tr>
<tr class="even">
<td>16</td>
<td>Device.Bridging.Bridge.1.Port.4</td>
<td>Device.WiFi.SSID.1</td>
</tr>
<tr class="odd">
<td>17</td>
<td>Device.WiFi.SSID.1</td>
<td>Device.WiFi.Radio.1</td>
</tr>
</tbody>
</table>
<p>By looking at the rows from the example InterfaceStack table as a
whole, we can visualize the overall stack configuration. <a
href="#fig:simple-router-example-interfaces-visualized"
class="figure">Figure 14</a> shows how this information can be pictured.
Interface instances are represented by colored boxes, while
InterfaceStack instances are represented by numbered circles.</p>
<figure id="fig:simple-router-example-interfaces-visualized">
<img src="images/simple-router-example-interfaces-visualized.png"
id="img:simple-router-example-interfaces-visualized"
alt="Simple Router Example (Interfaces Visualized)" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:simple-router-example-interfaces-visualized">
Figure 14:
Simple Router Example (Interfaces Visualized)
</div></figcaption>
</figure>
<div class="note">
<p>“Device.” should be considered prepended to each parameter name in <a
href="#fig:simple-router-example-interfaces-visualized"
class="figure">Figure 14</a>. It is left off to make the figure more
legible.</p>
</div>
<p>Finally, <a href="#tbl:simple-router-example-interface-lowerlayers"
class="table">Table 2</a> completes the example by listing each
interface instance and its corresponding LowerLayers parameter
value.</p>
<table id="tbl:simple-router-example-interface-lowerlayers">
<caption><div class="auto-hoverlink"
data-anchor="tbl:simple-router-example-interface-lowerlayers">
Table 2: Simple Router Example (Interface LowerLayers)
</div></caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 67%" />
</colgroup>
<thead>
<tr class="header">
<th>Interface</th>
<th>LowerLayers value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Device.IP.Interface.1</td>
<td>Device.PPP.Interface.1</td>
</tr>
<tr class="even">
<td>Device.IP.Interface.2</td>
<td>Device.Ethernet.Link.2</td>
</tr>
<tr class="odd">
<td>Device.IP.Interface.3</td>
<td>Device.Ethernet.Link.3</td>
</tr>
<tr class="even">
<td>Device.PPP.Interface.1</td>
<td>Device.Ethernet.Link.1</td>
</tr>
<tr class="odd">
<td>Device.Ethernet.Link.1</td>
<td>Device.ATM.Link.1</td>
</tr>
<tr class="even">
<td>Device.Ethernet.Link.2</td>
<td>Device.ATM.Link.2</td>
</tr>
<tr class="odd">
<td>Device.Ethernet.Link.3</td>
<td>Device.Bridging.Bridge.1.Port.1</td>
</tr>
<tr class="even">
<td>Device.Bridging.Bridge.1.Port.1</td>
<td>Device.Bridging.Bridge.1.Port.2, Device.Bridging.Bridge.1.Port.3,
Device.Bridging.Bridge.1.Port.4</td>
</tr>
<tr class="odd">
<td>Device.Bridging.Bridge.1.Port.2</td>
<td>Device.Ethernet.Interface.1</td>
</tr>
<tr class="even">
<td>Device.Bridging.Bridge.1.Port.3</td>
<td>Device.Ethernet.Interface.2</td>
</tr>
<tr class="odd">
<td>Device.Bridging.Bridge.1.Port.4</td>
<td>Device.WiFi.SSID.1</td>
</tr>
<tr class="even">
<td>Device.ATM.Link.1</td>
<td>Device.DSL.Channel.1</td>
</tr>
<tr class="odd">
<td>Device.ATM.Link.2</td>
<td>Device.DSL.Channel.1</td>
</tr>
<tr class="even">
<td>Device.DSL.Channel.1</td>
<td>Device.DSL.Line.1</td>
</tr>
<tr class="odd">
<td>Device.DSL.Line.1</td>
<td></td>
</tr>
<tr class="even">
<td>Device.Ethernet.Interface.1</td>
<td></td>
</tr>
<tr class="odd">
<td>Device.Ethernet.Interface.2</td>
<td></td>
</tr>
<tr class="even">
<td>Device.WiFi.SSID.1</td>
<td>Device.WiFi.Radio.1</td>
</tr>
<tr class="odd">
<td>Device.WiFi.Radio.1</td>
<td></td>
</tr>
</tbody>
</table>
<h1 class="new-page auto-hoverlink" data-info="header"
id="sec:parameter-definitions">5 Parameter Definitions</h1>
<p>The normative definition of the Device:2 data model is provided in
XML DM Instance documents, as defined by TR-106 <span class="citation"
data-cites="TR-106"><a href="#ref-TR-106"
role="doc-biblioref">[60]</a></span> Annex A.</p>
<p>For a given revision of the data model, the corresponding TR-181
Issue 2 XML document defines the Device:2 model itself and imports
additional components from the other XML documents listed.</p>
<p>Each TR-181 Issue 2 HTML document is a report generated from the XML
files, and lists a consolidated view of the Device:2 data model in
human-readable form.</p>
<p>For use with CWMP the corresponding Device:2 data model is published
at <a
href="https://cwmp-data-models.broadband-forum.org/">https://cwmp-data-models.broadband-forum.org</a>,
and for use with USP the data model is published at <a
href="https://usp-data-models.broadband-forum.org/">https://usp-data-models.broadband-forum.org</a>.</p>
<h1 class="annex annex1 auto-hoverlink" data-info="header"
id="sec:bridging-and-queuing">Annex A: Bridging and Queuing</h1>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:queuing-and-bridging-model">A.1 Queuing and Bridging Model</h2>
<p><a href="#fig:queuing-model-of-a-device" class="figure">Figure 15</a>
shows the queuing and bridging model for a device. This model relates to
the QoS object as well as the Bridging and Routing objects. The elements
of this model are described in the following sections.</p>
<div class="note">
<p>The queuing model described in this Annex is meant strictly as a
model to clarify the intended behavior of the related data objects.
There is no implication intended that an implementation has to be
structured to conform to this model.</p>
</div>
<figure id="fig:queuing-model-of-a-device">
<img src="images/queuing-model-of-a-device.png"
id="img:queuing-model-of-a-device" alt="Queuing Model of a Device" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:queuing-model-of-a-device">
Figure 15:
Queuing Model of a Device
</div></figcaption>
</figure>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:packet-classification">A.1.1 Packet Classification</h3>
<p>The Classification table within the QoS object specifies the
assignment of each packet arriving at an ingress interface to a specific
internal class. This classification can be based on a number of matching
criteria, such as destination and source IP address, destination and
source port, and protocol.</p>
<p>Each entry in the Classification table includes a series of
parameters, each indicated to be a Classification Criterion. Each
classification criterion can be set to a specified value, or can be set
to a value that indicates that criterion is not to be used. A packet is
defined to match the classification criteria for that table entry only
if the packet matches all of the specified criteria. That is, a logical
AND operation is applied across all classification criteria within a
given Classification table entry.</p>
<div class="note">
<p>To apply a logical OR to sets of classification criteria, multiple
entries in the Classification table can be created that specify the same
resulting queuing behavior.</p>
</div>
<p>For each classification criterion, the Classification table also
includes a corresponding “exclude” flag. This flag can be used to invert
the sense of the associated classification criterion. That is, if this
flag is <em>false</em> for a given criterion, the classifier is to
include only packets that meet the specified criterion (as well as all
others). If this flag is <em>true</em> for a given criterion, the
classifier is to include all packets except those that meet the
associated criterion (in addition to meeting all other criteria).</p>
<p>For a given entry in the Classification table, the classification is
to apply only to the interface specified by the Interface parameter.
This parameter can specify a particular ingress interface or all
sources. Depending on the particular interface, not all classification
criteria will be applicable. For example, Ethernet layer classification
criteria would not apply to packets arriving on a non-bridged ATM
VC.</p>
<p>Packet classification is modeled to include all ingress packets
regardless of whether they ultimately will be bridged or routed through
the device.</p>
<h4 class="annex4 auto-hoverlink" data-info="header"
id="sec:classification-order">A.1.1.1 Classification Order</h4>
<p>The class assigned to a given packet corresponds to the first entry
in the Classification table (given the specified order of the entries in
the table) whose matching criteria match the packet. If there is no
entry that matches the packet, the packet is assigned to a default
class.</p>
<p>Classification rules are sensitive to the order in which they are
applied because certain traffic might meet the criteria of more than one
Classification table entry. The Order parameter is responsible for
identifying the order in which the Classification entries are to be
applied.</p>
<p>The following rules apply to the use and setting of the Order
parameter:</p>
<ul>
<li><p>Order goes in order from 1 to n, where n is equal to the number
of entries in the Classification table. 1 is the highest precedence, and
n the lowest. For example, if entries with Order of 4 and 7 both have
rules that match some particular traffic, the traffic will be classified
according to the entry with the 4.</p></li>
<li><p>The CPE is responsible for ensuring that all Order values are
unique and sequential.</p>
<ul>
<li><p>If an entry is added (number of entries becomes n+1), and the
value specified for Order is greater than n+1, then the CPE will set
Order to n+1.</p></li>
<li><p>If an entry is added (number of entries becomes n+1), and the
value specified for Order is less than n+1, then the CPE will create the
entry with that specified value, and increment the Order value of all
existing entries with Order equal to or greater than the specified
value.</p></li>
<li><p>If an entry is deleted, the CPE will decrement the Order value of
all remaining entries with Order greater than the value of the deleted
entry.</p></li>
<li><p>If the Order value of an entry is changed, then the value will
also be changed for other entries greater than or equal to the lower of
the old and new values, and less than the larger of the old and new
values. If the new value is less than the old, then these other entries
will all have Order incremented. If the new value is greater than the
old, then the other entries will have Order decremented and the changed
entry will be given a value of &lt;new value&gt;-1. For example, an
entry is changed from 8 to 5. The existing 5 goes to 6, 6 to 7, and 7 to
8. If the entry goes from 5 to 8, then 6 goes to 5, 7 to 6, and the
changed entry is 7. This is consistent with the behavior that would
occur if the change were considered to be an Add of a new entry with the
new value, followed by a Delete of the entry with the old
value.</p></li>
</ul></li>
</ul>
<h4 class="annex4 auto-hoverlink" data-info="header"
id="sec:dynamic-application-specific-classification">A.1.1.2 Dynamic
Application Specific Classification</h4>
<p>In some situations, traffic to be classified cannot be identified by
a static set of classification criteria. Instead, identification of
traffic flows might require explicit application awareness. The model
accommodates such situations via the App and Flow tables in the QoS
object.</p>
<p>Each entry in the App table is associated with an
application-specific protocol handler, identified by the
ProtocolIdentifier, which contains a URN. For a particular CPE, the
AvailableAppList parameter indicates which protocol handlers that CPE is
capable of supporting, if any. A list of standard protocol handlers and
their associated URNs is specified in <em><a
href="#sec:urn-definitions-for-app-and-flow-tables" class="heading">URN
Definitions for App and Flow Tables</a></em>, though a CPE can also
support vendor-specific protocol handlers as well. Multiple App table
entries can refer to the same ProtocolIdentifier.</p>
<p>The role of the protocol handler is to identify and classify flows
based on application awareness. For example, a SIP protocol handler
might identify a call-control flow, an audio flow, and a video flow. The
App and Flow tables are used to specify the classification outcome
associated with each such flow.</p>
<p>For each App table entry there can be one or more associated Flow
table entries. Each flow table entry identifies a type of flow
associated with the protocol handler. The Type parameter is used to
identify the specific type of flow associated with each entry. For
example, a Flow table entry for a SIP protocol handler might refer only
to the audio flows associated with that protocol handler. A list of
standard flow type values is given in <em><a
href="#sec:urn-definitions-for-app-and-flow-tables" class="heading">URN
Definitions for App and Flow Tables</a></em>, though a CPE can also
support vendor-specific flow types.</p>
<p>A protocol handler can be defined as being fed from the output of a
Classification table entry. That is, a Classification entry can be used
to single out control traffic to be passed to the protocol handler,
which then subsequently identifies associated flows. Doing so allows
more than one instance of a protocol handler associated with distinct
traffic. For example, one could define two App table entries associated
with SIP protocol handlers. If the classifier distinguished control
traffic to feed into each handler based on the destination IP address of
the SIP server, this could be used to separately classify traffic for
different SIP service providers. In this case, each instance of the
protocol handler would identify only those flows associated with a given
service. Note that the Classification table entry that feeds each
protocol handler wouldn’t encompass all of the flows; only the traffic
needed by the protocol handler to determine the flows—typically only the
control traffic.</p>
<h4 class="annex4 auto-hoverlink" data-info="header"
id="sec:classification-outcome">A.1.1.3 Classification Outcome</h4>
<p>Each Classification entry specifies a tuple composed of either:</p>
<ul>
<li>A TrafficClass and (optionally) a Policer, or</li>
<li>An App table entry</li>
</ul>
<p>Each entry also specifies:</p>
<ul>
<li>Outgoing DiffServ and Ethernet priority marking behavior</li>
<li>A ForwardingPolicy tag that can be referenced in the Routing table
to affect packet routing (note that the ForwardingPolicy tag affects
only routed traffic)</li>
</ul>
<p>Note that the information associated with the classification outcome
is modeled as being carried along with each packet as it flows through
the system.</p>
<p>If a packet does not match any Classification table entry, the
DefaultTrafficClass, DefaultPolicer, default markings, and default
ForwardingPolicy are used.</p>
<p>If a TrafficClass/Policer tuple is specified, classification is
complete. If, however, an App is specified, the packet is passed to the
protocol handler specified by the ProtocolIdentifier in the specified
App table entry for additional classification (see <em><a
href="#sec:dynamic-application-specific-classification"
class="heading">Dynamic Application Specific Classification</a></em>).
If any of the identified flows match the Type specified in any Flow
table entry corresponding to the given App table entry (this
correspondence is indicated by the App identifier), the specified tuple
and markings for that Flow table entry is used for packets in that flow.
Other flows associated with the application, but not explicitly
identified, use the default tuple and markings specified for that App
table entry.</p>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:policing">A.1.2 Policing</h3>
<p>The Policer table defines the policing parameters for ingress packets
identified by either a Classification table entry (or the default
classification) or a dynamic flow identified by a protocol handler
identified in the App table.</p>
<p>Each Policer table entry specifies the packet handling
characteristics, including the rate requirements and behavior when these
requirements are exceeded.</p>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:queuing-and-scheduling">A.1.3 Queuing and Scheduling</h3>
<p>The Queue table specifies the number and types of queues, queue
parameters, shaping behavior, and scheduling algorithm to use. Each
Queue table entry specifies the TrafficClasses with which it is
associated, and a set of egress interfaces for which a queue with the
corresponding characteristics needs to exist.</p>
<div class="note">
<p>If the CPE can determine that among the interfaces specified for a
queue to exist, packets classified into that queue cannot egress to a
subset of those interfaces (from knowledge of the current routing and
bridging configuration), the CPE can choose not to instantiate the queue
on those interfaces.</p>
</div>
<div class="note">
<p>Packets classified into a queue that exit through an interface for
which the queue is not specified to exist, will instead use the default
queuing behavior. The default queue itself will exist on all egress
interfaces.</p>
</div>
<p>The model defined here is not intended to restrict where the queuing
is implemented in an actual implementation. In particular, it is up to
the particular implementation to determine at what protocol layer it is
most appropriate to implement the queuing behavior (IP layer, Ethernet
MAC layer, ATM layer, etc.). In some cases, however, the QoS
configuration would restrict the choice of layer where queuing can be
implemented. For example, if a queue is specified to carry traffic that
is bridged, then it could not be implemented as an IP-layer queue.</p>
<div class="note">
<p>Care needs to be taken to avoid having multiple priority queues
multiplexed onto a single connection that is rate shaped. In such cases,
the possibility exists that high priority traffic can be held back due
to rate limits of the overall connection exceeded by lower priority
traffic. Where possible, each priority queue will be shaped
independently using the shaping parameters in the Queue and Shaping
table.</p>
</div>
<p>The scheduling parameters defined in the Queue table apply to the
first level of what might be a more general scheduling hierarchy. This
specification does not specify the rules that an implementation needs to
apply to determine the most appropriate scheduling hierarchy given the
scheduling parameters defined in the Queue table.</p>
<p>As an example, take a situation where the output of four distinct
queues is to be multiplexed into a single connection, and two entries
share one set of scheduling parameters while the other two entries share
a different set of scheduling parameters. In this case, it might be
appropriate to implement this as a scheduling hierarchy with the first
two queues multiplexed with a scheduler defined by the first pair, and
the second two queues being multiplexed with a scheduler defined by the
second pair. The lower layers of this scheduling hierarchy cannot be
directly determined from the content of the Queue table.</p>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:bridging">A.1.4 Bridging</h3>
<div class="note">
<p>From the point of view of a bridge, packets arriving into the bridge
from the local router (either upstream or downstream) are treated as
ingress packets, even though the same packets, which just left the
router, are treated as egress from the point of view of the router. For
example, a Filter table entry might admit packets on ingress to the
bridge from a particular IP interface, which means that it admits
packets on their way out of the router over this layer 3 connection.</p>
</div>
<p>For each interface, the output of the classifier is modeled to feed a
set of 802.1D <span class="citation" data-cites="802.1D-2004"><a
href="#ref-802.1D-2004" role="doc-biblioref">[10]</a></span> or 802.1Q
<span class="citation" data-cites="802.1Q-2011"><a
href="#ref-802.1Q-2011" role="doc-biblioref">[11]</a></span> layer 2
bridges as specified by the Bridging object. Each bridge specifies layer
2 connectivity between one or more layer 2 downstream and/or upstream
interfaces, and optionally one or more layer 3 connections to the local
router.</p>
<p>Each bridge corresponds to a single entry in the Bridge table of the
Bridging object. The Bridge table contains the following sub-tables:</p>
<ul>
<li><p>Port table: models the Bridge ports, which are either management
ports (modeling layer 3 connections to the local router) or
non-management ports (modeling connections to layer 2 interfaces).
Bridge ports are <a href="#sec:interface-objects"
class="heading">stackable interface objects</a>.</p></li>
<li><p>VLAN table: models the Bridge VLANs (relevant only to 802.1Q
bridges).</p></li>
<li><p>VLANPort table: for each VLAN, defines the ports that comprise
its member set (relevant only to 802.1Q bridges).</p></li>
</ul>
<h4 class="annex4 auto-hoverlink" data-info="header"
id="sec:filtering">A.1.4.1 Filtering</h4>
<p>Traffic from a given interface (or set of interfaces) can be
selectively admitted to a given Bridge, rather than bridging all traffic
from that interface. Each entry in the Filter table includes a series of
classification criteria. Each classification criterion can be set to a
specified value, or can be set to a value that indicates that criterion
is not to be used. A packet is admitted to the Bridge only if the packet
matches all of the specified criteria. That is, a logical AND operation
is applied across all classification criteria within a given Filter
table entry.</p>
<div class="note">
<p>To apply a logical OR to sets of classification criteria, multiple
entries in the Filter table can be created that refer to the same
interfaces and the same Bridge table entry.</p>
</div>
<div class="note">
<p>A consequence of the above rule is that, if a packet does not match
the criteria of any of the enabled Filter table entries, then it will
not be admitted to any bridges, i.e., it will be dropped. As a specific
example of this, if none of the enabled Filter table entries reference a
given interface, then all packets arriving on that interface will be
dropped.</p>
</div>
<p>For each classification criterion, the Filter table also includes a
corresponding “exclude” flag. This flag can be used to invert the sense
of the associated classification criterion. That is, if this flag is
false for a given criterion, the Bridge will admit only packets that
meet the specified criterion (as well as all other criteria). If this
flag is true for a given criterion, the Bridge will admit all packets
except those that meet the associated criterion (in addition to meeting
all other criteria).</p>
<p>Note that because the classification criteria are based on layer 2
packet information, if the selected port for a given Filter table entry
is a layer 3 connection from the local router, the layer 2
classification criteria do not apply.</p>
<h4 class="annex4 auto-hoverlink" data-info="header"
id="sec:filter-order">A.1.4.2 Filter Order</h4>
<p>Any packet that matches the filter criteria of one or more filters is
admitted to the Bridge associated with the first entry in the Filter
table (relative to the specified Order).</p>
<p>The following rules apply to the use and setting of the Order
parameter:</p>
<ul>
<li><p>The Order goes in order from 1 to n, where n is equal to the
number of filters. 1 is the highest precedence, and n the
lowest.</p></li>
<li><p>The CPE is responsible for ensuring that all Order values among
filters are unique and sequential.</p></li>
<li><p>If a filter is added (number of filters becomes n+1), and the
value specified for Order is greater than n+1, then the CPE will set
Order to n+1.</p></li>
<li><p>If a filter is added (number of entries becomes n+1, and the
value specified for Order is less than n+1, then the CPE will create the
entry with that specified value, and increment the Order value of all
existing filters with Order equal to or greater than the specified
value.</p></li>
<li><p>If a filter is deleted, the CPE will decrement the Order value of
all remaining filters with Order greater than the value of the deleted
entry.</p></li>
<li><p>If the Order value of a filter is changed, then the value will
also be changed for other filters greater than or equal to the lower of
the old and new values, and less than the larger of the old and new
values. If the new value is less than the old, then these other entries
will all have Order incremented. If the new value is greater than the
old, then the other entries will have Order decremented and the changed
entry will be given a value of &lt;new value&gt;-1. For example, an
entry is changed from 8 to 5. The existing 5 goes to 6, 6 to 7, and 7 to
8. If the entry goes from 5 to 8, then 6 goes to 5, 7 to 6, and the
changed entry is 7. This is consistent with the behavior that would
occur if the change were considered to be an Add of a new filter with
the new value, followed by a Delete of the filter with the old
value.</p></li>
</ul>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:default-layer-23-qos-mapping">A.2 Default Layer 2/3 QoS
Mapping</h2>
<p><a href="#tbl:default-layer-23-qos-mapping" class="table">Table 3</a>
presents a “default” mapping between layer 2 and layer 3 QoS. In
practice, it is a guideline for automatic marking of DSCP (layer 3)
based upon Ethernet Priority (layer 2) and the other way around. Please
refer to the QoS Classification table’s DSCPMark and
EthernetPriorityMark parameters (and related parameters) for
configuration of a default automatic DSCP / Ethernet Priority
mapping.</p>
<p>Automatic marking of DSCP or Ethernet Priority is likely only in the
following cases:</p>
<ul>
<li>WAN → LAN: to map DSCP (layer 3) to Ethernet Priority (layer 2)</li>
<li>LAN → WAN: to map Ethernet Priority (layer 2) to DSCP (layer 3)</li>
</ul>
<p>Automatic marking in the LAN → LAN case is unlikely, since LAN QoS is
likely to be supported only at layer 2, and LAN DSCP values, if used,
will probably be a direct representation of Ethernet Priority, e.g.,
Ethernet Priority shifted left by three bits.</p>
<p>In the table, grayed and bolded items are added to allow two-way
mapping between layer 2 and layer 3 QoS (where the mapping is ambiguous,
the grayed values SHOULD be ignored and the bolded values SHOULD be
used). If, when mapping from layer 3 to layer 2 QoS, the DSCP value is
not present in the table, the mapping SHOULD be based only on the first
three bits of the DSCP value, i.e., on DSCP &amp; 111000.</p>
<table id="tbl:default-layer-23-qos-mapping">
<caption><div class="auto-hoverlink"
data-anchor="tbl:default-layer-23-qos-mapping">
Table 3: Default Layer 2/3 QoS Mapping
</div></caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 24%" />
<col style="width: 24%" />
<col style="width: 24%" />
</colgroup>
<thead>
<tr class="header">
<th>Layer 2 Ethernet Priority</th>
<th>Layer 2 Designation</th>
<th>Layer 3 DSCP</th>
<th>Layer 3 Per Hop Behavior</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>001 (1)</td>
<td>BK</td>
<td><span class="gray">000000 (0x00)</span></td>
<td><span class="gray">Default</span></td>
</tr>
<tr class="even">
<td>010 (2)</td>
<td>spare</td>
<td><span class="gray">000000 (0x00)</span></td>
<td></td>
</tr>
<tr class="odd">
<td>000 (0)</td>
<td>BE</td>
<td>000000 (0x00)<br />
<strong>000000 (0x00)</strong></td>
<td>Default<br />
CS0</td>
</tr>
<tr class="even">
<td>011 (3)</td>
<td>EE</td>
<td>001110 (0x0e)<br />
001100 (0x0c)<br />
001010 (0x0a)<br />
<strong>001000 (0x08)</strong></td>
<td>AF13<br />
AF12<br />
AF11<br />
CS1</td>
</tr>
<tr class="odd">
<td>100 (4)</td>
<td>CL</td>
<td>010110 (0x16)<br />
010100 (0x14)<br />
010010 (0x12)<br />
<strong>010000 (0x10)</strong></td>
<td>AF23<br />
AF22<br />
AF21<br />
CS2</td>
</tr>
<tr class="even">
<td>101 (5)</td>
<td>VI</td>
<td>011110 (0x1e)<br />
011100 (0x1c)<br />
011010 (0x1a)<br />
<strong>011000 (0x18)</strong></td>
<td>AF33<br />
AF32<br />
AF31<br />
CS3</td>
</tr>
<tr class="odd">
<td><span class="gray">110 (6)</span></td>
<td><span class="gray">VO</span></td>
<td>100110 (0x26)<br />
100100 (0x24)<br />
100010 (0x22)<br />
<strong>100000 (0x20)</strong></td>
<td>AF43<br />
AF42<br />
AF41<br />
CS4</td>
</tr>
<tr class="even">
<td>110 (6)</td>
<td>VO</td>
<td>101110 (0x2e)<br />
<strong>101000 (0x28)</strong></td>
<td>EF<br />
CS5</td>
</tr>
<tr class="odd">
<td>111 (7)</td>
<td>NC</td>
<td>110000 (0x30)<br />
<strong>111000 (0x38)</strong></td>
<td>CS6<br />
CS7</td>
</tr>
</tbody>
</table>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:urn-definitions-for-app-and-flow-tables">A.3 URN Definitions for
App and Flow Tables</h2>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:app-protocolidentifier">A.3.1 App ProtocolIdentifier</h3>
<p><a href="#tbl:protocolidentifer-urns" class="table">Table 4</a> lists
the URNs defined for the QoS App table’s ProtocolIdentifier parameter.
Additional standard or vendor-specific URNs can be defined following the
standard syntax for forming URNs.</p>
<table id="tbl:protocolidentifer-urns">
<caption><div class="auto-hoverlink"
data-anchor="tbl:protocolidentifer-urns">
Table 4: ProtocolIdentifer URNs
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 73%" />
</colgroup>
<thead>
<tr class="header">
<th>URN</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>urn:dslforum-org:sip</td>
<td>Session Initiation Protocol (SIP) as defined by RFC 3261 <span
class="citation" data-cites="RFC3261"><a href="#ref-RFC3261"
role="doc-biblioref">[22]</a></span></td>
</tr>
<tr class="even">
<td>urn:dslforum-org:h.323</td>
<td>ITU-T Recommendation H.323</td>
</tr>
<tr class="odd">
<td>urn:dslforum-org:h.248</td>
<td>ITU-T Recommendation H.248 (MEGACO)</td>
</tr>
<tr class="even">
<td>urn:dslforum-org:mgcp</td>
<td>Media Gateway Control Protocol (MGCP) as defined by RFC 3435 <span
class="citation" data-cites="RFC3435"><a href="#ref-RFC3435"
role="doc-biblioref">[24]</a></span></td>
</tr>
<tr class="odd">
<td>urn:dslforum-org:pppoe</td>
<td>Bridged sessions of PPPoE</td>
</tr>
</tbody>
</table>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:flow-type">A.3.2 Flow Type</h3>
<p>A syntax for forming URNs for the QoS Flow table’s Type parameter is
defined for the Session Description Protocol (SDP) as defined by RFC
4566 <span class="citation" data-cites="RFC4566"><a href="#ref-RFC4566"
role="doc-biblioref">[35]</a></span>. Additional standard or
vendor-specific URNs can be defined following the standard syntax for
forming URNs.</p>
<p>A URN to specify an SDP flow is formed as follows:</p>
<ul>
<li>urn:dslforum-org:sdp-[MediaType]-[Transport]</li>
</ul>
<p>[MediaType] corresponds to the “media” sub-field of the “m” field of
an SDP session description.<br />
[Transport] corresponds to the “transport” sub-field of the “m” field of
an SDP session description.</p>
<p>Non-alphanumeric characters in either field are removed (e.g.,
“rtp/avp” becomes “rtpavp”).</p>
<p>For example, the following would be valid URNs referring to SDP
flows:</p>
<ul>
<li>urn:dslforum-org:sdp-audio-rtpavp</li>
<li>urn:dslforum-org:sdp-video-rtpavp</li>
<li>urn:dslforum-org:sdp-data-udp</li>
</ul>
<p>For flow type URNs following this convention, there is no defined use
for TypeParameters, which SHOULD be left empty.</p>
<p>For the ProtocolIdentifier urn:dslforum-org:pppoe, a single flow type
is defined referring to the entire PPPoE session. The URL for this flow
type is:</p>
<ul>
<li>urn:dslforum-org:pppoe</li>
</ul>
<h3 class="annex3 auto-hoverlink" data-info="header"
id="sec:flow-typeparameters">A.3.3 Flow TypeParameters</h3>
<p>For the flow type urn:dslforum-org:pppoe, <a
href="#tbl:flow-typeparameters-values-for-flow-type-urndslforum-orgpppoe"
class="table">Table 5</a> specifies the defined TypeParameter
values.</p>
<table
id="tbl:flow-typeparameters-values-for-flow-type-urndslforum-orgpppoe">
<caption><div class="auto-hoverlink"
data-anchor="tbl:flow-typeparameters-values-for-flow-type-urndslforum-orgpppoe">
Table 5: Flow TypeParameters values for flow type urn:dslforum-org:pppoe
</div></caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Description of Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ServiceName</td>
<td>The PPPoE service name.<br />
If specified, only bridged PPPoE sessions designated for the named
service would be considered part of this flow.<br />
If this parameter is not specified, or is empty, bridged PPPoE
associated with any service considered part of this flow.</td>
</tr>
<tr class="even">
<td>ACName</td>
<td>The PPPoE access concentrator name.<br />
If specified, only bridged PPPoE sessions designated for the named
access concentrator would be considered part of this flow.<br />
If this parameter is not specified, or is empty, bridged PPPoE
associated with any access concentrator considered part of this
flow.</td>
</tr>
<tr class="odd">
<td>PPPDomain</td>
<td>The domain part of the PPP username.<br />
If specified, only bridged PPPoE sessions in which the domain portion of
the PPP username matches this value are considered part of this
flow.<br />
If this parameter is not specified, or is empty, all bridged PPPoE
sessions are considered part of this flow.</td>
</tr>
</tbody>
</table>
<h1 class="annex annex1 auto-hoverlink" data-info="header"
id="sec:tunneling">Annex B: Tunneling</h1>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:overview">B.1 Overview</h2>
<p>Consider a device that provides a layer 3 tunnel endpoint. Some
packets will need to be en-tunneled and then will leave the device in
the tunnel. Other packets will arrive at the device in the tunnel and
will need to be de-tunneled. This is illustrated in <a
href="#fig:tunneling-overview" class="figure">Figure 16</a>, in which
green indicates application traffic, yellow indicates an IP interface,
and pink indicates a tunnel (carrying green application traffic).</p>
<figure id="fig:tunneling-overview">
<img src="images/tunneling-overview.png" id="img:tunneling-overview"
alt="Tunneling Overview" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:tunneling-overview">
Figure 16:
Tunneling Overview
</div></figcaption>
</figure>
<p>The Figure highlights three decisions:</p>
<ol>
<li>Whether to en-tunnel an upstream packet.</li>
<li>Whether to de-tunnel a downstream packet.</li>
<li>To which egress interface to send an outgoing packet.</li>
</ol>
<p>This egress interface decision is just a normal forwarding decision.
By separately modeling the <em>Tunnel interface</em> and the
<em>Tunnel</em>, the Device:2 data model is able to present the
en-tunnel decision as also being a forwarding decision. The de-tunnel
decision is not really a decision at all, because it happens
automatically as a result of normal packet processing.</p>
<p>This modeling approach imposes no restrictions on the device
implementation; it is just how the en-tunnel and de-tunnel decisions are
modeled.</p>
<ul>
<li><p>Each <em>Tunnel</em> instance models a tunnel and has one or more
<em>Tunnel interface</em> children, each of which models a flow /
session within that tunnel. These <em>Tunnel interface</em> children are
stackable interface objects.</p></li>
<li><p>Upstream traffic that is to be en-tunneled is routed to a
<em>Tunnel interface</em> instance, is passed to the parent
<em>Tunnel</em> instance, is encapsulated, and then arrives on the
<em>Tunnel</em> instance.</p></li>
<li><p>Downstream traffic that is to be de-tunneled is passed to a
<em>Tunnel</em> instance, is de-encapsulated, and then arrives on the
appropriate child <em>Tunnel interface</em> instance.</p></li>
<li><p>Traffic arriving on a <em>Tunnel</em> or on a <em>Tunnel</em>
<em>interface</em> is classified, marked, policed, bridged, routed and
queued in the same way as traffic arriving on any other
interface.</p></li>
</ul>
<div class="note">
<p>A Tunnel is not a stackable interface object, because it breaks the
layering order and can be regarded as separating two different protocol
stacks, one of which acts as a carrier for the other. This is clearly
illustrated in <a href="#fig:general-layer-3-tunneling-interface-stack"
class="figure">Figure 20</a> and the other interface stack Figures.</p>
</div>
<div class="note">
<p>Even though a Tunnel is not an interface, it can be referenced by QoS
classification rules. Traffic arriving on a Tunnel instance, i.e.,
packets that have just been encapsulated, is conceptually similar to
locally-generated traffic.</p>
</div>
<p>In summary, the decision to en-tunnel a packet is a forwarding
decision to send a packet to an IP interface that is stacked above a
<em>Tunnel</em> <em>interface</em> instance, and the decision to
de-tunnel a packet is a consequence of the fact that it is addressed to
the CPE and is therefore passed to a <em>Tunnel</em> instance. <a
href="#fig:tunneling-overview-showing-forwarding-decisions"
class="figure">Figure 17</a> extends <a href="#fig:tunneling-overview"
class="figure">Figure 16</a> by expanding the tunnel into a <em>Tunnel
IP interface</em>, a <em>Tunnel interface</em>, and the <em>Tunnel</em>
instance, thereby showing where these two decisions are made.</p>
<figure id="fig:tunneling-overview-showing-forwarding-decisions">
<img src="images/tunneling-overview-showing-forwarding-decisions.png"
id="img:tunneling-overview-showing-forwarding-decisions"
alt="Tunneling Overview (Showing Forwarding Decisions)" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:tunneling-overview-showing-forwarding-decisions">
Figure 17:
Tunneling Overview (Showing Forwarding Decisions)
</div></figcaption>
</figure>
<div class="note">
<p>The existing 6rd, DS-Lite and IPsec data models use a less flexible
approach in which the Tunnel interfaces are not explicitly modeled, and
a separate non-stackable Tunnel table references auto-created
Tunnel/Tunneled IP interface pairs. See <em><a
href="#sec:tunneling-details" class="heading">Details</a></em> for
further details.</p>
</div>
<div class="note">
<p>The Tunnel interface and Tunnel approach is more flexible because (a)
it supports multiple flows / sessions with a tunnel (e.g., GRE traffic
flows or L2TP sessions), (b) it supports additional encapsulation layers
between the Tunnel IP interface and the Tunnel interface (e.g., PPP for
L2TP), and (c) it supports layer 2 tunneling use cases (traffic is
bridged directly to the Tunnel interface and there is no Tunnel IP
interface). See <em><a href="#sec:tunneling-details"
class="heading">Details</a></em> for further details.</p>
</div>
<p><a
href="#fig:sample-flow-of-upstream-tunneled-traffic-through-the-device"
class="figure">Figure 18</a> and <a
href="#fig:sample-flow-of-downstream-tunneled-traffic-through-the-device"
class="figure">Figure 19</a> show upstream and downstream examples of
how the <em>Tunnel interface</em> and <em>Tunnel</em> instances are used
to describe the traffic path through the device for both untunneled and
tunneled packets.</p>
<figure
id="fig:sample-flow-of-upstream-tunneled-traffic-through-the-device">
<img
src="images/sample-flow-of-upstream-tunneled-traffic-through-the-device.png"
id="img:sample-flow-of-upstream-tunneled-traffic-through-the-device"
alt="Sample Flow of Upstream Tunneled Traffic through the Device" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:sample-flow-of-upstream-tunneled-traffic-through-the-device">
Figure 18:
Sample Flow of Upstream Tunneled Traffic through the Device
</div></figcaption>
</figure>
<figure
id="fig:sample-flow-of-downstream-tunneled-traffic-through-the-device">
<img
src="images/sample-flow-of-downstream-tunneled-traffic-through-the-device.png"
id="img:sample-flow-of-downstream-tunneled-traffic-through-the-device"
alt="Sample Flow of Downstream Tunneled Traffic through the Device" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:sample-flow-of-downstream-tunneled-traffic-through-the-device">
Figure 19:
Sample Flow of Downstream Tunneled Traffic through the Device
</div></figcaption>
</figure>
<p>The less flexible (<em>Tunnel,Tunneled</em>) IP interface mechanism
is used in the following three cases:</p>
<ul>
<li><a href="#sec:rd-theory-of-operation" class="heading">IPv6rd</a>
<em>Device.IPv6rd</em>.</li>
<li><a href="#sec:dual-stack-lite-theory-of-operation"
class="heading">DS-Lite</a> <em>Device.DSLite</em>.</li>
<li><a href="#sec:ipsec-theory-of-operation" class="heading">IPsec</a>
<em>Device.IPsec</em>.</li>
</ul>
<p>The flexible <em>Tunnel interface</em> and <em>Tunnel</em> mechanism
is used for the following two cases and will be used for modeling all
future tunneling scenarios:</p>
<ul>
<li><a href="#sec:gre-tunnel-theory-of-operation"
class="heading">GRE</a> <em>Device.GRE</em>.</li>
<li><a href="#sec:map-theory-of-operation" class="heading">MAP</a>
<em>Device.MAP</em>.</li>
</ul>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:tunneling-details">B.2 Details</h2>
<p><a href="#fig:general-layer-3-tunneling-interface-stack"
class="figure">Figure 20</a> shows the interface stack for a general
layer 3 tunneling scenario. Compare with <a
href="#fig:general-layer-3-tunneling-from-tunneling-overview"
class="figure">Figure 21</a>), which is derived from <a
href="#fig:tunneling-overview-showing-forwarding-decisions"
class="figure">Figure 17</a>. It can be seen that each Figure presents a
different view of the same thing.</p>
<figure id="fig:general-layer-3-tunneling-interface-stack">
<img src="images/general-layer-3-tunneling-interface-stack.png"
id="img:general-layer-3-tunneling-interface-stack"
alt="General Layer 3 Tunneling Interface Stack" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:general-layer-3-tunneling-interface-stack">
Figure 20:
General Layer 3 Tunneling Interface Stack
</div></figcaption>
</figure>
<figure id="fig:general-layer-3-tunneling-from-tunneling-overview">
<img src="images/general-layer-3-tunneling-from-tunneling-overview.png"
id="img:general-layer-3-tunneling-from-tunneling-overview"
alt="General Layer 3 Tunneling (from Tunneling Overview)" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:general-layer-3-tunneling-from-tunneling-overview">
Figure 21:
General Layer 3 Tunneling (from Tunneling Overview)
</div></figcaption>
</figure>
<div class="note">
<p>IP.Interface.3 is labeled as Type=Normal in <a
href="#fig:general-layer-3-tunneling-interface-stack"
class="figure">Figure 20</a> but as Tunnel IP interface in <a
href="#fig:general-layer-3-tunneling-from-tunneling-overview"
class="figure">Figure 21</a>. IP interface Type=Tunnel was defined
specifically for the (Tunnel,Tunneled) IP interface mechanism and is not
needed because IP.Interface.3 is stacked above
TT.Tunnel.1.Interface.1.</p>
</div>
<p><a href="#fig:general-layer-3-tunneling-interface-stack"
class="figure">Figure 20</a> is general in that it is independent of the
tunnel technology, but it doesn’t illustrate all the possibilities. If
supported by the tunnel technology:</p>
<ul>
<li><p>A Tunnel can have multiple Tunnel interface children, each of
which models a flow or session. In this case the Tunnel interface object
is multi-instance.</p></li>
<li><p>There can be additional encapsulation layers between the Tunnel
IP interface(s) and the Tunnel interface(s).</p></li>
</ul>
<p><a href="#fig:l2tp-interface-stack-example" class="figure">Figure
22</a> shows an L2TP <span class="citation" data-cites="RFC2661"><a
href="#ref-RFC2661" role="doc-biblioref">[17]</a></span> example that
illustrates both of the above.</p>
<figure id="fig:l2tp-interface-stack-example">
<img src="images/l2tp-interface-stack-example.png"
id="img:l2tp-interface-stack-example"
alt="L2TP Interface Stack Example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:l2tp-interface-stack-example">
Figure 22:
L2TP Interface Stack Example
</div></figcaption>
</figure>
<p>Some tunneling technologies support layer 2 tunnels, in which the
tunnel payload is a layer 2 packet. <a
href="#fig:general-layer-2-tunneling-interface-stack"
class="figure">Figure 23</a> shows the interface stack for a general
layer 2 tunneling scenario. This is conceptually similar to the layer 3
case, but a bridge port rather than an IP interface is stacked above the
<em>Tunnel interface</em>.</p>
<figure id="fig:general-layer-2-tunneling-interface-stack">
<img src="images/general-layer-2-tunneling-interface-stack.png"
id="img:general-layer-2-tunneling-interface-stack"
alt="General Layer 2 Tunneling Interface Stack" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:general-layer-2-tunneling-interface-stack">
Figure 23:
General Layer 2 Tunneling Interface Stack
</div></figcaption>
</figure>
<h1 class="annex annex1 auto-hoverlink" data-info="header"
id="sec:software-module-management-uuid-usage">Annex C: Software Module
Management UUID Usage</h1>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:overview-1">C.1 Overview</h2>
<p>The Software Module Management mechanism uses a UUID (see RFC 4122
<span class="citation" data-cites="RFC4122"><a href="#ref-RFC4122"
role="doc-biblioref">[28]</a></span> for a complete definition of UUID)
to uniformly identify a Deployment Unit across Agents. Since Deployment
Units can be installed multiple times on a single Agent (e.g., multiple
versions of the same Deployment Unit or the same version of the
Deployment Unit on different Execution Environments), a Deployment Unit
on a specific Agent is uniquely identified by the combination of UUID,
version, and Execution Environment that the Deployment Unit is installed
upon, but the UUID is still the uniform unique identifier of that
Deployment Unit (i.e., this means that the UUID will be the same
independent of the version of the Deployment Unit). A version 5 UUID is
a method for generating UUIDs from “names” that are unique within some
“namespace”, which means that a UUID generated by different actors but
using the same “name” and “namespace” will cause the generation of the
same exact UUID. The Software Module Management mechanism requires,
whether the Controller or the Agent generates the UUID, that the UUID be
generated in the exact same manner following both the rules defined in
Section 4.3 / RFC 4122 <span class="citation" data-cites="RFC4122"><a
href="#ref-RFC4122" role="doc-biblioref">[28]</a></span> and the rules
defined within this Annex.</p>
<p>Section 4.3 / RFC 4122 <span class="citation" data-cites="RFC4122"><a
href="#ref-RFC4122" role="doc-biblioref">[28]</a></span> identifies the
following high-level requirements for a Version 3 UUID:</p>
<ul>
<li><p>The UUIDs generated at different times from the same name in the
same namespace MUST be equal.</p></li>
<li><p>The UUIDs generated from two different names in the same
namespace should be different (with very high probability).</p></li>
<li><p>The UUIDs generated from the same name in two different
namespaces should be different with (very high probability).</p></li>
<li><p>If two UUIDs that were generated from names are equal, then they
were generated from the same name in the same namespace (with very high
probability).</p></li>
</ul>
<p>The remainder of this Annex defines additional rules that MUST be
followed by the Controller and Agent when generating a UUID as well as
under what circumstances a Agent will be required to generate a
UUID.</p>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:uuid-generation-requirements">C.2 UUID Generation
Requirements</h2>
<p>The following set of additional requirements ensures that the Version
5 UUID will be uniform regardless of whether the Controller or Agent
generates it:</p>
<p>The FQDN “namespace” UUID as defined in Appendix C /RFC 4122 <span
class="citation" data-cites="RFC4122"><a href="#ref-RFC4122"
role="doc-biblioref">[28]</a></span> MUST be used:
6ba7b810-9dad-11d1-80b4-00c04fd430c8</p>
<p>The “name” will be the FQDN of the Deployment Unit, which MUST be a
combination of the Deployment Unit’s Name (the value that will be
contained within the DeploymentUnit.{i}.Name Parameter) and the
Deployment Unit Vendor’s domain name (the value that will be contained
within the DeploymentUnit.{i}.Vendor Parameter). The format is:
<em>‘&lt;Name&gt; + “.” + &lt;Vendor&gt; + “.”’</em>. For example, if
the DU Vendor is “broadband-forum.org” and the DU Name is “sample1”,
then the FQDN of the DU is “sample1.broadband-forum.org.”</p>
<div class="note">
<p>As the Deployment Unit’s Name is used within generation of the FQDN,
it MUST be altered if it contains any characters other than 0-9, a-z,
A-Z, _ (underscore), or - (hyphen). Percent-encoding MUST be used to
replace any other characters (i.e., a ‘%’ character followed by the
ASCII hex value of the replaced character). For example, a Deployment
Unit Name of “sample.1” would be converted to “sample%2e1”.</p>
</div>
<p>An example of a Version 5 UUID looks like: *
76183ed7-6a38-3890-66ef-a6488efb6690</p>
<h2 class="annex2 auto-hoverlink" data-info="header"
id="sec:agent-requirements">C.3 Agent Requirements</h2>
<p>There are three circumstances when a Agent MUST generate its own
UUID:</p>
<ul>
<li>Factory-Installed Deployment Units : a Deployment Unit is installed
at factory time without the aid of a Controller</li>
<li>LAN-Side-Installed Deployment Units : a Deployment Unit is installed
by a LAN-Side management mechanism (e.g., UPnP DM SMS, CLI, or GUI)
without the aid of a Controller</li>
<li>Controller-Installed Deployment Units : a Deployment Unit is
installed by a Controller, but the Controller either does not send the
UUID or sends an empty string as the UUID within the Install operation
of the ChangeDUState RPC.</li>
</ul>
<p>In these circumstances the Agent MUST generate the UUID as it
installs the Deployment Unit. The Controller can discover / validate the
generated UUID by either inspecting the DUStateChangeComplete or
inspecting the Deployment Unit Data Model table.</p>
<h1 class="hidden unlisted unnumbered auto-hoverlink" data-info="header"
id="sec:appendices">Appendices</h1>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:example-rg-queuing-architecture">Appendix I:
Example RG Queuing Architecture</h1>
<p>The queuing and scheduling discipline envisioned upstream for the RG
is shown in <a href="#fig:queuing-and-scheduling-example-for-rg"
class="figure">Figure 24</a>, taken from the description of TR-059 <span
class="citation" data-cites="TR-059"><a href="#ref-TR-059"
role="doc-biblioref">[57]</a></span>.</p>
<p>There are multiple access sessions supported in this model, however,
all traffic is classified and scheduled in a monolithic system. So,
while it might appear at first that the Diffserv queuing and scheduling
might apply only to IP-aware access – in fact all access, IP, Ethernet,
or PPP is managed by the same system that adheres to the Diffserv
model.</p>
<p>For example, at the bottom of the figure, BE treatment is given to
the non-IP-aware access sessions (PPPoE started behind the RG or
delivered to an L2TP tunnel delivery model). This queue might be
repeated several times in order to support fairness among multiple PPPoE
accesses – or it can be a monolithic queue with separate rate limiters
applied to the various access sessions.</p>
<p>The PTA access is a single block of queues. This is done because NSP
access typically works with a single default route to the NSP, and
managing more than one simultaneously at the RG would be perilous. The ∑
rate limiter would limit the overall access traffic for a service
provider.</p>
<p>Rate limiters are also shown within the EF and AF service classes
because the definition of those Diffserv types is based on treating the
traffic differently when it falls into various rates.</p>
<p>Finally, at the top of the diagram is the ASP access block of queues.
In phase 1A, these queues are provisioned and provide aggregate
treatment of traffic mapped to them. In phase 1B, it will become
possible to assign AF queues to applications to give them specific
treatment instead of aggregate treatment. The EF service class can also
require a high degree of coordination among the applications that make
use of it so that its maximum value is not exceeded.</p>
<p>Notable in this architecture is that all the outputs of the EF, AF,
and BE queues are sent to a scheduler (<strong>S</strong>) that pulls
traffic from them in a strict priority fashion. In this configuration EF
traffic is, obviously, given highest precedence and BE is given the
lowest. The AF service classes fall in-between.</p>
<p>Note that there is significant interest in being able to provide a
service arrangement that would allow general Internet access to have
priority over other (bulk rate) services. Such an arrangement would be
accomplished by assigning the bulk rate service class to BE and by
assigning the default service class (Internet access) as AF with little
or no committed information rate.</p>
<div class="note">
<p>A “bulk rate” service class would typically be used for background
downloads and potentially for peer-to-peer applications as an
alternative to blocking them entirely.</p>
</div>
<p>Given this arrangement, the precedence of traffic shown in the figure
is arranged as:</p>
<ol>
<li>EF – red dotted line</li>
<li>AF – blue dashed line (with various precedence among AF classes as
described in RFC 2597 <span class="citation" data-cites="RFC2597"><a
href="#ref-RFC2597" role="doc-biblioref">[16]</a></span>)</li>
<li>BE – black solid line</li>
</ol>
<figure id="fig:queuing-and-scheduling-example-for-rg">
<img src="images/queuing-and-scheduling-example-for-rg.png"
id="img:queuing-and-scheduling-example-for-rg"
alt="Queuing and Scheduling Example for RG" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:queuing-and-scheduling-example-for-rg">
Figure 24:
Queuing and Scheduling Example for RG
</div></figcaption>
</figure>
<p>In <a href="#fig:queuing-and-scheduling-example-for-rg"
class="figure">Figure 24</a> the following abbreviations apply:</p>
<div class="line-block">    ASP – Application Service Provider<br />
    PTA – PPP Terminated Aggregation<br />
    PPP – Point-to-Point Protocol<br />
    EF – Expedited Forwarding – as defined in RFC 3246 <span
class="citation" data-cites="RFC3246"><a href="#ref-RFC3246"
role="doc-biblioref">[21]</a></span><br />
    AF – Assured Forwarding – as defined in RFC 2597 <span
class="citation" data-cites="RFC2597"><a href="#ref-RFC2597"
role="doc-biblioref">[16]</a></span><br />
    BE – Best Effort forwarding<br />
    RL – Rate Limiter<br />
    ∑RL – Summing Rate Limiter (limits multiple flows)<br />
    S – Scheduler</div>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header"
id="sec:use-of-bridging-objects-for-vlan-tagging">Appendix II: Use of
Bridging Objects for VLAN Tagging</h1>
<p>In the case of an Ethernet upstream Interface or a VDSL2 upstream
Interface based on PTM-EFM, 802.1Q Tagging can be used to tag egress
traffic. This choice enables a multi-VLAN architecture in order to
deploy a multi-service configuration (high speed Internet, VoIP, Video
Phone, IPTV, etc.), where one VLAN or a group of VLANs are associated
with each service. If 802.1Q tagging on the upstream interface is used,
it is necessary to have a way to associate incoming upstream 802.1Q
tagged or untagged traffic or internally generated traffic (PPPoE, IPoE
connections) to the egress (and vice-versa). The solution is to apply
coherent bridging rules.</p>
<p>Regarding different traffic bridging rules, the possible cases are
characterized as follows:</p>
<ul>
<li>Tagged LAN to tagged WAN traffic (pure VLAN bridging), with VLAN ID
translation as a special case</li>
<li>Untagged LAN to tagged WAN traffic</li>
<li>Internally generated to tagged WAN traffic</li>
</ul>
<p>To better understand the different cases, refer to <a
href="#fig:examples-of-vlan-configuration-based-on-bridging-and-vlan-termination-objects"
class="figure">Figure 25</a> and to the following examples.</p>
<figure
id="fig:examples-of-vlan-configuration-based-on-bridging-and-vlan-termination-objects">
<img
src="images/examples-of-vlan-configuration-based-on-bridging-and-vlan-termination-objects.png"
id="img:examples-of-vlan-configuration-based-on-bridging-and-vlan-termination-objects"
alt="Examples of VLAN configuration based on Bridging and VLAN Termination objects" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:examples-of-vlan-configuration-based-on-bridging-and-vlan-termination-objects">
Figure 25:
Examples of VLAN configuration based on Bridging and VLAN Termination
objects
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:tagged-lan-to-tagged-wan-traffic-vlan-bridging">II.1 Tagged LAN
to Tagged WAN Traffic (VLAN Bridging)</h2>
<p>Ethernet port 1 (instance Device.Ethernet.Interface.2) might be
dedicated to VoIP service, receiving VLAN ID x tagged traffic from a
VoIP phone, and this port would be included in the same bridge dedicated
to VoIP service on the upstream interface (instance
Device.Ethernet.Interface.1), identified with the same VLAN ID x.</p>
<p>To achieve this, an interface-based bridge would be created using the
Bridging object. A Bridge table entry would be created with entries for
Ethernet port 1 and the upstream interface and for the VLAN ID x
associated with VoIP.</p>
<p>The Bridging model is depicted in <a href="#fig:bridge-1-model"
class="figure">Figure 26</a>, while the configuration rules for this
situation are summarized in <a
href="#tbl:tagged-lan-to-tagged-wan-configuration" class="table">Table
6</a>.</p>
<figure id="fig:bridge-1-model">
<img src="images/bridge-1-model.png" id="img:bridge-1-model"
alt="Bridge 1 model" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:bridge-1-model">
Figure 26:
Bridge 1 model
</div></figcaption>
</figure>
<div data-bbfTable="bridge1ModelTable">
<table id="tbl:tagged-lan-to-tagged-wan-configuration"
style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:tagged-lan-to-tagged-wan-configuration">
Table 6: Tagged LAN to tagged WAN configuration
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bridge between WAN and LAN 1 interfaces with VLANID=<em>x</em></td>
<td style="text-align: left;"><p>[Define VLANx]</p>
<table>
<colgroup>
<col style="width: 51%" />
<col style="width: 48%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.VLAN.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td><em>VLANx</em></td>
</tr>
<tr class="even">
<td>VLANID</td>
<td><em>X</em></td>
</tr>
</tbody>
</table>
<p>[Define Ingress Port2-3 – Create an entry for the upstream and
downstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>x</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port2</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.3</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>x</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port3</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<p>[Associate Egress Port2-3 to VLANx – Create an entry for the upstream
and downstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.VLANPort.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANx</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port2</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.VLANPort.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANx</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port3</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:tagged-lan-to-tagged-wan-traffic-special-case-with-vlan-id-translation">II.2
Tagged LAN to Tagged WAN Traffic (Special Case with VLAN ID
Translation)</h2>
<p>Ethernet port 2 (instance Device.Ethernet.Interface.3) might be
dedicated to Video Phone service, receiving VLAN ID y tagged traffic
from a Video phone, and this port would be included in the same bridge
dedicated to Video Phone service on the upstream interface (instance
Device.Ethernet.Interface.1), identified by a different VLAN ID (VLAN ID
z). In this case a VLAN translation needs to be performed.</p>
<p>To achieve this, a bridge would be created using the Bridging object.
A Bridge table entry would be created along with two associated Filter
object entries for {Ethernet port 2/VLAN ID z} and {upstream
interface/VLAN ID y}. The Filter identifies the ingress interface and
causes the ingress frames to be bridged to the egress VLAN, permitting
VLAN-ID translation.</p>
<p>The Bridging model is depicted in <a href="#fig:bridge-2-model"
class="figure">Figure 27</a>, while the configuration rules for this
situation are summarized in <a
href="#tbl:tagged-lan-to-tagged-wan-configuration-vlan-id-translation"
class="table">Table 7</a>.</p>
<figure id="fig:bridge-2-model">
<img src="images/bridge-2-model.png" id="img:bridge-2-model"
alt="Bridge 2 model" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:bridge-2-model">
Figure 27:
Bridge 2 model
</div></figcaption>
</figure>
<div data-bbfTable="bridge2ModelTable">
<table
id="tbl:tagged-lan-to-tagged-wan-configuration-vlan-id-translation"
style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:tagged-lan-to-tagged-wan-configuration-vlan-id-translation">
Table 7: Tagged LAN to tagged WAN configuration (VLAN ID translation)
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Tagged LAN 2 to tagged WAN traffic (and vice versa) (special case
with VLAN ID translation)</p>
<p>upstream VLAN-ID=z</p>
<p>downstream VLAN-ID=y</p></td>
<td style="text-align: left;"><p>[Define VLANy and VLANz]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.VLAN.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td><em>VLANy</em></td>
</tr>
<tr class="even">
<td>VLANID</td>
<td><em>y</em></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.VLAN.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td><em>VLANz</em></td>
</tr>
<tr class="even">
<td>VLANID</td>
<td><em>z</em></td>
</tr>
</tbody>
</table>
<p>[Define Ingress Port2 – Create an entry for upstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.Port.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>Z</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port2</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<p>[Define Ingress Port3 – Create an entry for the downstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.Port.3</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>y</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port3</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<p>[Associate Egress Port2 to VLANz - Create an entry for upstream
port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.VLANPort.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANz</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port2</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table>
<p>[Associate Egress Port3 to VLANy - Create an entry for each
downstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.VLANPort.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANy</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port3</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table>
<p>[Define filter on upstream: ingress from Port 2 is associated with
VLANy]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Filter.1.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bridge</td>
<td><em>VLANy</em></td>
</tr>
<tr class="even">
<td>Interface</td>
<td><em>Port2</em></td>
</tr>
</tbody>
</table>
<p>[Define filter on downstream: ingress from Port 3 is associated with
VLANz]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Filter.2.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bridge</td>
<td><em>VLANz</em></td>
</tr>
<tr class="even">
<td>Interface</td>
<td><em>Port3</em></td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:untagged-lan-to-tagged-wan-traffic">II.3 Untagged LAN to Tagged
WAN Traffic</h2>
<p>Ethernet port 3 (instance Device.Ethernet.Interface.4) might be
dedicated to IPTV service, receiving untagged traffic from a STB, and
this port would be included in the same bridge dedicated to IPTV service
on the upstream interface (instance Device.Ethernet.Interface.1),
identified with the VLAN ID k.</p>
<p>To achieve this, an interface-based bridge would be created using the
Bridging object. A Bridge table entry would be created, associating in
the same bridge untagged frames on Ethernet port 3 with tagged frames on
the upstream interface.</p>
<p>The Bridging model is depicted in <a href="#fig:bridge-3-model"
class="figure">Figure 28</a>, while the configuration rules for this
situation are summarized in <a
href="#tbl:untagged-lan-to-tagged-wan-configuration" class="table">Table
8</a>.</p>
<figure id="fig:bridge-3-model">
<img src="images/bridge-3-model.png" id="img:bridge-3-model"
alt="Bridge 3 model" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:bridge-3-model">
Figure 28:
Bridge 3 model
</div></figcaption>
</figure>
<div data-bbfTable="bridge3ModelTable">
<table id="tbl:untagged-lan-to-tagged-wan-configuration"
style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:untagged-lan-to-tagged-wan-configuration">
Table 8: Untagged LAN to tagged WAN configuration
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Untagged LAN 3 to tagged WAN (VLAN-ID=k) traffic</td>
<td style="text-align: left;"><p>[Define VLANk]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.3.VLAN.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td><em>VLANk</em></td>
</tr>
<tr class="even">
<td>VLANID</td>
<td><em>k</em></td>
</tr>
</tbody>
</table>
<p>[Define Ingress Port2 – Create an entry for upstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.3.Port.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>k</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port2</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<p>[Define Ingress Port3 – Create an entry for the downstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.3.Port.3</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td><em>Port3</em></td>
</tr>
<tr class="even">
<td>AcceptableFrameTypes</td>
<td>AdmitAll</td>
</tr>
</tbody>
</table>
<p>[Associate Egress Port2 to VLANk - Create an entry for upstream
port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.3.VLANPort.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANk</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port2</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table>
<p>[Associate Egress Port3 to VLANk - Create an entry for each
downstream port]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.3.VLANPort.2</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANk</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port3</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>true</em></td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:internally-generated-to-tagged-wan-traffic">II.4 Internally
Generated to Tagged WAN Traffic</h2>
<p>A CPE PPPoE internal session (instance Device.PPP.Interface.1) might
be dedicated to Management service and this logical interface would
encapsulate/de-encapsulate its outgoing or incoming traffic in the VLAN
ID j, dedicated to Management service.</p>
<p>To achieve this, instead of using a bridging object, a VLAN
Termination interface would be created
(Device.Ethernet.VLANTermination.1). The Bridging model is depicted in
<a href="#fig:vlan-termination-model" class="figure">Figure 29</a>,
while the configuration rules for this situation are summarized in <a
href="#tbl:internally-generated-to-tagged-wan-configuration"
class="table">Table 9</a>.</p>
<figure id="fig:vlan-termination-model">
<img src="images/vlan-termination-model.png"
id="img:vlan-termination-model" alt="VLAN Termination model" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:vlan-termination-model">
Figure 29:
VLAN Termination model
</div></figcaption>
</figure>
<div data-bbfTable="vlanTerminationModelTable">
<table id="tbl:internally-generated-to-tagged-wan-configuration"
style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:internally-generated-to-tagged-wan-configuration">
Table 9: Internally generated to tagged WAN configuration
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Internal to tagged WAN (VLAN-ID=j) traffic</td>
<td style="text-align: left;"><p>[DefineVLAN Termination on top of
Ethernet Link]</p>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Ethernet.VLANTermination.1</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLANID</td>
<td><em>j</em></td>
</tr>
<tr class="even">
<td>LowerLayers</td>
<td>Ethernet.Link.1</td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:other-issues">II.5 Other Issues</h2>
<p>The previous rules can be applied to allow all combinations of
traffic. If the subscriber’s services are modified, the Bridging
configuration might need to be modified accordingly.</p>
<p>It can be interesting to detail the configuration of three special
cases:</p>
<ul>
<li>More than one downstream interface in a bridge</li>
<li>802.1D (re-)marking</li>
<li>More than one VLAN ID tag for the same downstream interface</li>
</ul>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:more-than-one-downstream-interface-in-a-bridge">II.5.1 More than
one Downstream Interface in a Bridge</h3>
<p>Referring to the example in <em><a
href="#sec:tagged-lan-to-tagged-wan-traffic-vlan-bridging"
class="heading">Tagged LAN to tagged WAN traffic (VLAN
bridging)</a></em>, consider adding other Ethernet interfaces (e.g.,
Ethernet ports 3 and 4 = instance Device.Ethernet.Interface.3/4) to the
Video Phone service. The behavior is the same as for the existing
Ethernet port 2 (instance Device.Ethernet.Interface.2).</p>
<p>To achieve this, new entries need to be added for interface Eth-3 and
Eth-4. The Bridging model is depicted in <a
href="#fig:bridge-1-model-additional-ethernet-interfaces"
class="figure">Figure 30</a>, while the configuration rules for this
situation are summarized in <a
href="#tbl:tagged-lan-to-tagged-wan-configuration" class="table">Table
6</a> and <a
href="#tbl:configuration-to-be-added-to-tagged-lan-to-tagged-wan-configuration-table"
class="table">Table 10</a>.</p>
<figure id="fig:bridge-1-model-additional-ethernet-interfaces">
<img src="images/bridge-1-model-additional-ethernet-interfaces.png"
id="img:bridge-1-model-additional-ethernet-interfaces"
alt="Bridge 1 model (additional Ethernet interfaces)" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:bridge-1-model-additional-ethernet-interfaces">
Figure 30:
Bridge 1 model (additional Ethernet interfaces)
</div></figcaption>
</figure>
<div data-bbfTable="bridge1ModelPlusTable">
<table
id="tbl:configuration-to-be-added-to-tagged-lan-to-tagged-wan-configuration-table"
style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:configuration-to-be-added-to-tagged-lan-to-tagged-wan-configuration-table">
Table 10: Configuration to be added to “Tagged LAN to tagged WAN
configuration” table
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bridge between WAN and LAN 2/LAN 3 interfaces with VLANID=<em>x</em>
<em>(Configuration to be added to <a
href="#tbl:tagged-lan-to-tagged-wan-configuration" class="table">Table
6</a>)</em></td>
<td style="text-align: left;"><p>[Define Ingress Port4-5 – Create an
entry for the other downstream ports]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.4</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>x</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port4</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.5</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PVID</td>
<td><em>x</em></td>
</tr>
<tr class="even">
<td>Name</td>
<td><em>Port5</em></td>
</tr>
<tr class="odd">
<td>AcceptableFrameTypes</td>
<td>AdmitOnlyVLANTagged</td>
</tr>
</tbody>
</table>
<p>[Associate Egress Port4-5 to VLANx - Create an entry for the
downstream ports]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.VLANPort.3</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANx</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port4</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.VLANPort.4</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VLAN</td>
<td><em>VLANx</em></td>
</tr>
<tr class="even">
<td>Port</td>
<td><em>Port5</em></td>
</tr>
<tr class="odd">
<td>Untagged</td>
<td><em>false</em></td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:802.1d-re-marking">II.5.2 802.1D (Re)-marking</h3>
<p>The 802.1Q Tag includes the 802.1D user priority bits field. All the
previous cases can also be extended to mark (or re-mark) this 802.1D
field. To achieve this, there are different configuration options; one
of them is to use the DefaultUserPriority or PriorityRegeneration fields
in the Bridge Port object. For untagged frames, more complex rules can
be defined referring to the QoS Classification, using the
PriorityTagging value. The Bridging configuration rules for marking
egress traffic on the upstream interface are summarized in <a
href="#tbl:802.1d-re-marking" class="table">Table 11</a>]. Compare it
with <a href="#tbl:tagged-lan-to-tagged-wan-configuration"
class="table">Table 6</a>.</p>
<div data-bbfTable="bridgeRemarkingTable">
<table id="tbl:802.1d-re-marking" style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:802.1d-re-marking">
Table 11: 802.1D (re-)marking
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>802.1D (re-)marking</p>
<p>Remark all WAN egress traffic</p></td>
<td style="text-align: left;"><p>[Mark the ingress frames with Default
user Priority, in this case <em>0</em>]</p>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.2.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DefaultUserPriority</td>
<td><em>0</em></td>
</tr>
</tbody>
</table>
<p>[Remark each ingress priority value (0,1,2,3,4,5,6,7) with the
priority regeneration string, in this case
<em>(0,0,0,0,4,4,4,4)</em>]</p>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.2.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PriorityRegeneration</td>
<td><em>0,0,0,0,4,4,4,4</em></td>
</tr>
</tbody>
</table>
<p>[In case of ingress untagged frames, for more complex classification,
QoS object are referred. In this case remark with <em>0</em>]</p>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.2.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PriorityTagging</td>
<td><em>true</em></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.QoS.Classification.{i}.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>EthernetPriorityMark</td>
<td><em>0</em></td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface">II.5.3
More than one VLAN ID Tag Admitted on the Same Downstream Interface</h3>
<p>Another scenario that can be further detailed is the case of more
than one VLAN ID tag admitted on the same downstream interface. A
practical example would be a 2 box scenario, with a User Device
generating traffic segregated in multiple VLANs (e.g., a router offering
services to the customer), and a Residential Gateway, providing upstream
connectivity to the Access Network, with the connection between the two
pieces of equipment using an Ethernet interface.</p>
<p>In this case, we assume the User Device is able to tag the different
traffic flows, segregating the different services (Voice, Video, …) into
different VLANs. The Residential Gateway needs, on the same downstream
interface, to be able to receive different VLAN ID and correctly forward
or translate to the upstream interface (and vice versa). To achieve
this, appropriate Bridging objects need to be configured.</p>
<figure id="fig:example-of-vlan-configuration-in-a-2-box-scenario">
<img src="images/example-of-vlan-configuration-in-a-2-box-scenario.png"
id="img:example-of-vlan-configuration-in-a-2-box-scenario"
alt="Example of VLAN configuration in a 2 box scenario" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-of-vlan-configuration-in-a-2-box-scenario">
Figure 31:
Example of VLAN configuration in a 2 box scenario
</div></figcaption>
</figure>
<p>Referring to <a
href="#fig:example-of-vlan-configuration-in-a-2-box-scenario"
class="figure">Figure 31</a> as an example, assume the case of three
VLANs (VLAN ID=x,y,z) offered by a User Device to the Residential
Gateway on the same downstream interface (Eth #1). The Residential
Gateway bridges two of them (VLAN ID=x,y) and translates the other one
(VLAN ID=z) to the upstream interface (VLAN ID=k).</p>
<p>On the Residential Gateway, this can be achieved using a combination
of the Bridging objects detailed in the preceding sections, with 3
bridge entries and their related entries. Refer to <a
href="#fig:bridge-123-model" class="figure">Figure 32</a> for the
Bridging model and <a
href="#tbl:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface"
class="table">Table 12</a> for the global configuration.</p>
<figure id="fig:bridge-123-model">
<img src="images/bridge-123-model.png" id="img:bridge-123-model"
alt="Bridge 1,2,3 model" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:bridge-123-model">
Figure 32:
Bridge 1,2,3 model
</div></figcaption>
</figure>
<div data-bbfTable="bridge123ModelTable">
<table
id="tbl:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface"
style="width:98%;">
<caption><div class="auto-hoverlink"
data-anchor="tbl:more-than-one-vlan-id-tag-admitted-on-the-same-downstream-interface">
Table 12: More than one VLAN ID tag admitted on the same Downstream
interface
</div></caption>
<colgroup>
<col style="width: 26%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: left;">Bridging Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>More than one VLAN ID tag admitted on the same downstream
interface</td>
<td style="text-align: left;"><p>The configuration is the sum of
<em>[Tagged LAN to Tagged WAN Traffic VLAN Bridging]</em> and
<em>[Tagged LAN to Tagged WAN Traffic Special Case with VLAN ID
Translation]</em>, but on the downstream side the lower layer to be
configured for each Bridge Port is always: Ethernet.Interface.2</p>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.1.Port.3.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>LowerLayers</td>
<td><em>Ethernet.Interface.2</em></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.2.Port.3.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>LowerLayers</td>
<td><em>Ethernet.Interface.2</em></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Device.Bridging.Bridge.3.Port.3.</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>LowerLayers</td>
<td><em>Ethernet.Interface.2</em></td>
</tr>
</tbody>
</table></td>
</tr>
</tbody>
</table>
</div>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:wi-fi-theory-of-operation">Appendix III:
Wi-Fi Theory of Operation</h1>
<p>This section discusses the theory of operations for various
technologies in the Wi-Fi domain found within the Device:2 data
model.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:multi-radio-and-multi-band-wi-fi-radio-devices">III.1
Multi-radio and Multi-band Wi-Fi Radio Devices</h2>
<p>The WiFi.Radio object description says “This object models an 802.11
wireless radio on a device. If the device can establish more than one
connection simultaneously (e.g., a dual radio device), a separate
WiFi.Radio instance will be used for representing each physical radio of
the device.”</p>
<p>The following sections clarify when multiple WiFi.Radio instances are
needed, and the impact on their underlying parameters in the case of
multi-radio and/or multi-band devices.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:definitions-1">III.2 Definitions</h2>
<p>Each physical radio allows the transmission and reception of data on
a single Wi-Fi channel at a given time. A single-radio device is able to
transmit/receive a packet at a given time only on one Wi-Fi channel.
Similarly, a dual-radio device is able to simultaneously
transmit/receive data on two Wi-Fi channels. In general, a device with N
radios is able to simultaneously transmit/receive data on N Wi-Fi
channels.</p>
<p>An important point is that Wi-Fi can operate at different frequency
bands, 2.4 GHz, 5 GHz and 6 GHz, as follows:</p>
<ul>
<li>Wi-Fi technologies based on IEEE 802.11b/g standard operate on the
2.4 GHz frequency band.</li>
<li>Wi-Fi technologies based on IEEE 802.11a/ac standard operate on the
5 GHz frequency band.</li>
<li>Wi-Fi technologies based on IEEE 802.11n standard operate on both
the 2.4 and 5 GHz frequency bands.IEEE 802.11n is also called Wi-Fi 4
and High Throughput (HT).</li>
<li>Wi-Fi technologies based on IEEE 802.11ac standard operate on the 5
GHz frequency band. IEEE 802.11ac is also called Wi-Fi 5 and Very High
Throughput (VHT).</li>
<li>Wi-Fi technologies based on IEEE 802.11ax standard operate on the
2.4, 5 and 6 GHz frequency bands. IEEE 802.11ax is also called Wi-Fi 6
and High Efficiency (HE).</li>
</ul>
<p>Radios that operate at a single frequency band (e.g., 2.4 GHz only
802.11b/g devices) are called single-band radios. Radios that can
operate in two frequency bands (e.g., 802.11a/b/g/n/ac/ax devices) are
called dual-band radios, and radios that can operate in three bands
(e.g., 802.11ax/Wi-Fi6E devices) are called tri-band radios.</p>
<p>A dual-band device can be a single-radio device if it can be
configured to operate at 2.4 or 5 GHz frequency bands. However, only a
single frequency band is used to transmit/receive at a given time. In
such a case the device has a single physical radio that is
dual-band.</p>
<p>Also, a dual-radio single-band device can exist (although uncommon)
if both radios are single-band.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:number-of-instances-of-wifi.radio-object">III.3 Number of
Instances of WiFi.Radio Object</h2>
<p>Given the definitions above, a separate WiFi.Radio instance will be
used for each physical radio of the device, i.e., one instance for a
single-radio device, two instances for dual-radio devices, and so on. A
single WiFi.Radio instance will therefore be used for a dual-band
single-radio device.</p>
<p>Each WiFi.Radio instance is configured separately and is, in general,
completely independent of other instances.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:supportedfrequencybands-and-operatingfrequencyband">III.4
SupportedFrequencyBands and OperatingFrequencyBand</h2>
<p>The frequency band used by a WiFi device is an important parameter.
With first generations of WiFi technologies, the specific frequency band
was linked to the IEEE standard in use (i.e., 802.11b/g are 2.4 GHz
standards, while 802.11a is a 5 GHz standard). With the introduction of
the IEEE 802.11n standard, which can work both at 2.4 and 5 GHz, two
specific parameters are used to indicate the supported frequency bands
and the operating frequency band.</p>
<p>SupportedFrequencyBands is a list-valued parameter, containing one
item for single-band radios (either 2.4GHz, 5GHz, or 6GHz) and two items
for dual-band radios. 802.11ax can also operate in the 6 GHz band.</p>
<p>The OperatingFrequencyBand parameter specifies which frequency band
is currently being used by a dual-band radio (i.e., set to one of the
two items listed in the SupportedFrequencyBands parameter). For
single-band radios, OperatingFrequencyBand always has the same value as
SupportedFrequencyBands (since only one frequency band is
supported).</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:behavior-of-dual-band-radios-when-operatingfrequencyband-changed">III.5
Behavior of Dual-band Radios when OperatingFrequencyBand Changed</h2>
<p>When the configured operating frequency band of a dual-band radio is
changed (i.e., the value of the OperatingFrequencyBand parameter is
modified), this has an impact on other parameters within the WiFi.Radio
object.</p>
<p>The Channel parameter has to be changed, since channels for the 2.4
GHz frequency band are in the range 1-14, while channels for the 5 GHz
frequency band can be in the range of 36-165 (for example). The expected
behavior is that, upon modifying the OperatingFrequencyBand parameter,
the device automatically selects a new channel that is valid for the new
frequency band (according to some vendor-specific selection
procedure).</p>
<p>Other related parameters of significance for the Channel properties
are AutoChannelEnable, OperatingChannelBandwidth and
CurrentOperatingChannelBandwidth.</p>
<p>Persistence of the Channel parameter value for the previous frequency
band is not required. For example, if OperatingFrequencyBand is later
changed back to <em>5GHz</em>, a new valid value for the Channel
parameter is automatically selected by the device, but this value need
not be the same as was selected the last time OperatingFrequencyBand was
set to <em>5GHz</em>.</p>
<p>Other parameters whose values can be impacted when the
OperatingFrequencyBand changes, include: ExtensionChannel,
PossibleChannels, SupportedStandards, OperatingStandards,
IEEE80211hSupported, and IEEE80211hEnabled. If the current value is no
longer valid, the device will automatically select a valid new value
according to some vendor-specific procedure, and the old value need not
persist.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:supportedstandards-and-operatingstandards">III.6
SupportedStandards and OperatingStandards</h2>
<p>The SupportedStandards parameter is a list of all IEEE 802.11
physical layer modes supported by the devices. Wi-Fi is in general
backward compatible, so 802.11g devices are also 802.11b devices,
802.11n devices are also 802.11b/g devices (if operating at 2.4 GHz),
and 802.11n devices are also 802.11a devices (if operating at 5
GHz).</p>
<p>For dual-band radios, the OperatingFrequencyBand parameter is used
for switching the operating frequency band. For this reason
SupportedStandards only includes those values corresponding to operation
in the frequency band indicated by the OperatingFrequencyBand parameter.
For example, for dual-band 802.11a/b/g/n devices, SupportedStandards can
be <em>b, g, n</em> when OperatingFrequencyBand is <em>2.4GHz</em> and
<em>a, n, ac, ax</em> when OperatingFrequencyBand is <em>5GHz</em>. In
addition an 802.11ax device can support tri-band operation in the 2.4,
5, and 6 GHz bands.</p>
<p>The OperatingStandards parameter is used to limit operation to a
subset of physical modes supported. For example, an 802.11b/g/n radio
will have <em>b, g, n</em> value for the SupportedStandards parameter,
but can be configured to operate only with 802.11n by setting the
OperatingStandards parameter to <em>n</em>.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:different-types-of-wifi-errors">III.7 Different Types of WiFi
Errors</h2>
<p>This section first describes the different WiFi data units and the
layers where they apply.</p>
<p>The MAC Service Data Unit (MSDU) is the service data unit that is
received from the logical link control (LLC) sub-layer which lies above
the medium access control (MAC) sub-layer in the protocol stack.</p>
<p>The MAC protocol data unit (MPDU) is a message exchanged between MAC
entities in a communication system. “WiFi frames” refer to MPDUs and
WiFi counters are counts of MPDUs.</p>
<p>The Physical Layer Convergence Procedure (PLCP) protocol data unit
(PPDU) corresponds with the bits that are actually transmitted across
the physical layer.</p>
<p>The MSDU is the frame that interfaces to higher layers, while the
MPDU is the frame that is actually transmitted through the wireless
medium, excluding the physical layer overhead. The MPDU is the MSDU plus
MAC layer overhead (header, FCS, etc.). The PPDU is the MPDU plus
physical layer overhead (preamble, PHY header, etc.).</p>
<p>The number of errored MPDUs is the number of MPDUs without
corresponding ACKs. In most cases, the number of MSDUs is the same as
the number of MPDUs. However, if fragmentation is enabled, then one MSDU
can become multiple MPDUs, and there is one ACK per MPDU, hence multiple
ACKs for one MSDU.</p>
<p>With frame aggregation in 802.11n, multiple MPDUs become one
aggregated MPDU (A-MPDU). There is usually one block ACK for each
A-MPDU, and only the errored MPDU(s) can be retransmitted selectively.
In this case the WiFi counters will count the original MPDUs and not the
A-MPDUs.</p>
<p>To avoid confusion that may be caused by fragmentation or frame
aggregation, “WiFi frames” or packets are all considered here to be
MPDUs and WiFi counters refer to MPDUs.</p>
<p><a href="#fig:wifi-functions-within-layers" class="figure">Figure
33</a> explains the process of the MSDU/MPDU flow structure through the
MAC layer of the WiFi receiver.</p>
<figure id="fig:wifi-functions-within-layers">
<img src="images/wifi-functions-within-layers.png"
id="img:wifi-functions-within-layers"
alt="WiFi functions within layers" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:wifi-functions-within-layers">
Figure 33:
WiFi functions within layers
</div></figcaption>
</figure>
<p>PLCPErrorCount: This error occurs at point (1) in <a
href="#fig:wifi-functions-within-layers" class="figure">Figure 33</a>,
and is the first error type that can be counted. The PLCPErrorCount is
the number of errors in the PLCP headers of the received MPDUs, which is
the number of frames for which the parity check of the PLCP header
failed.</p>
<p>There are two errors that happen at point (2) of the wireless
reception:</p>
<ul>
<li><p>FCSErrorCount: This error occurs at point (2) in <a
href="#fig:wifi-functions-within-layers" class="figure">Figure 33</a>.
After the MPDU passes the PLCP header check, it is passed onto MAC layer
validation. The FCSErrorCount is the number of frames for which the
Frame Check Sequence (FCS) at the end of the MAC frame was in
error.</p></li>
<li><p>InvalidMACCount: This error also occurs at point (2) in <a
href="#fig:wifi-functions-within-layers" class="figure">Figure 33</a>.
The MAC header of the MPDU has a field called ‘Protocol Version’.
Currently, it is set to ‘0’. If this number is anything but 0, or the
frame type is not data/control/management,’ the InvalidMACCount is
incremented.</p></li>
</ul>
<p>After verifying that the frame was received without errors, the WiFi
receiver will then check if the frame was designated for its own use or
not (still MAC layer).</p>
<p>PacketsOtherReceived: This counter is used to catch those MPDUs that
are not addressed to this radio. This can be assessed by checking if the
‘Address 1’ field of the 802.11 MAC header contains a MAC address that
is associated with this radio, if not then ‘PacketsOtherReceived’ is
incremented.</p>
<p>After this step, the AP can also discard duplicate frames or
fragments among the frames addressed to it, to simplify higher-level
processing.</p>
<p>The ErrorsReceived count is the sum of the PLCPErrorCount plus the
FCSErrorCount plus the InvalidMACCount.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:wi-fi-data-elements">III.8 Wi-Fi Data Elements</h2>
<p>The Wi-Fi Alliance has specified Wi-Fi CERTIFIED Data Elements <span
class="citation" data-cites="DataElements"><a href="#ref-DataElements"
role="doc-biblioref">[3]</a></span>. Wi-Fi Data Elements objects are
under the Device.WiFi.DataElements. tree. Wi-Fi Data Elements Release
1.0 objects were put into Device:2.13, and Wi-Fi Data Elements Release
2.0 and Release 2.1 objects were put into Device:2.15.</p>
<p>In addition to Wi-Fi Data Elements, additional objects and parameters
have been specified in TR-181 which are useful for managing Multi-AP
Wi-Fi networks. These were originally in the Device.WiFi.MultiAP. tree,
however the Device.WiFi.MultiAP. tree has been deprecated in
Device:2.15, with some parameters deleted and other parameters moved
into the structure of Wi-Fi Data Elements under the
Device.WiFi.DataElements. tree. Objects whose titles contain “MultiAP”
are not Wi-Fi Data Elements. These MultiAP objects are in the
Device.WiFi.DataElements. tree to simplify the structure and avoid
duplication, but they are not specified by the Wi-Fi Alliance.</p>
<p>The structure of Device.WiFi.DataElements. differs somewhat from that
of the pre-existing Device.WiFi; and there is some overlap between these
structures. Wi-Fi Native predates WiFi.DataElements, and Wi-Fi Native
includes WiFi.Radio.{i}., WiFi.SSID.{i}, WiFi.AccessPoint.{i}. and
WiFi.EndPoint.{i}. <a
href="#tbl:objects-and-parameters-in-wi-fi-native-that-correspond-to-wi-fi-data-elements"
class="table">Table 13</a> shows objects, parameters and commands in
WiFi.DataElements which have a corresponding object or parameter in
Wi-Fi Native. Note that many objects and parameters in WiFi.DataElements
do not have any corresponding object or parameter in Wi-Fi Native and so
are not listed in <a
href="#tbl:objects-and-parameters-in-wi-fi-native-that-correspond-to-wi-fi-data-elements"
class="table">Table 13</a>. Also, commands are only in the USP data
model and are not in the CWMP data model. Further, Wi-Fi Data Elements’
Network Device table, Device.WiFi.DataElements.Network.Device.{i}.,
represents all of the devices within Wi-Fi network while Device.WiFi
represents only the Wi-Fi device that is being modeled. <a
href="#tbl:objects-and-parameters-in-wi-fi-data-elements-that-correspond-to-wi-fi-native"
class="table">Table 14</a> similarly shows objects and parameters in
Wi-Fi Native which have a corresponding object or parameter in
WiFi.DataElements.</p>
<table
id="tbl:objects-and-parameters-in-wi-fi-native-that-correspond-to-wi-fi-data-elements">
<caption><div class="auto-hoverlink"
data-anchor="tbl:objects-and-parameters-in-wi-fi-native-that-correspond-to-wi-fi-data-elements">
Table 13: Objects and parameters in Wi-Fi Native that correspond to
Wi-Fi Data Elements
</div></caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Wi-Fi Data Elements</th>
<th>Wi-Fi Native</th>
</tr>
</thead>
<tbody>
<tr class="odd object">
<td>Device.WiFi.DataElements.</td>
<td></td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.</td>
<td></td>
</tr>
<tr class="odd command">
<td>SetSSID()</td>
<td>Device.WiFi.SSID.{i}. (W)</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.SSID.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>SSID</td>
<td>Device.WiFi.SSID.{i}. (W)</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>Manufacturer</td>
<td>Device.Manufacturer</td>
</tr>
<tr class="even">
<td>SerialNumber</td>
<td>Device.SerialNumber</td>
</tr>
<tr class="odd">
<td>ManufacturerModel</td>
<td>Device.ModelName</td>
</tr>
<tr class="even">
<td>SoftwareVersion</td>
<td>Device.SoftwareVersion</td>
</tr>
<tr class="odd">
<td>ExecutionEnv</td>
<td>Device.SoftwareModules.ExecEnv.{i}.</td>
</tr>
<tr class="even">
<td>CountryCode</td>
<td>Device.WiFi.Radio.{i}.RegulatoryDomain</td>
</tr>
<tr class="odd object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.</td>
<td></td>
</tr>
<tr class="even">
<td>Enabled</td>
<td>Device.WiFi.Radio.{i}.Enable (W)</td>
</tr>
<tr class="odd">
<td>Noise</td>
<td>Device.WiFi.Radio.{i}.Stats.Noise</td>
</tr>
<tr class="even command">
<td>ChannelScanRequest()</td>
<td>Device.WiFi.Radio.{i}.ChannelScan() and .FullScan()</td>
</tr>
<tr class="odd command">
<td>RadioEnable()</td>
<td>Device.WiFi.Radio.{i}.Enable (W)</td>
</tr>
<tr class="even command">
<td>WiFiRestart()</td>
<td>Device.WiFi.Reset()</td>
</tr>
<tr class="odd object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.ScanResult.{i}.</td>
<td>Output of Device.WiFi.Radio.{i}.FullScan() and ChannelScan() are
bigger</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.AKMFrontHaul.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>Type</td>
<td>Device.WiFi.AccessPoint.{i}.Security.ModesSupported</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CapableOperatingClassProfile.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>MaxTxPower</td>
<td>Device.WiFi.Radio.{i}.TransmitPowerSupported</td>
</tr>
<tr class="even">
<td>NonOperable</td>
<td>Device.WiFi.Radio.{i}.PossibleChannels</td>
</tr>
<tr class="odd object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.CurrentOperatingClassProfile.{i}.</td>
<td></td>
</tr>
<tr class="even">
<td>Channel</td>
<td>Device.WiFi.Radio.{i}.ChannelsInUse</td>
</tr>
<tr class="odd">
<td>TxPower</td>
<td>Device.WiFi.Radio.{i}.TransmitPower</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.DisAllowedOpClassChannels.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>ChannelList</td>
<td>Device.WiFi.Radio.{i}.Channel</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>BSSID</td>
<td>Device.WiFi.SSID.{i}.BSSID</td>
</tr>
<tr class="even">
<td>SSID</td>
<td>Device.WiFi.SSID.{i}.SSID (W)</td>
</tr>
<tr class="odd">
<td>Enabled</td>
<td>Device.WiFi.SSID.{i}.Enable (W)</td>
</tr>
<tr class="even">
<td>LastChange</td>
<td>Device.WiFi.SSID.{i}.LastChange</td>
</tr>
<tr class="odd">
<td>FronthaulAKMsAllowed</td>
<td>Device.WiFi.AccessPoint.{i}.Security.ModesSupported, .ModeEnabled
(W)</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>MACAddress</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.MACAddress</td>
</tr>
<tr class="even">
<td>LastDataDownlinkRate</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.LastDataDownlinkRate</td>
</tr>
<tr class="odd">
<td>LastDataUplinkRate</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.LastDataUplinkRate</td>
</tr>
<tr class="even">
<td>SignalStrength</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.SignalStrength</td>
</tr>
<tr class="odd">
<td>BytesSent</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.Stats.BytesSent</td>
</tr>
<tr class="even">
<td>BytesReceived</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.BytesReceived</td>
</tr>
<tr class="odd">
<td>PacketsSent</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.PacketsSent</td>
</tr>
<tr class="even">
<td>PacketsReceived</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.PacketsReceived</td>
</tr>
<tr class="odd">
<td>ErrorsSent</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.ErrorsSent</td>
</tr>
<tr class="even">
<td>ErrorsReceived</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.ErrorsReceived</td>
</tr>
<tr class="odd">
<td>RetransCount</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.RetransCount</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.MultiAPDevice.</td>
<td>(not part of Wi-Fi Data Elements)</td>
</tr>
<tr class="odd">
<td>ManufacturerOUI</td>
<td>Device.ManufacturerOUI</td>
</tr>
<tr class="even object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.MultiAPSTA.</td>
<td></td>
</tr>
<tr class="odd">
<td>AssociationTime</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.AssociationTime</td>
</tr>
<tr class="even">
<td>Noise</td>
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.Noise</td>
</tr>
<tr class="odd object">
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.MultiAPRadio.</td>
<td></td>
</tr>
<tr class="even command">
<td>FullScan()</td>
<td>Device.WiFi.Radio.{i}.FullScan()</td>
</tr>
<tr class="odd command">
<td>ChannelScan()</td>
<td>Device.WiFi.Radio.{i}.ChannelScan()</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<table
id="tbl:objects-and-parameters-in-wi-fi-data-elements-that-correspond-to-wi-fi-native">
<caption><div class="auto-hoverlink"
data-anchor="tbl:objects-and-parameters-in-wi-fi-data-elements-that-correspond-to-wi-fi-native">
Table 14: Objects and parameters in Wi-Fi Data Elements that correspond
to Wi-Fi Native
</div></caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header object">
<th>Wi-Fi Native</th>
<th>Wi-Fi Data Elements</th>
</tr>
</thead>
<tbody>
<tr class="odd object">
<td>Device.WiFi.Radio.{i}.</td>
<td></td>
</tr>
<tr class="even">
<td>Enable</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Enabled</td>
</tr>
<tr class="odd">
<td>MaxBitRate</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CapableOperatingClassProfile.{i}.</td>
</tr>
<tr class="even">
<td>SupportedFrequencyBands</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CapableOperatingClassProfile.{i}.</td>
</tr>
<tr class="odd">
<td>OperatingFrequencyBand</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CurrentOperatingClassProfile</td>
</tr>
<tr class="even">
<td>SupportedStandards</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.HTCapabilities,
.VHTCapabilities, .HECapabilities</td>
</tr>
<tr class="odd">
<td>PossibleChannels</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CapableOperatingClassProfile.{i}.</td>
</tr>
<tr class="even">
<td>ChannelsInUse</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CurrentOperatingClassProfile</td>
</tr>
<tr class="odd">
<td>Channel</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CurrentOperatingClassProfile</td>
</tr>
<tr class="even">
<td>FirmwareVersion</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.SoftwareVersion</td>
</tr>
<tr class="odd">
<td>SupportedOperatingChannelBandwidths</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CapableOperatingClassProfile.{i}.</td>
</tr>
<tr class="even">
<td>OperatingChannelBandwidth</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CurrentOperatingClassProfile</td>
</tr>
<tr class="odd">
<td>CurrentOperatingChannelBandwidth</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CurrentOperatingClassProfile</td>
</tr>
<tr class="even">
<td>TransmitPowerSupported</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.CapableOperatingClassProfile.{i}.MaxTxPower</td>
</tr>
<tr class="odd">
<td>TransmitPower</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.MultiAPDevice.Backhaul.CurrentOperatingClassProfile.{i}.TxPower</td>
</tr>
<tr class="even">
<td>RegulatoryDomain</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.CountryCode</td>
</tr>
<tr class="odd command">
<td>FullScan()</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.ChannelScanRequest()</td>
</tr>
<tr class="even command">
<td>ChannelScan()</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.ChannelScanRequest()</td>
</tr>
<tr class="odd object">
<td>Device.WiFi.Radio.{i}.Stats.</td>
<td></td>
</tr>
<tr class="even">
<td>Noise</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Noise</td>
</tr>
<tr class="odd object">
<td>Device.WiFi.SSID.{i}.</td>
<td></td>
</tr>
<tr class="even">
<td>Enable</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.Enabled</td>
</tr>
<tr class="odd">
<td>LastChange</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.LastChange</td>
</tr>
<tr class="even">
<td>BSSID</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.BSSID</td>
</tr>
<tr class="odd">
<td>SSID</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.SSID</td>
</tr>
<tr class="even object">
<td>Device.WiFi.AccessPoint.{i}.</td>
<td></td>
</tr>
<tr class="odd object">
<td>Device.WiFi.AccessPoint.{i}.Security.</td>
<td></td>
</tr>
<tr class="even">
<td>ModesSupported</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.Capabilities.AKMFrontHaul.{i}.</td>
</tr>
<tr class="odd">
<td>ModeEnabled</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.FronthaulAKMsAllowed</td>
</tr>
<tr class="even">
<td>WEPKey</td>
<td>SetSSID(), Input PassPhrase</td>
</tr>
<tr class="odd">
<td>SAEPassphrase</td>
<td>SetSSID(), Input PassPhrase</td>
</tr>
<tr class="even object">
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.</td>
<td></td>
</tr>
<tr class="odd">
<td>MACAddress</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.MACAddress</td>
</tr>
<tr class="even">
<td>LastDataDownlinkRate</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.LastDataDownlinkRate</td>
</tr>
<tr class="odd">
<td>LastDataUplinkRate</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.LastDataUplinkRate</td>
</tr>
<tr class="even">
<td>AssociationTime</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.LastConnectTime</td>
</tr>
<tr class="odd">
<td>SignalStrength</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.SignalStrength</td>
</tr>
<tr class="even">
<td>Noise</td>
<td>MultiAP:
Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.MultiAPSTA.Noise</td>
</tr>
<tr class="odd">
<td>Retransmissions</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.RetransCount</td>
</tr>
<tr class="even object">
<td>Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.Stats.</td>
<td></td>
</tr>
<tr class="odd">
<td>BytesSent</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.BytesSent</td>
</tr>
<tr class="even">
<td>BytesReceived</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.BytesReceived</td>
</tr>
<tr class="odd">
<td>PacketsSent</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.PacketsSent</td>
</tr>
<tr class="even">
<td>PacketsReceived</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.PacketsReceived</td>
</tr>
<tr class="odd">
<td>ErrorsSent</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.ErrorsSent</td>
</tr>
<tr class="even">
<td>ErrorsReceived</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.ErrorsReceived</td>
</tr>
<tr class="odd">
<td>RetransCount</td>
<td>Device.WiFi.DataElements.Network.Device.{i}.Radio.{i}.BSS.{i}.STA.{i}.RetransCount</td>
</tr>
</tbody>
</table>
<h2 class="appendix same-file appendix2 auto-hoverlink"
data-info="header"
id="sec:incorporating-wi-fi-data-elements-into-tr-181">III.9
Incorporating Wi-Fi Data Elements into TR-181</h2>
<p>This section discusses the Theory of Operation for representing the
Wi-Fi Alliance (WFA) Data Elements (DE) data model <span
class="citation" data-cites="DataElements"><a href="#ref-DataElements"
role="doc-biblioref">[3]</a></span> using the Device.WiFi.DataElements
object. The WFA DE specification provides a data model that can be used
to represent a single access point or a multi access point network.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:data-sources-for-wi-fi-data-elements">III.9.1 Data Sources for
Wi-Fi Data Elements</h3>
<p>The DataElements object may be populated by data from any of the
following sources:</p>
<ul>
<li>IEEE 1905.1 implementation</li>
<li>WFA DE Agent implementation (for information from the local device,
only)</li>
<li>WFA Multi Access Point Controller implementation</li>
<li>Network interface card device drivers (for information from the
local device, only)</li>
<li>Application (e.g., a topology database application) that gets data
from any of the above sources</li>
</ul>
<p>Whatever source is used to acquire the data, the data will be
represented according to the DE specification <span class="citation"
data-cites="DataElements"><a href="#ref-DataElements"
role="doc-biblioref">[3]</a></span>.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:mapping-new-wi-fi-data-elements-objects-and-parameters">III.9.2
Mapping new Wi-Fi Data Elements objects and parameters</h3>
<p>The YANG representation of WFA DE is considered the normative
reference to use for mapping purposes.</p>
<p>For the initial mapping (included in Release 13), the names of YANG
grouping nodes were used for the TR-181 object names, instead of the
names of the lists and containers that used these groupings. This was
done because the names of the groupings were consistent with TR-181
naming conventions and there was a one-to-one mapping of grouping to a
list or a container. For subsequent mapping, the names of containers and
lists will be used, and not groupings.</p>
<p>Wi-Fi Data Elements objects and parameters will be added according to
the following rules when WFA defines new nodes:</p>
<ul>
<li>YANG “container” and “list” nodes will be mapped to TR-181 “object”
elements within the DataElements object hierarchy.
<ul>
<li>If the YANG name of the container or list complies with TR-181
naming conventions specified in <span class="citation"
data-cites="TR-106"><a href="#ref-TR-106"
role="doc-biblioref">[60]</a></span> section 3.1, the exact name will be
used for the TR-181 object name. If the name does not comply, the
container or list cannot be automatically added, and an appropriate
compliant name will need to be identified.</li>
<li>The YANG container or list description can be used “as is” for an
automated mapping to the object description, but BBF may modify it
slightly for grammar preferences, to include bibliographic references,
or to add other useful information when the new object is included in a
published revision of TR-181. BBF may also use the grouping description
used by the container or list, if this is more descriptive.</li>
<li>If the YANG “config true” statement is present, the object will be
‘access=“readWrite”’. Otherwise, the object will be
‘access=“readOnly”’.</li>
<li>For all multi-instance objects, the TR-181 model will include a
parameter named “&lt;object name&gt;NumberOfEntries” of type unsignedInt
in the parent object.</li>
</ul></li>
<li>YANG “leaf” nodes will be mapped to TR-181 “parameter” elements
within the DataElements. hierarchy.
<ul>
<li>Put under the “object” that corresponds to the YANG container or
list</li>
<li>If the YANG name of the leaf complies with TR-181 naming conventions
specified in <span class="citation" data-cites="TR-106"><a
href="#ref-TR-106" role="doc-biblioref">[60]</a></span> section 3.1, the
exact name will be used for the TR-181 parameter name. If the name does
not comply, the leaf cannot be automatically added, and an appropriate
compliant name will need to be identified.</li>
<li>The YANG leaf description can be used “as is” for an automated
mapping to the parameter description, but BBF may modify it slightly for
grammar preferences, to include bibliographic references, or to add
other useful information when the new parameter is included in a
published revision of TR-181. Descriptions from DE-custom data type
definitions are also mapped into the parameter description.</li>
<li>“NumberOf&lt;grouping&gt;” leaf nodes are not mapped. See final
bullet of above mapping for containers and lists for inclusion of
“&lt;object name&gt;NumberOfEntries” parameter in the TR-181 data
model.</li>
<li>Data Types are mapped as follows:
<ul>
<li>zero-based-counter32 (and any DE-custom data types based on this,
such as bytecounter_t, packetcounter_t) to StatsCounter64 [Note that the
TR-181 convention is to use StatsCounter64 for all counters.]</li>
<li>uint8 (and any DE-custom data types based on this, such as rssi_t,
noisepower_t, operatingclass_t, channel_t, utilization_t) to unsignedInt
with range indicated by minInclusive and maxInclusive, if
identified</li>
<li>uint16 (and any DE-custom data types based on this, such as
reasoncode_t, statuscode_t, vlanid_t, pcp_t) to unsignedInt with range
indicated by minInclusive and maxInclusive, if identified</li>
<li>uint32 to unsignedInt with range indicated by minInclusive and
maxInclusive, if identified</li>
<li>gauge32 (and any DE-custom data types based on this, such as
phyrate_t, macrate_t) to unsignedInt</li>
<li>int8 (and any DE-custom data types based on this, such as txpower_t)
to int with ranges, if identified (e.g., int[-127:127] for
txpower_t)</li>
<li>string to string with length indicated by maxLength, if
identified</li>
<li>mac-address to MACAddress</li>
<li>binary to base64</li>
<li>boolean to boolean</li>
<li>ipv4-address to IPv4Address</li>
<li>ipv6-address to IPv6Address</li>
<li>additional mappings for data types not listed may be defined by WFA
or BBF</li>
</ul></li>
</ul></li>
<li>YANG “leaf-list” nodes are mapped like “leaf” elements for name and
description with syntax of “&lt;list/&gt;”. The data type is mapped as
described above for leaf nodes.</li>
</ul>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:use-cases">Appendix IV: Use Cases</h1>
<p>This section presents a number of management-related use cases that
correspond to typical Controller activities.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:create-a-wan-connection">IV.1 Create a WAN Connection</h2>
<p>The Controller can create the objects in the interface stack
bottom-up. Each time a new higher-layer object is created, the link with
the underlying interface object needs to be set. The layer 1 interface,
in this case a DSL.Channel and DSL.Line object, will already exist (A
Controller cannot create physical interfaces).</p>
<ol>
<li><p>The Controller creates a new ATM.Link object, a new Ethernet.Link
object, a new PPP.Interface object, and a new IP.Interface
object.</p></li>
<li><p>The LowerLayers parameter in an existing DSL.Channel object is
already linked to an existing DSL.Line object (A Controller cannot
configure this linkage).</p></li>
<li><p>The Controller configures the new objects including enabling the
objects and using the LowerLayers parameters as follows:</p>
<ul>
<li>Setting the LowerLayers parameter in the ATM.Link object to link it
to an existing DSL.Channel object that is configured with ATM
encapsulation (i.e., the read-only LinkEncapsulationUsed parameter in
the DSL.Channel object is set to one of the ATM-related enumeration
values).</li>
<li>Setting the LowerLayers parameter in the Ethernet.Link object to
link it to the ATM.Link object.</li>
<li>Setting the LowerLayers parameter in PPP.Interface object to link it
to the Ethernet.Link object.</li>
<li>Setting the LowerLayers parameter in IP.Interface object to link it
to the PPP.Interface object.</li>
</ul></li>
<li><p>The CPE updates the InterfaceStack table automatically. The stack
looks like this: IP.Interface → PPP.Interface → Ethernet.Link → ATM.Link
→ DSL.Channel → DSL.Line.</p></li>
<li><p>Note that the Controller might also want to update other related
objects, including the NAT object, the Routing.Router object, or various
QoS and Bridging tables. VLANs might also need to be created.</p></li>
</ol>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:modify-a-wan-connection">IV.2 Modify a WAN Connection</h2>
<p>In this use case, the Controller needs to modify an existing WAN
connection, in order to insert a new layer in the stack or to change
some portion of the interface stack. This is not the management WAN
connection. For the purposes of this example, the Controller is changing
the WAN connection in the <em><a href="#sec:create-a-wan-connection"
class="heading">Create a WAN Connection</a></em> use case to make use of
PTM rather than ATM-based aggregation.</p>
<ol>
<li><p>The Controller creates a new PTM.Link object.</p></li>
<li><p>The Controller configures the objects, including enabling the new
PTM.Link object and using the LowerLayers parameter as follows:</p>
<ul>
<li>Setting the LowerLayers parameter in the PTM.Link object to link it
to an existing DSL.Channel object that is configured with PTM
encapsulation (i.e., the read-only LinkEncapsulationUsed parameter in
the DSL.Channel object is set to one of the PTM-related enumeration
values).</li>
<li>Setting the LowerLayers parameter in the Ethernet.Link object to
refer to the PTM.Link object rather than the ATM.Link object.</li>
<li>Setting the LowerLayers parameter in the IP.Interface object to
refer to the Ethernet.Link object rather than the PPP.Interface
object.</li>
</ul></li>
<li><p>The CPE updates the InterfaceStack table automatically. The stack
looks like this: IP.Interface → Ethernet.Link → PTM.Link → DSL.Channel →
DSL.Line.</p></li>
<li><p>Note that the Controller might also want to update other related
objects, including the Bridging table. The Controller might also want to
delete the existing PPP.Interface and ATM.Link objects.</p></li>
</ol>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:delete-a-wan-connection">IV.3 Delete a WAN Connection</h2>
<p>Assume that we want to delete the WAN connection as it is configured
in the <em><a href="#sec:create-a-wan-connection" class="heading">Create
a WAN Connection</a></em> use case.</p>
<ol>
<li><p>The Controller deletes the IP.Interface object.</p></li>
<li><p>The Controller deletes the PPP.Interface object.</p></li>
<li><p>The Controller deletes the Ethernet.Link object.</p></li>
<li><p>As each of these objects is deleted, the InterfaceStack is
adjusted automatically by the CPE.</p></li>
<li><p>Any strong references to the deleted objects, e.g., in Device.QoS
classification rules, will automatically be set to empty
strings.</p></li>
</ol>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:discover-whether-the-device-is-a-gateway">IV.4 Discover whether
the Device is a Gateway</h2>
<p>Many operators want to determine if a particular device is a
“gateway” or not. The term “gateway”, however, is rather vague; usually
the operator wants to know one (or more) of the following things:</p>
<ol>
<li><p>If the device terminates the WAN connection(s).</p></li>
<li><p>If the device is responsible for providing DHCP addresses to the
other devices in the home.</p></li>
<li><p>If the device provides functionality such as NAT or routing
capabilities.</p></li>
</ol>
<p>In order to determine if the device terminates a WAN connection, the
Controller might look for an interface object with a technology that is
by definition WAN (such as DSL) or for a technology that could be a WAN
termination technology (such as Ethernet or MoCA).</p>
<p>In order to determine if the device is responsible for providing
addresses to other devices in the home, the Controller could check for
the existence of the DHCP Server object. The existence of the Host table
also indicates that the device is aware of Hosts, by whatever means
they’re addressed.</p>
<p>For CWMP managed CPEs, the existence of the ManageableDevice table
within the ManagementServer object also indicates that the device serves
as the DHCP server for the TR-069 managed device exchange defined in
TR-069 <span class="citation" data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span> Annex F, which is also often an
indication of “gateway” functionality.</p>
<p>In order to determine if the device provides functionality such as
NAT or a router, the Controller would check for the existence of an
enabled NAT or Routing.Router object.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:provide-extended-home-networking-topology-view">IV.5 Provide
Extended Home Networking Topology View</h2>
<p>Another use case is to determine the topology of the home network
behind the gateway. For a generic understanding of the network, the Host
table provides information such as the layer 2 and layer 3 interfaces
via which the Host is connected as well as DHCP lease information for
each connected Host.</p>
<p>If the operator is interested in UPnP devices in the home network,
the UPnP.Discovery tables (RootDevice, Device, and Service) provide that
information in addition to the Host table entries that correspond to a
particular UPnP Root Device, Device, or Service.</p>
<p>Finally for CWMP enabled CPEs, the ManageableDevice table within the
ManagementServer object provides information about the CWMP managed
devices that the CPE has learned about through the DHCP message exchange
defined in TR-069 <span class="citation" data-cites="TR-069"><a
href="#ref-TR-069" role="doc-biblioref">[58]</a></span> Annex F.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:determine-current-interfaces-configuration">IV.6 Determine
Current Interfaces Configuration</h2>
<p>One of the most fundamental Controller tasks is to determine the
general picture of the interfaces for a device so that it can understand
which WAN and LAN side connections exist.</p>
<p>In the Device:2 data model managed with CWMP, it would work this
way:</p>
<ol>
<li><p>The ACS would issue a GetParameterValues for the InterfaceStack
table. This table would provide a list of all the Interface connections.
The ACS could use this table to build up the general picture of the
Interfaces that are part of the current configuration.</p></li>
<li><p>If the ACS is interested in the specifics of an individual
interface, it can then go and issue GetParameterNames or
GetParameterValues for the interfaces of interest.</p></li>
</ol>
<p>If the CPE is managed by USP:</p>
<ol>
<li><p>The USP Controller would issue a Get request for the
InterfaceStack table. This table would provide a list of all the
Interface connections. The USP Controller could use this table to build
up the general picture of the Interfaces that are part of the current
configuration.</p></li>
<li><p>If the USP Controller is interested in the specifics of an
individual interface, it can then go and issue a filtered Get request
message for the interfaces of interest.</p></li>
</ol>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:create-a-wlan-connection">IV.7 Create a WLAN Connection</h2>
<p>In this use case the Controller creates a new WLAN connection. For
the purposes of illustration, in this example the Controller will create
a new SSID object to link to an existing radio (a new SSID object
implies a different SSID value than those used by existing WiFi
connections). The layer 1 interface, in this case a WiFi.Radio object,
will already exist (Controller can not create physical interfaces).</p>
<ol>
<li><p>The Controller creates a new WiFi.SSID object and
WiFi.AccessPoint object.</p></li>
<li><p>The Controller configures the new WiFi.SSID object, including
enabling it and setting the value of the LowerLayers parameter to
reference the device’s WiFi.Radio object.</p></li>
<li><p>The Controller adds the new WiFi.SSID object to the LowerLayers
parameter of an existing non-management Bridging.Bridge.{i}.Port object,
as appropriate.</p>
<div class="note">
<p>A non-management bridge port is indicated when its ManagementPort
parameter is set to false.</p>
</div></li>
<li><p>The Controller configures the new WiFi.AccessPoint object,
including enabling it and sets the value of its SSIDReference parameter
to reference the WiFi.SSID object.</p></li>
<li><p>The CPE updates the InterfaceStack table automatically.</p></li>
<li><p>Note that the Controller might also want to update other related
objects; also, if there were no appropriate existing bridge port to
which to connect the SSID, the Controller might need to create that
object as well.</p></li>
</ol>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:delete-a-wlan-connection">IV.8 Delete a WLAN Connection</h2>
<p>In this use case the Controller deletes the SSID created in the
<em><a href="#sec:create-a-wlan-connection" class="heading">Create a
WLAN Connection</a></em> use case.</p>
<ol>
<li><p>The Controller deletes the WiFi.SSID object and the
WiFi.AccessPoint object.</p></li>
<li><p>The CPE automatically updates the InterfaceStack table.</p></li>
<li><p>Note that if the radio has no other SSIDs configured, this would
operationally disable the wireless interface.</p></li>
</ol>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:configure-a-dhcp-client-and-server">IV.9 Configure a DHCP Client
and Server</h2>
<p>In this use case, the Controller wants to configure a DHCP server to
provide private 192.168.1.x IP addresses to most home network (HN)
devices, but to obtain IP addresses from the network for HN devices that
present an option 60 (vendor class ID) value that begins with
“ACME”.</p>
<p>The ACME devices are remotely managed, so the Controller will also
configure the DHCP clients on those devices and the DHCP server on the
gateway.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:dhcp-client-configuration-acme-devices">IV.9.1 DHCP Client
Configuration (ACME devices)</h3>
<p>The ACME devices are quite simple. Each has a single wired Ethernet
port and a single IP interface.</p>
<p>A DHCP Client object is created and configured as follows:</p>
<table>
<colgroup>
<col style="width: 63%" />
<col style="width: 36%" />
</colgroup>
<tbody>
<tr class="odd">
<td>DHCPv4.Client.1.Enable</td>
<td><em>true</em></td>
</tr>
<tr class="even">
<td>DHCPv4.Client.1.Interface</td>
<td>Device.IP.Interface.1</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td>DHCPv4.Client.1.SentOption.1.Enable</td>
<td><em>true</em></td>
</tr>
<tr class="odd">
<td>DHCPv4.Client.1.SentOption.1.Tag</td>
<td>60</td>
</tr>
<tr class="even">
<td>DHCPv4.Client.1.SentOption.1.Value</td>
<td>“ACME Widget” (as hexBinary)</td>
</tr>
</tbody>
</table>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:dhcp-server-configuration-gateway">IV.9.2 DHCP Server
Configuration (gateway)</h3>
<p>The gateway is also relatively simple. Its downstream IP interface is
IP.Interface.1.</p>
<p>A DHCP Server object is created and configured as follows:</p>
<table>
<colgroup>
<col style="width: 63%" />
<col style="width: 36%" />
</colgroup>
<tbody>
<tr class="odd">
<td>DHCPv4.Server.Enable</td>
<td><em>true</em></td>
</tr>
<tr class="even">
<td>DHCPv4.Relay.Enable</td>
<td><em>true</em></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td>DHCPv4.Relay.Forwarding.1.Enable</td>
<td><em>true</em></td>
</tr>
<tr class="odd">
<td>DHCPv4.Relay.Forwarding.1.Interface</td>
<td>Device.IP.Interface.1</td>
</tr>
<tr class="even">
<td>DHCPv4.Relay.Forwarding.1.VendorClassID</td>
<td>“ACME”</td>
</tr>
<tr class="odd">
<td>DHCPv4.Relay.Forwarding.1.VendorClassIDMode</td>
<td>“Prefix”</td>
</tr>
<tr class="even">
<td>DHCPv4.Relay.Forwarding.1.LocallyServed</td>
<td><em>false</em></td>
</tr>
<tr class="odd">
<td>DHCPv4.Relay.Forwarding.1.DHCPServerIPAddress</td>
<td>1.2.3.4</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>DHCPv4.Server.Pool.1.Enable</td>
<td><em>true</em></td>
</tr>
<tr class="even">
<td>DHCPv4.Server.Pool.1.Interface</td>
<td>Device.IP.Interface.1</td>
</tr>
<tr class="odd">
<td>DHCPv4.Server.Pool.1.MinAddress</td>
<td>192.168.1.64</td>
</tr>
<tr class="even">
<td>DHCPv4.Server.Pool.1.MaxAddress</td>
<td>192.168.1.254</td>
</tr>
<tr class="odd">
<td>DHCPv4.Server.Pool.1.ReservedAddresses</td>
<td>192.168.1.128, 192.168.1.129</td>
</tr>
<tr class="even">
<td>DHCPv4.Server.Pool.1.SubnetMask</td>
<td>255.255.255.0</td>
</tr>
</tbody>
</table>
<p>If a DHCP request includes an option 60 value that begins with
“ACME”, the request is forwarded to the DHCP server at 1.2.3.4. All
other requests are served locally from the pool 192.168.1.64 -
192.168.1.254 (excluding 192.168.1.128 and 192.168.1.129).</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:reconfigure-an-existing-interface">IV.10 Reconfigure an Existing
Interface</h2>
<p>The Controller might want to reconfigure an existing Interface to
provide alternate routing functionality. For the purposes of this
illustration, an existing Ethernet Interface that is configured for the
downstream-side will be reconfigured as an upstream Ethernet Interface
replacing an existing DSL Interface.</p>
<p>The current configuration on the upstream side looks like:</p>
<p>IP.Interface.1 → Ethernet.Link.1 → ATM.Link.1 → DSL.Channel.1 →
DSL.Line.1</p>
<p>The current configuration on the downstream side contains:</p>
<ul>
<li>IP.Interface.2 → Ethernet.Link.2 → Bridging.Bridge.1.Port.1
(ManagementPort=true)</li>
<li>Bridging.Bridge.1.Port.1 LowerLayers parameter has two references:
<ul>
<li>Bridging.Bridge.1.Port.2</li>
<li>Bridging.Bridge.1.Port.3</li>
</ul></li>
<li>Bridging.Bridge.1.Port.2 LowerLayers parameter has a reference of
Ethernet.Interface.1</li>
<li>Bridging.Bridge.1.Port.3 LowerLayers parameter has a reference of
Ethernet.Interface.2</li>
</ul>
<p>The Controller would follow these steps to reconfigure the
Ethernet.Interface:</p>
<ol>
<li><p>Determine which Ethernet.Interface is to be reconfigured. For the
purpose of this illustration we will use Ethernet.Interface.1.</p></li>
<li><p>Retrieve the InterfaceStack.</p></li>
<li><p>Find the higher-layer Interface of Ethernet.Interface.1 by
finding the InterfaceStack entry that has Ethernet.Interface.1 as the
LowerLayer. The HigherLayer parameter of the identified InterfaceStack
instance will be the Interface we are interested in, for the purpose of
this illustration we found Bridging.Bridge.1.Port.2.</p></li>
<li><p>Remove the Bridging.Bridge.1.Port.2. This removal will
automatically clean up the InterfaceStack instances that connect
Bridging.Bridge.1.Port.1 → Bridging.Bridge.1.Port.2 and
Bridging.Bridge.1.Port.2 → Ethernet.Interface.1. Also, it will remove
Bridging.Bridge.1.Port.2 from the LowerLayers parameter contained within
Bridging.Bridge.1.Port.1.</p></li>
<li><p>Find the DSL.Line reference within the LowerLayer parameter of
the InterfaceStack.</p></li>
<li><p>Follow the InterfaceStack up to the Ethernet.Link reference by
looking at the HigherLayer parameter in the current InterfaceStack
instance and then finding the InterfaceStack instance containing that
Interface within the LowerLayer parameter until the HigherLayer
reference is the Ethernet.Link Interface. For the purpose of this
illustration, we found Ethernet.Link.1.</p></li>
<li><p>Reconfigure the LowerLayers parameter of Ethernet.Link.1 such
that its value is “Device.Ethernet.Interface.1” instead of
“Device.ATM.Link.1”.</p></li>
<li><p>The CPE updates the InterfaceStack table and sets the Upstream
parameter to true on the Ethernet.Interface.1 instance
automatically.</p></li>
<li><p>Note that the Controller might also want to update other related
objects, including the NAT object, the Routing.Router object, or various
QoS and Bridging tables. VLANs might also need to be created.</p></li>
</ol>
<p>After the CWMP Session is completed and the CPE commits the
configuration, the upstream side will look like:</p>
<ul>
<li>IP.Interface.1 → Ethernet.Link.1 → Ethernet.Interface.1</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:backup-restore-using-vendor-configuration-files">IV.11 Backup /
Restore Using Vendor Configuration Files</h2>
<div class="note">
<p>This use case is written from a CWMP perspective, but would also
apply to USP.</p>
</div>
<p>In certain troubleshooting scenarios, a Device that has its user
configuration modified in a manner that cannot be easily restored by
setting individual parameters can have the Device’s user configuration
restored by applying a previous user configuration to the Device. When
performing a backup and restoration of configuration files, the
Controller can correlate the instance number of the VendorConfigFile
retrieved during backup (Upload RPC) operation with the URL of the
restore (Download) operation. The following sequence diagrams depict a
backup and restoration scenario that correlates these attributes of a
configuration file.</p>
<p><a href="#fig:device-user-configuration-backup" class="figure">Figure
34</a> depicts a message sequence scenario where a configuration is
<strong>backed up</strong> from the Device to the ACS using CWMP.</p>
<figure id="fig:device-user-configuration-backup">
<img src="images/device-user-configuration-backup.png"
id="img:device-user-configuration-backup"
alt="Device User Configuration Backup" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device-user-configuration-backup">
Figure 34:
Device User Configuration Backup
</div></figcaption>
</figure>
<p>Step 1: Retrieve instances and values of VendorConfigFile and
DeviceInfo:</p>
<p>The parameter values of the DeviceInfo and VendorConfigFile provide
the information necessary to restore a Device to a point in time.
Minimally the information needed to create a snapshot includes:</p>
<ul>
<li>Device.DeviceInfo.ManufacturerOUI</li>
<li>Device.DeviceInfo.ProductClass</li>
<li>Device.DeviceInfo.SerialNumber</li>
<li>Device.DeviceInfo.HardwareVersion</li>
<li>Device.DeviceInfo.SoftwareVersion</li>
<li>Device.DeviceInfo.VendorConfigFile.{i}. (Entire object)</li>
<li>Device.SoftwareModules.DeploymentUnit.{i}.UUID</li>
<li>Device.SoftwareModules.DeploymentUnit.{i}.Alias</li>
<li>Device.SoftwareModules.DeploymentUnit.{i}.Name</li>
<li>Device.SoftwareModules.DeploymentUnit.{i}.Version</li>
<li>Device.SoftwareModules.DeploymentUnit.{i}.VendorConfigList</li>
</ul>
<div class="note">
<p>Only instances of DeploymentUnit with VendorConfigFile instances with
the UseForBackupRestore parameter set to the value true as items in the
instance’s VendorConfigList parameter will need to be backed up.</p>
</div>
<p>This information is necessary as restoring Device configurations with
different hardware versions, software versions or deployment units that
existed at the time of the backup can result in a failed restoration
attempt or a corrupted Device.</p>
<p>Step 1a: The parameters returned by the Device in the
GetParameterValuesResponse are used to create a “snapshot” of the
Device. The definition of what is needed to create a snapshot and how a
snapshot is administered in an ACS is implementation specific.</p>
<p>Step 2: Backup each configuration file defined by the Device in the
VendorConfigFile table with the UseForBackupRestore parameter set to the
value “true” using the Upload RPC with a File Type “3 Vendor
Configuration File x” where “x” is the instance number of the file in
the VendorConfigFile table.</p>
<div class="note">
<p>An ACS can also have additional information, outside step 1, to
discern which configuration files are necessary to restore a Device, as
well as the order in which the configuration files need to be restored
where dependencies exist between the configuration files within the
potential snapshot.</p>
</div>
<p>Step 3, 3a: Upon completion of the transfer for each file via the
Transfer Complete event, the ACS will update the state of the snapshot.
The lifecycle and state management of the snapshot by an ACS is
implementation specific.</p>
<p>At this point a Device snapshot exists that can be used to restore a
Device to this point in time.</p>
<p><a href="#fig:device-user-configuration-restore"
class="figure">Figure 35</a> depicts a message sequence scenario where a
configuration is <strong>restored</strong> to the Device from the
ACS</p>
<figure id="fig:device-user-configuration-restore">
<img src="images/device-user-configuration-restore.png"
id="img:device-user-configuration-restore"
alt="Device User Configuration Restore" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device-user-configuration-restore">
Figure 35:
Device User Configuration Restore
</div></figcaption>
</figure>
<p>Step 1: For each user configuration file in the snapshot, retrieve
the information for the location of the configuration file.</p>
<p>Step 2, 2a: Download the configuration using the File Type “3 Vendor
Configuration File” and the location of the configuration file.</p>
<div class="note">
<p>Other elements (e.g., credentials) might be required but are outside
the scope of this sequence. When downloaded, a VendorConfigFile instance
with the same value for Name or Alias (if supported and present) will
update the corresponding instance in the VendorConfigFile table and will
not create a new entry within the table.</p>
</div>
<p>Step 3, 3a: The Device performs the download of each configuration
file and responds with a Transfer Complete event.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header"
id="sec:ipv6-data-modeling-theory-of-operation">Appendix V: IPv6 Data
Modeling Theory of Operation</h1>
<p>The Device:2 data model supports IPv6 (introduced in Amendment 2) via
various IPv6-specific objects and parameters that are designed to be
used with other IP version neutral and IPv4-specific objects and
parameters. This Appendix briefly reviews all the relevant objects and
parameters, and then presents some example configurations.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipv6-overview">V.1 IPv6 Overview</h2>
<p>The IETF published RFC 2460 <span class="citation"
data-cites="RFC2460"><a href="#ref-RFC2460"
role="doc-biblioref">[14]</a></span>, Internet Protocol, <em>Version 6
(IPv6) Specification</em> in 1998. Since then, it has published a
variety of RFCs to create a suite of protocols (and extensions to
protocols) for operating, managing, and configuring IPv6 networks and
devices. In addition there are RFCs that document transition mechanisms
(to transition from IPv4 to IPv6) and best current practices (that
describe which RFCs to implement depending on what a device is or needs
to do).</p>
<p>The Broadband Forum has published several Technical Reports
describing IPv6 architectures and device requirements. Specifically,
TR-124 Issue 2 <span class="citation" data-cites="TR-124"><a
href="#ref-TR-124" role="doc-biblioref">[61]</a></span> includes IPv6
requirements for Residential Gateways (RGs), TR-177 <span
class="citation" data-cites="TR-177"><a href="#ref-TR-177"
role="doc-biblioref">[63]</a></span> describes migration to IPv6 in the
context of TR-101 <span class="citation" data-cites="TR-101"><a
href="#ref-TR-101" role="doc-biblioref">[59]</a></span>, and TR-187
<span class="citation" data-cites="TR-187"><a href="#ref-TR-187"
role="doc-biblioref">[64]</a></span> describes an architecture for IPv6
for PPP Broadband Access. The Device:2 IPv6 Data Model is intended to
ensure that TR-069 <span class="citation" data-cites="TR-069"><a
href="#ref-TR-069" role="doc-biblioref">[58]</a></span> or USP <span
class="citation" data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span> managed End Devices, RGs, and other
Network Infrastructure Devices can be managed and configured, consistent
with the requirements listed in these documents.</p>
<p>The basic elements of IPv6 data modeling involve information on IPv6
capabilities, and enabling those capabilities on devices and device
interfaces (see <em><a href="#sec:enabling-ipv6"
class="heading">Enabling IPv6</a></em>), configuring addresses, prefixes
, and configuration protocols on upstream and downstream interfaces (see
<em><a href="#sec:configuring-upstream-ip-interfaces"
class="heading">Configuring Upstream IP Interfaces</a></em> and <em><a
href="#sec:configuring-downstream-ip-interfaces"
class="heading">Configuring Downstream IP Interfaces</a></em>),
interacting with other devices on the Local Area Network (LAN) (see
<em><a href="#sec:device-interactions" class="heading">Device
Interactions</a></em>), and configuring IPv6 routing and forwarding
information (see *[Configuring IPv6 Routing and Forwarding*]).</p>
<p>Configuration protocols include Neighbor Discovery (ND; RFC 4861
<span class="citation" data-cites="RFC4861"><a href="#ref-RFC4861"
role="doc-biblioref">[36]</a></span>) and DHCPv6 (RFC 3315 <span
class="citation" data-cites="RFC3315"><a href="#ref-RFC3315"
role="doc-biblioref">[23]</a></span>). Neighbor Discovery includes
several messages that are important to configuration, including Router
Solicitation (RS) [sent by devices looking for routers], Router
Advertisement (RA) [sent by routers to other devices on the LAN],
Neighbor Solicitation (NS) [used to identify if any other device on the
LAN is using the same IPv6 address, and used to see if previously
detected devices are still present; the latter is called Neighbor
Unreachability Detection (NUD)], and Neighbor Advertisement (NA) [used
to respond to a NS sent to one of the device’s IPv6 addresses]. These
messages are central to the stateless address autoconfiguration (SLAAC)
mechanism described in RFC 4862 <span class="citation"
data-cites="RFC4862"><a href="#ref-RFC4862"
role="doc-biblioref">[37]</a></span>. SLAAC is expected to be the
primary means of IPv6 address configuration for devices inside a home
network. RFC 4191 <span class="citation" data-cites="RFC4191"><a
href="#ref-RFC4191" role="doc-biblioref">[29]</a></span> extended the RA
message to support a RouteInformation option. RFC 6106 <span
class="citation" data-cites="RFC6106"><a href="#ref-RFC6106"
role="doc-biblioref">[43]</a></span> extended the RA message to support
sending Recursive DNS Servers (RDNSS) information for DNS
configuration.</p>
<p>DHCPv6 can also be used for IPv6 address provisioning, through its
IA_NA option. DHCPv6 was extended by RFC 3633 <span class="citation"
data-cites="RFC3633"><a href="#ref-RFC3633"
role="doc-biblioref">[25]</a></span> to provide the IA_PD option for
delegating IPv6 prefixes to routers (that the routers can then use to
provide IPv6 addresses to other devices on the LAN, or to further
sub-delegate to other routers inside the LAN). Both IA_NA and IA_PD
require the DHCPv6 server to maintain state for these assignments (since
they have lifetimes, can expire, and require renewal). DHCPv6 can also
supply a variety of stateless configuration options, including recursive
DNS server information. RGs can have both DHCPv6 client and server, and
it may be desirable for some of the stateless options to be passed
through from the client to the server.</p>
<p>Interfaces that support IPv6 will have more than one IPv6 address.
IPv6 interfaces are always required to have a link-local address
(described in RFC 4862 <span class="citation" data-cites="RFC4862"><a
href="#ref-RFC4862" role="doc-biblioref">[37]</a></span>). Other IPv6
addresses may be acquired through SLAAC, DHCPv6 IA_NA, or they may be
statically configured. Routers may acquire prefixes (for use with
address assignment in the LAN) from DHCPv6 IA_PD, static configuration,
or by generating their own Unique Local Address (ULA) prefixes from a
self-generated ULA Global ID (RFC 4193 <span class="citation"
data-cites="RFC4193"><a href="#ref-RFC4193"
role="doc-biblioref">[30]</a></span>).</p>
<p>Because of the various IPv6 addresses that devices can have,
maintaining good routing table and IPv6 forwarding information is
critical. Route information can be obtained from received RA messages
(both by noting that the sending device is a router, and from the
RouteInformation option) as well as other protocols.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:data-model-overview">V.2 Data Model Overview</h2>
<p>This Theory of Operations focuses on data modeling for the purpose of
establishing upstream and downstream connectivity for TR-069 <span
class="citation" data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span> or USP <span class="citation"
data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span> enabled devices, and for
configuration of IPv6-related parameters. This is not an exhaustive
description of data model changes made in support of IPv6, and only
intends to describe the working of elements that are not readily
obvious.</p>
<p>The following tables are key to IPv6 data modeling:</p>
<div class="emphasis">
<ul>
<li>IP
<ul>
<li>IP.Interface
<ul>
<li>IP.Interface.IPv6Address</li>
<li>IP.Interface.IPv6Prefix</li>
</ul></li>
</ul></li>
<li>PPP.Interface</li>
<li>Routing.Router
<ul>
<li>Routing.Router.IPv6Forwarding</li>
<li>Routing.RouteInformation.InterfaceSetting</li>
</ul></li>
<li>NeighborDiscovery.InterfaceSetting</li>
<li>RouterAdvertisement.InterfaceSetting
<ul>
<li>RouterAdvertisement.InterfaceSetting.Option</li>
</ul></li>
<li>Hosts.Host</li>
<li>DHCPv6</li>
<li>DHCPv6.Client
<ul>
<li>DHCPv6.Client.Server</li>
<li>DHCPv6.Client.SentOption</li>
<li>DHCPv6.Client.ReceivedOption</li>
</ul></li>
<li>DHCPv6.Server
<ul>
<li>DHCPv6.Server.Pool
<ul>
<li>DHCPv6.Server.Pool.Client
<ul>
<li>DHCPv6.Server.Pool.Client.IPv6Address</li>
<li>DHCPv6.Server.Pool.Client.IPv6Prefix</li>
<li>DHCPv6.Server.Pool.Client.Option</li>
</ul></li>
<li>DHCPv6.Server.Pool.Option</li>
</ul></li>
</ul></li>
</ul>
</div>
<p>Note that the following tables have separate theories of operation,
and are not described again here:</p>
<div class="emphasis">
<ul>
<li>IPv6rd.InterfaceSetting</li>
<li>DSLite.InterfaceSetting</li>
</ul>
</div>
<p><em>Firewall</em> includes some IPv6 elements that are not described,
since it does not interact with tables other than an association with
<em>IP.Interface</em>. As such, its IPv6 usage is considered
straightforward, and explanation is considered unnecessary.</p>
<p>Similarly, <em>DNS.Client.Server</em> is not described.</p>
<p>Use of DHCPv6 elements of <em>Bridging.Filter</em> are also not
described, as there is no conceptual difference between how they are
used and how DHCPv4 elements are used.</p>
<p><a href="#fig:relationship-of-protocols-to-data-model"
class="figure">Figure 36</a> shows the relationship of IPv6
configuration messages to devices and the tables used to configure the
protocol messages and store the responses.</p>
<figure id="fig:relationship-of-protocols-to-data-model">
<img src="images/relationship-of-protocols-to-data-model.png"
id="img:relationship-of-protocols-to-data-model"
alt="Relationship of Protocols to Data Model" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:relationship-of-protocols-to-data-model">
Figure 36:
Relationship of Protocols to Data Model
</div></figcaption>
</figure>
<p><a href="#fig:internal-relationships-of-ipv6-addresses-and-prefixes"
class="figure">Figure 37</a> shows internal relationships of parts of
the data model involved in IPv6 addresses and IPv6 prefixes. The
following sections describe in greater detail how these various tables
are populated.</p>
<figure id="fig:internal-relationships-of-ipv6-addresses-and-prefixes">
<img
src="images/internal-relationships-of-ipv6-addresses-and-prefixes.png"
id="img:internal-relationships-of-ipv6-addresses-and-prefixes"
alt="Internal Relationships of IPv6 Addresses and Prefixes" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:internal-relationships-of-ipv6-addresses-and-prefixes">
Figure 37:
Internal Relationships of IPv6 Addresses and Prefixes
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:enabling-ipv6">V.3 Enabling IPv6</h2>
<p>The <em>IP IPv6Capable</em> parameter indicates whether the device
supports IPv6. <em>IP.IPv6Enable</em> controls enabling IPv6 is on the
device. IPv6 can only be enabled on a device with
<em>IPv6Capable</em>=<em>true</em>. <em>IPv6Status</em> indicates
whether IPv6 has been enabled on the device.</p>
<p>Per TR-124 Issue 2 <span class="citation" data-cites="TR-124"><a
href="#ref-TR-124" role="doc-biblioref">[61]</a></span>, the upstream
interface can be configured to establish an IPv6 connection either over
PPP (PPPoA or PPPoE) or directly over Ethernet. Both mechanisms require
an <em>IP.Interface</em> instance with <em>IPv6Enable</em> set to
<em>true</em>. When using PPP, a <em>PPP.Interface</em> instance must
have <em>IPv6CPEnable</em> set to <em>true</em> (which can only occur if
<em>PPP.SupportedNCPs</em> includes <em>IPv6CP</em> in its list of
Network Control Protocols (NCPs)).</p>
<p>Enabling IPv6 on specific downstream or upstream interfaces requires
that <em>IP.Interface</em> instances have <em>IPv6Enable</em> set to
<em>true</em>.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:configuring-upstream-ip-interfaces">V.4 Configuring Upstream IP
Interfaces</h2>
<p>An upstream IP Interface is an <em>IP.Interface</em> that is
associated with an <em>Upstream=true</em> physical interface, via the
<em>InterfaceStack</em>. Every <em>Upstream=true</em> physical interface
that will be used to support routed IPv6 traffic will have an upstream
IP Interface for each distinct upstream IPv6 connection that is
established over that physical interface.</p>
<p>Upstream IPv6 connections can be established on an upstream IP
Interface either through internal logic (for well-known addresses and
the link-local address), static configuration, or dynamically through
received Router Advertisement (RA) messages or DHCPv6 client behaviors.
Received RA and DHCPv6 messages can contain configuration information
for more than just establishing the upstream IP interface. The data
model allows for the storage of additional configuration information
sent by one of these protocols.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:configuration-messages-sent-out-the-upstream-ip-interface">V.4.1
Configuration Messages Sent Out the Upstream IP Interface</h3>
<p>The device can be configured to send Router Solicitation and DHCPv6
client messages out an upstream IP interface.</p>
<ul>
<li><p>A device that is configured to send Router Solicitation messages
out an upstream IP interface will have a
<em>NeighborDiscovery.InterfaceSetting</em> instance whose
<em>Interface</em> is the related upstream <em>IP.Interface</em>, and
with <em>RSEnable=true</em>.</p></li>
<li><p>A device that is configured to send DHCPv6 client requests out an
upstream IP interface will have a <em>DHCPv6.Client</em> instance whose
<em>Interface</em> is the related upstream <em>IP.Interface</em>, and
with <em>Enable=true</em>. <em>RequestAddresses</em> indicates whether
IA_NA is to be requested, <em>RequestPrefixes</em> indicates whether
IA_PD is to be requested, and <em>RequestedOptions</em> identifies which
other options are to be requested. <em>DHCPv6.Client.Server</em>,
<em>DHCPv6.Client.SentOption</em>, and
<em>DHCPv6.Client.ReceivedOption</em> are populated as appropriate, as
described in the data model.</p></li>
</ul>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:ipv6-prefixes">V.4.2 IPv6 Prefixes</h3>
<p><em>IP.Interface.IPv6Prefix</em> instances on upstream IP interfaces
are used to store all prefixes received in RA messages on the interface
(with <em>Origin</em> of <em>RouterAdvertisement</em>), prefixes
delegated by DHCPv6 IA_PD (with <em>Origin</em> of
<em>PrefixDelegation</em>), statically configured IPv6 prefixes (but
only the ones that are intended to be sub-divided for use on downstream
interfaces with sent RA messages or DHCPv6 server functions), and
<em>WellKnown</em> prefixes, as appropriate (such as certain well-known
multicast prefixes, where the device joins the multicast group for that
prefix on that interface).</p>
<p><em>RouterAdvertisement</em> prefixes with <em>Autonomous=true</em>
are used to create an <em>IPv6Address</em> instance on the interface,
and can be used to create routes in
<em>Routing.Router.IPv6Forwarding.</em> <em>RouterAdvertisement</em>
prefixes with <em>OnLink=true</em> can also be used to create routes in
<em>Routing.Router.IPv6Forwarding.</em> Prefixes received in a RA
RouteInformation option are not stored with the interface, but rather in
an instance of <em>Routing.RouteInformation.InterfaceSetting.</em></p>
<p><em>PrefixDelegation</em> prefixes and <em>Static</em> prefixes are
not directly used on the upstream IP interface. They are prefixes that
are intended to be sub-divided for use on the device’s downstream
interfaces, either by the DHCPv6 server for IA_NA or IA_PD, sent in RA
messages (as on-link and/or autonomous prefixes), or used to self-assign
addresses to other interfaces on the device. Non IA_PD prefixes received
in DHCPv6 options are not stored with the upstream IP interface.
Prefixes for static routes are entered directly into
<em>Routing.Router.IPv6Forwarding</em> and do not need to also have
upstream IP interface <em>IPv6Prefix</em> entries.</p>
<p>It is often desirable to configure information about delegated
prefixes before they have been delegated (for example, that a particular
/64 of that prefix is to be used on the downstream interface for address
assignment). In order to allow for the referencing of
not-yet-existing-but-expected delegated prefixes, an
<em>Origin=Static</em> <em>IPv6Prefix</em> entry is created of
<em>Type=PrefixDelegation</em>. When a device receives a delegated
prefix, it is expected to first look for such Static entries and
populate them with the delegated prefix information, instead of creating
a new <em>IPv6Prefix</em> instance of <em>Origin=PrefixDelegation</em>.
How these references are configured on downstream interfaces is
discussed in <em><a href="#sec:ipv6-prefixes" class="heading">IPv6
Prefixes</a></em>.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:ipv6-addresses">V.4.3 IPv6 Addresses</h3>
<p>IPv6 link-local addresses on an upstream IP Interface are generally
internally generated, although they can be configured statically, when
necessary (when the internal default link-local address fails Duplicate
Address Detection (DAD)). A properly configured upstream
<em>IP.Interface</em> instance will have a
<em>IP.Interface.IPv6Address</em> instance for its link-local address.
This will have <em>Origin</em> of <em>AutoConfigured</em> (if internally
generated per RFC 4862 <span class="citation" data-cites="RFC4862"><a
href="#ref-RFC4862" role="doc-biblioref">[37]</a></span>) or
<em>Static</em> (if statically configured by some management
entity).</p>
<p>IPv6 addresses that are created via stateless address
autoconfiguration (SLAAC), as defined in RFC 4862 (from received RA
messages that contain prefix(es) with <em>Autonomous=true</em>) cause
the device to create a <em>IP.Interface.IPv6Address</em> instance with
<em>Origin</em> of <em>AutoConfigured.</em> IPv6 addresses assigned via
DHCPv6 IA_NA cause the device to create a
<em>IP.Interface.IPv6Address</em> instance with <em>Origin</em> of
<em>DHCPv6</em>. Statically created IPv6 addresses will have
<em>Origin</em> of <em>Static</em>. If any of these addresses are Global
Unicast Addresses (GUA), they can be used to originate and terminate
traffic to/from either the downstream or the upstream, independent of
which physical interface they are associated with.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:configuring-downstream-ip-interfaces">V.5 Configuring Downstream
IP Interfaces</h2>
<p>A downstream IP Interface is a <em>IP.Interface</em> that is
associated with an <em>Upstream=false</em> physical interface, via the
<em>InterfaceStack</em>. As noted in the definition of the
<em>Upstream</em> parameter, “For an End Device, <em>Upstream</em> will
be <em>true</em> for all interfaces.” This means that only RGs or
(possibly) other Network Infrastructure Devices will have downstream IP
Interfaces.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:ipv6-prefixes-1">V.5.1 IPv6 Prefixes</h3>
<p><em>IP.Interface.IPv6Prefix</em> instances on downstream IP
interfaces are used to store all prefixes that are either on-link for
that downstream IP interface, or can be delegated to or used by routers
connected to that downstream IP interface. On-link prefixes include
prefixes that are included in Router Advertisement (RA) messages for
SLAAC (Autonomous prefixes), those used as DHCPv6 address pools, and
those used for static addressing by End Devices that connect to that
downstream IP interface.</p>
<p>The device can have a Unique Local Address (ULA) /48 prefix defined
in <em>IP.ULAPrefix</em>. In general, the device will generate its own
ULA /48 prefix, although this value could be configured directly by the
user or through TR-069 <span class="citation" data-cites="TR-069"><a
href="#ref-TR-069" role="doc-biblioref">[58]</a></span> or USP <span
class="citation" data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span>. If ULA addressing is to be
supported on a downstream interface, then
<em>IP.Interface.ULAEnable</em> must be <em>true</em>. The ULA /48
prefix can be associated with any downstream IP interface, and can be
sub-divided to provide ULA prefixes on multiple downstream IP interfaces
(by assigning longer prefixes from the ULA /48 prefix to these
downstream IP interfaces). When the device creates a ULA prefix on a
downstream interface, it creates an <em>IPv6Prefix</em> instance with
<em>Origin=AutoConfigured</em>.</p>
<p>RGs that are configured to act as routers need to know which prefixes
to include in their sent Router Advertisement (RA) messages and to be
used in DHCPv6 server pools. These prefixes need to be associated with
the downstream IP interface for those
<em>RouterAdvertisement.InterfaceSetting</em> and
<em>DHCPv6.Server.Pool</em> instances. These prefixes can be statically
configured on the downstream IP interface, or they can be automatically
generated from prefixes on an upstream IP interface with <em>Origin</em>
of <em>PrefixDelegation</em> or <em>Static</em>, or they can be
generated from the ULA /48 prefix (as described in the previous
paragraph). Prefixes that are automatically (by internal code) derived
from prefixes on an upstream IP interface with <em>Origin</em> of
<em>PrefixDelegation</em> or <em>Static</em>, will point to that
upstream IP interface in <em>ParentPrefix</em> and have <em>Origin</em>
of <em>Child</em>.</p>
<p>It is often desirable to pre-configure information about prefixes on
a downstream IP interface that are to be derived from delegated (on the
upstream interface) prefixes. This will need to be done before that
prefix has been delegated and without knowledge of what that prefix will
be. A derived-from-not-yet-existing-but-expected-delegated-prefix
downstream IP interface <em>IPv6Prefix</em> entry will have
<em>Origin=Static</em> and <em>Type=Child</em>, and will have
<em>ParentPrefix</em> pointing to an upstream IP interface
<em>IPv6Prefix</em> instance (that is <em>Origin=Static</em> and
<em>Type= PrefixDelegation</em>). When a device receives a delegated
prefix and populates the upstream IP interface IPv6Prefix instance, and
needs to generate downstream IP interface prefixes from that delegated
prefix, it is expected to first look for such <em>Static</em>
<em>Child</em> entries and populate them with the derived prefix
information, instead of creating a new <em>IPv6Prefix</em> instance of
<em>Origin=Child</em>. How the referenced parent prefixes are configured
on upstream IP interfaces is discussed in <em><a
href="#sec:ipv6-prefixes" class="heading">IPv6 Prefixes</a></em>.</p>
<p>If the device receives RA messages on downstream IP interfaces,
autonomous and on-link prefixes in such received RA message Prefix
Information options can also be recorded in
<em>IP.Interface.IPv6Prefix</em>. At this time, there is no additional
guidance for using the information in these RA messages received on
downstream interfaces. They are simply stored, to provide information
about other devices in the home network.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:ipv6-addresses-1">V.5.2 IPv6 Addresses</h3>
<p>As with the upstream IP interfaces, IPv6 link-local addresses on a
downstream IP interface are generally internally generated, although
they can be configured statically, when necessary (when the internal
default link-local address fails Duplicate Address Detection (DAD)). A
properly configured downstream IPv6 connection will have a
<em>IP.Interface</em> instance with a <em>IP.Interface.IPv6Address</em>
instance for its link-local address. This will have <em>Origin</em> of
<em>AutoConfigured</em> (if internally generated per RFC 4862 <span
class="citation" data-cites="RFC4862"><a href="#ref-RFC4862"
role="doc-biblioref">[37]</a></span>) or <em>Static</em> (if statically
configured by some management entity).</p>
<p>If the device has a Unique Local Address (ULA) prefix that it is
advertising and/or sub-delegating to devices on the LAN, then it needs
to have at least one address from this prefix assigned to downstream IP
interfaces that expect to support usage of the ULA.</p>
<p>If the device did not receive an address on its upstream IP interface
(from DHCPv6 or SLAAC), but it was delegated a prefix (DHCPv6 IA_PD),
then it is expected to assign an address from a prefix
(<em>Origin=Child</em> or <em>Type=Child</em>) derived from that
delegated prefix to one of its non-upstream interfaces. This
<em>IPv6Address</em> instance will have <em>Origin</em> of
<em>AutoConfigured</em>. This address can be used for originating and
terminating messages to and from either the downstream or the upstream
interfaces.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:device-interactions">V.6 Device Interactions</h2>
<p>The RG can interact with other devices on the LAN both by actively
sending messages with or without configuration information, and by
passively listening to messages received from other devices. End Devices
can interact with other devices on the LAN by passively listening to
messages received from other devices and by actively performing Neighbor
Unreachability Detection (NUD) to determine if previously detected
devices are still reachable.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:active-configuration">V.6.1 Active Configuration</h3>
<p>To assist in the automated configuration of other devices on the LAN,
an RG sends Router Advertisement (RA) messages and DHCPv6 server
messages. This function is associated with downstream IP interfaces, and
thus does not apply to End Devices. As noted in the above section on
downstream IP interfaces, only RGs or other infrastructure devices will
have downstream IP interfaces.</p>
<ul>
<li><p><em>RouterAdvertisement.InterfaceSetting</em> instances whose
<em>Interface</em> is the related downstream <em>IP.Interface</em>, with
<em>Enable=true</em>, define the content of RA messages that get sent on
the downstream IP interface. The
<em>RouterAdvertisement.InterfaceSetting</em> instance will include
references to <em>IPv6Prefix</em> entries in the associated downstream
IP interface. These are <em>IPv6Prefix</em> entries of
<em>Origin=Child</em> or <em>Origin=Static</em>.</p></li>
<li><p><em>DHCPv6.Server.Pool</em> instances whose <em>Interface</em> is
the related downstream <em>IP.Interface</em>, with <em>Enable=true</em>,
contain information for filtering DHCPv6 client requests, and identify
the IPv6 prefix(es) (references to <em>IPv6Prefix</em> entries of the
associated downstream IP interface) that provide the pool of IPv6
addresses and IPv6 prefixes available for assignment from this pool.
Information on soliciting clients (including assigned addresses and
prefixes and received option information) is stored in
<em>DHCPv6.Server.Pool</em>.C<em>lient</em>. Additional options that are
sent to soliciting clients is stored in
<em>DHCPv6.Server.Pool</em>.O<em>ption</em>. The
<em>PassthroughClient</em> parameter in this table identifies whether
the value of this option is simply passed through from a DHCPv6 client
on an upstream interface.</p></li>
</ul>
<p>As noted above, both <em>RouterAdvertisement.InterfaceSetting</em>
and <em>DHCPv6.Server.Pool</em> have references to <em>IPv6Prefix</em>
entries. The <em>ManualPrefixes</em>, <em>IANAManualPrefixes</em> and
<em>IAPDManualPrefixes</em> parameters allow for configuration (through
TR-069 <span class="citation" data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span>, USP <span class="citation"
data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span>, user interface, or other means) of
prefixes that are to be included in RA messages, and to be used in
deriving DHCPv6 IA_NA and IA_PD offers, respectively. The
<em>Prefixes</em>, <em>IANAPrefixes</em>, and <em>IAPDPrefixes</em>
parameters list all of the prefixes that the devices actually does
include in these messages. Since the *<em>ManualPrefixes</em> entries
may point to <em>IPv6Prefix</em> entries that are not enabled, it is
possible that not all of those will be included in these parameters’
lists. In addition to the *<em>ManualPrefix</em> entries, these lists
may also include references to prefixes that the device creates or uses
automatically in RA messages or for deriving DHCPv6 IA_NA or IA_PD
offers.</p>
<p>There is some flexibility in the modeling of ULA IA_PD prefixes. It
is not required to model the ULA /48 prefix in an <em>IPv6Prefix</em>
instance. If the ULA /48 is not represented in an IPv6Prefix instance
and <em>ULAEnable</em> is <em>true</em> for a downstream interface and
<em>IAPDEnable</em> is <em>true</em> for a <em>DHCPv6.Server.Pool</em>
instance, then it can be assumed that the device will sub-delegate
prefixes from the ULA /48 prefix. Alternately, the ULA /48 can be
included as an <em>AutoConfigured</em> prefix in a downstream interface,
and that <em>IPv6Prefix</em> instance can be referenced in
<em>IAPDPrefixes</em> in the <em>DHCPv6.Server.Pool</em> instance. It is
also possible to manually create a <em>Static</em> longer-than-/48
prefix from the ULA prefix in a downstream interface. This
<em>Static</em> prefix can then be referenced in
<em>IAPDManualPrefix</em> for a <em>DHCPv6.Server.Pool</em> instance for
that interface.</p>
<p>For IA_PD, there is one additional parameter: <em>IAPDAddLength</em>.
This parameter is configured to recommend how many bits should be added
to an <em>IAPDPrefixes</em> prefix to create a delegated prefix
offer.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:monitoring">V.6.2 Monitoring</h3>
<p>All devices can monitor and record information from messages sent by
other devices.</p>
<ul>
<li><p>Information received in Neighbor Solicitation (NS) and Neighbor
Advertisement (NA) messages sent by other devices is recorded in
<em>Hosts.Host.</em></p></li>
<li><p>In order to actively solicit information from other devices on
the LAN, the device can have a
<em>NeighborDiscovery.InterfaceSetting</em> instance whose
<em>Interface</em> is the related downstream <em>IP.Interface</em>, and
with <em>NUDEnable=true</em>. To determine whether there are other
routers connected to the LAN that are behaving like IPv6 routers to this
same LAN segment, this <em>InterfaceSetting</em> can also have
<em>RSEnable=true</em>. However, it is not recommended that routers do
this until there is better guidance available for routers that co-exist
in a peered environment on the same LAN.</p></li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:configuring-ipv6-routing-and-forwarding">V.7 Configuring IPv6
Routing and Forwarding</h2>
<p>IPv6 routing information is stored in instances of
<em>Routing.Router.IPv6Forwarding.</em> This information can in part be
derived from Router Advertisement (RA) messages, either directly from
the address of the router sending the RA, or from RA RouteInformation
(RFC 4191 <span class="citation" data-cites="RFC4191"><a
href="#ref-RFC4191" role="doc-biblioref">[29]</a></span>) options that
may be included in the message.
<em>Routing.RouteInformation.InterfaceSetting</em> instances record
received RA RouteInformation options.</p>
<p>Following is an example of how a typical RG (one upstream and one
downstream interface, with delegated prefix and IA_NA address, and ULA
enabled) might be configured. The corresponding data model is shown
below the figure. Not all parameters are shown, and objects and
parameters that the Controller is likely to have explicitly created or
written are shown in <strong>bold face</strong> (some of these settings
might alternatively be present in the factory default
configuration).</p>
<figure id="fig:example-ipv6-rg-configuration">
<img src="images/typical-rg-ipv6-configuration.png"
id="img:example-ipv6-rg-configuration"
alt="Example IPv6 RG Configuration" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-ipv6-rg-configuration">
Figure 38:
Example IPv6 RG Configuration
</div></figcaption>
</figure>
<div class="code">
<div class="line-block"># IP<br />
IP.<br />
    IPv6Capable = true<br />
    <strong>IPv6Enable = true</strong><br />
    IPv6Status = “Enabled”<br />
    ULAPrefix = fd01:2345:6789::/48 # typically generated by CPE<br />
<br />
# Router Solicitation (Upstream IP interface)<br />
NeighborDiscovery.<br />
    <strong>Enable = true</strong><br />
    <strong>InterfaceSetting.1.</strong><br />
    <strong>Enable = true</strong><br />
    <strong>Interface = IP.Interface.1</strong><br />
    <strong>RSEnable = true</strong><br />
<br />
# DHCPv6 Client (Upstream IP interface)<br />
<strong>DHCPv6.Client.1</strong><br />
    <strong>Enable = true</strong><br />
    <strong>Interface = IP.Interface.1</strong><br />
    <strong>RequestAddresses = true</strong><br />
    <strong>RequestPrefixes = true</strong><br />
<br />
# Upstream IP interface<br />
# - Assumes DHCPv6 IA_PD will be 1080:0:0:800::/56 (this is NOT known
at<br />
# configuration time).<br />
# - Assumes RA(PI) will be 2001:0DB8::/64 (this is NOT known at
configuration<br />
# time)<br />
# - Assumes link-layer address is 55:44:33:22:11:00<br />
# [Section 4/RFC 2464<span class="citation" data-cites="RFC2464"><a
href="#ref-RFC2464" role="doc-biblioref">[15]</a></span>], [Section
4.1/RFC 5072<span class="citation" data-cites="RFC5072"><a
href="#ref-RFC5072" role="doc-biblioref">[38]</a></span>]<br />
IP.Interface.1<br />
    <strong>Enable = true</strong><br />
    <strong>IPv6Enable = true</strong><br />
<br />
    # Upstream IP interface IPv6 prefixes<br />
    # - Assumes that the WellKnown Link Local fe80::/10 prefix not
modeled<br />
    <strong>IPv6Prefix.1</strong><br />
        <strong>Enable = true</strong><br />
        Prefix = 1080:0:0:800::/56 # DHCPv6(IA_PD) [RFC 3633<span
class="citation" data-cites="RFC3633"><a href="#ref-RFC3633"
role="doc-biblioref">[25]</a></span>]<br />
        Origin = “Static”<br />
        <strong>StaticType =</strong>
“<strong>PrefixDelegation</strong>”<br />
<br />
    # Upstream IP interface IPv6 addresses (LL, GUA)<br />
    IPv6Address.1<br />
        Enable = true<br />
        IPAddress = fe80::5544:33ff:fe22:1100<br />
        Origin = “AutoConfigured” # LL<br />
        Prefix = “”<br />
    IPv6Address.2<br />
        Enable = true<br />
        IPAddress = 1080:0:0:700::<br />
        Origin = “DHCPv6” # GUA (from IA_NA [RFC 3315<span
class="citation" data-cites="RFC3315"><a href="#ref-RFC3315"
role="doc-biblioref">[23]</a></span>])<br />
        Prefix = “”<br />
<br />
# Downstream IP interface<br />
# - Assumes link-layer address is 00:11:22:33:44:55 [Section 4/RFC
2464<span class="citation" data-cites="RFC2464"><a href="#ref-RFC2464"
role="doc-biblioref">[15]</a></span>]<br />
IP.Interface.2<br />
    <strong>Enable = true</strong><br />
    <strong>IPv6Enable = true</strong><br />
    <strong>ULAEnable = true</strong><br />
<br />
    # Downstream IP interface IPv6 prefixes<br />
    <strong>IPv6Prefix.1</strong><br />
        <strong>Enable = true</strong><br />
        Prefix = 1080:0:0:800::/64<br />
        Origin = “Static”<br />
        <strong>StaticType = “Child”</strong> # IA_PD /64 (for lcl, RA
and IA_NA)<br />
        <strong>ParentPrefix =
IP.Interface.1.IPv6Prefix.1</strong><br />
        <strong>ChildPrefixBits = 0:0:0:00::/64</strong><br />
    <strong>IPv6Prefix.2</strong><br />
        <strong>Enable = true</strong><br />
        Prefix = 1080:0:0:810::/60<br />
        Origin = “Static”<br />
        <strong>StaticType = “Child”</strong> # IA_PD /60 (for
IA_PD)<br />
        <strong>ParentPrefix =
IP.Interface.1.IPv6Prefix.1</strong><br />
        <strong>ChildPrefixBits = 0:0:0:10::/60</strong><br />
    IPv6Prefix.3<br />
        Enable = true<br />
        Prefix = fd01:2345:6789::/48<br />
        Origin = “AutoConfigured” # ULA /48<br />
    IPv6Prefix.4<br />
        Enable = true<br />
        Prefix = fd01:2345:6789:0::/64<br />
        Origin = “AutoConfigured” # ULA /64 (for lcl, RA and
IA_NA)<br />
    IPv6Prefix.5<br />
        Enable = true<br />
        Prefix = 2001:0db9::/60 # RA(PI) [RFC 4861<span class="citation"
data-cites="RFC4861"><a href="#ref-RFC4861"
role="doc-biblioref">[36]</a></span>]<br />
        Origin = “RouterAdvertisement” # from peer router<br />
        Autonomous = true<br />
        OnLink = true<br />
<br />
    # Downstream IP interface IPv6 addresses (LL, GUA?, ULA)<br />
    IPv6Address.1<br />
        Enable = true<br />
        IPAddress = fe80::0011:22ff:fe33:4455<br />
        Origin = “AutoConfigured” # LL<br />
        Prefix = “”<br />
    IPv6Address.2<br />
        Enable = false # have upstream GUA so disabled<br />
        IPAddress = 1080:0:0:800::<br />
        Origin = “AutoConfigured” # GUA (from IA_PD /64)<br />
        Prefix = IP.Interface.2.IPv6Prefix.1<br />
    IPv6Address.3<br />
        Enable = true<br />
        IPAddress = fd01:2345:6789::0011:22ff:fe33:4455<br />
        Origin = “AutoConfigured” # ULA (from ULA /64)<br />
        Prefix = IP.Interface.2.IPv6Prefix.4<br />
<br />
# Router Advertisement (Downstream IP interface)<br />
RouterAdvertisement.<br />
    <strong>Enable = true</strong><br />
    <strong>InterfaceSetting.1</strong><br />
        <strong>Enable = true</strong><br />
        <strong>Interface = IP.Interface.2</strong><br />
        <strong>ManualPrefixes =
IP.Interface.2.IPv6Prefix.2</strong><br />
<br />
# DHCPv6 server (Downstream IP interface)<br />
DHCPv6.Server.<br />
    <strong>Enable = true</strong><br />
    <strong>Pool.1</strong><br />
        <strong>Enable = true</strong><br />
        <strong>Interface = IP.Interface.2</strong><br />
        <strong>&lt;filter criteria&gt;</strong><br />
        <strong>IANAManualPrefixes =
IP.Interface.2.IPv6Prefix.1</strong><br />
        <strong>IAPDManualPrefixes =
IP.Interface.1.IPv6Prefix.1,</strong><br />
                             <strong>IP.Interface.2.IPv6Prefix.2</strong><br />
        <strong>IAPDADDLength = 4</strong></div>
</div>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:rd-theory-of-operation">Appendix VI: 6rd
Theory of Operation</h1>
<p>See <a href="#sec:tunneling" class="heading">Tunneling</a> for
general information on how tunneling is modeled.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:rfc-5969-configuration-parameters">VI.1 RFC 5969 Configuration
Parameters</h2>
<p>RFC 5969 <span class="citation" data-cites="RFC5969"><a
href="#ref-RFC5969" role="doc-biblioref">[41]</a></span> describes the
general operation of the 6rd protocol and configuration of external
parameters needed to do the protocol. <a
href="#tbl:rfc-5969-configuration-parameter-mapping" class="table">Table
15</a> shows the 6rd configuration parameters defined in RFC 5969 and
their mapping into the Device:2 data model. Refer to RFC 5969 for
further description on use of these parameters.</p>
<p>Note that while RFC 5969 allows for multiple Border Relay (BR) IPv4
addresses, it does not describe how a device selects from among these.
The device will need to have internal logic to handle this case, but
service providers might wish to ensure that they know what the behavior
will be, if they intend to supply multiple BR addresses.</p>
<table id="tbl:rfc-5969-configuration-parameter-mapping">
<caption><div class="auto-hoverlink"
data-anchor="tbl:rfc-5969-configuration-parameter-mapping">
Table 15: RFC 5969 Configuration Parameter Mapping
</div></caption>
<colgroup>
<col style="width: 45%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>RFC 5969 (Section 7) Configuration Parameter</th>
<th>Device:2 (IPv6rd.InterfaceSetting.{i}) Parameter</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>IPv4MaskLen</td>
<td>IPv4MaskLength</td>
</tr>
<tr class="even">
<td>6rdPrefix, 6rdPrefixLen</td>
<td>SPIPv6Prefix (expressed with prefix length)</td>
</tr>
<tr class="odd">
<td>6rdBRIPv4Address</td>
<td>BorderRelayIPv4Addresses</td>
</tr>
</tbody>
</table>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:internal-configuration-parameters">VI.2 Internal Configuration
Parameters</h2>
<p><em>AddressSource</em>, <em>TunnelInterface</em>,
<em>TunneledInterface</em>, and <em>AllTrafficToBorderRelay</em>
parameters are used to define internal device operation.
<em>AddressSource</em> allows the desired source IPv4 address to be
selected (to be embedded in the 6rd IPv6 address, after removing
IPv4MaskLength bits from the beginning of the address, and as the source
IPv4 address of the encapsulating IPv4 header). <em>TunnelInterface</em>
and <em>TunneledInterface</em> allow for internal forwarding, routing,
encapsulation, classification and marking of IPv6 packets.
<em>AllTrafficToBorderRelay</em> impacts determination of the IPv4
destination address of the encapsulating IPv4 header.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipv4-address-source">VI.3 IPv4 Address Source</h2>
<p>In general, it is expected that the device will use the IPv4 address
obtained on the upstream interface as the address that is embedded in
the 6rd IPv6 address, and used as the encapsulating source IPv4 address.
However, there could be cases where the device has other public IPv4
addresses assigned to it, and it would be preferable to use one of
these. For example, if the device has a public static IP address
assigned to a different interface, it could be desired to use that
address instead of the address assigned to the upstream interface.</p>
<p>If this parameter is not present, or if it is an empty string, the
device will use internal logic to determine the source IPv4 address. In
cases where there is a single upstream interface with an assigned (e.g.,
DHCPv4, IPCP, static) IPv4 address, that is the address that will be
used.</p>
<p>Note that service providers need to be careful when using alternate
addresses. If the alternate address does not have the same higher order
IPv4 bits as other devices that will be supported by the same 6rd
prefix, then the IPv4 mask will need to be zero. Masked IPv4 bits will
be the same for all IPv4 addresses within a 6rd domain, per RFC 5969
<span class="citation" data-cites="RFC5969"><a href="#ref-RFC5969"
role="doc-biblioref">[41]</a></span>.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:sending-all-traffic-to-the-border-relay-server">VI.4 Sending All
Traffic to the Border Relay Server</h2>
<p>The default behavior of a 6rd client device is that all IPv6 packets
are encapsulated in IPv4 packets with destination address of a 6rd
border relay server, <strong><em>except</em></strong> when the IPv6
destination address begins with <em>SPIPv6Prefix</em>. When the
destination IPv6 address begins with <em>SPIPv6Prefix</em>, then the
encapsulating IPv4 destination address is derived from the IPv6
destination address by taking the next 32 - <em>IPv4MaskLength</em>
bits, pre-pending the bits that are masked (as determined by its own WAN
IPv4 address), and using the resulting IPv4 address as the encapsulating
destination IPv4 address.</p>
<p>For example, if</p>
<ul>
<li>the IPv6 destination address is 2001:db8:64c8:200:x:x:x:x [note 64
hex = 100 decimal, c8 hex = 200 decimal, leading zeroes between colons
are not shown]</li>
<li>the <em>SPIPv6Prefix</em> is 2001:db8::/32</li>
<li>the device’s WAN IPv4 address is 10.100.100.1</li>
<li><em>IPv4MaskLength</em> is 8</li>
<li>advertised-to-LAN SLAAC prefix of 2001:db8:6464:100::/64</li>
</ul>
<p>…then the encapsulation destination IPv4 address becomes the first 8
bits of the device’s WAN IPv4 address (10 for an address of
10.100.200.2), plus the next 24 bits (32-8=24) after the
<em>SPIPv6Prefix</em> (next 24 bits are 64c802 hex = 100.200.2 binary).
The source encapsulating IPv4 address is 10.100.100.1. The source IPv6
address begins with the prefix 2001:db8:6464:100::/64.</p>
<p>However, if <em>AllTrafficToBorderRelay</em> is True, then all
external-bound IPv6 traffic is sent to the border relay.</p>
<p>This Boolean field is reflected in the routing table. If the value is
False (default behavior), then the IPv6 routing table for this example
(with a border relay IPv4 address of 10.0.0.1) would include the
following entries:</p>
<div class="code">
<div class="line-block">::/0 -&gt; 6rd-tunnel-interface-int0 via
2001:db8:0:100::<br />
    (default route to border relay)<br />
2001:db8::/32 -&gt; 6rd-tunnel-interface-int0<br />
    (direct connect to 6rd tunnel interface if the first 32 bits of
destination address match <em>SPIPv6Prefix</em>)<br />
2001:db8:6464:100::/64 -&gt; Ethernet0 (downstream interface)</div>
</div>
<p>If the <em>AllTrafficToBorderRelay</em> field is true, then the 2nd
entry above does not exist.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:internal-treatment-of-ipv6-packets">VI.5 Internal Treatment of
IPv6 Packets</h2>
<p>Since a device can have multiple upstream and multiple downstream
interfaces, the model supports a logical representation of the internal
virtual 6rd IPv6 interface according to the general pattern described in
<a href="#sec:tunneling" class="heading">Tunneling</a>.</p>
<p>The internal virtual 6rd IPv6 interface is modeled as
(<em>TunnelInterface,TunneledInterface</em>).</p>
<p>The IPv6Forwarding entries (which correspond to the routing table
entries mentioned above) will route traffic between the downstream IPv6
interfaces and the 6rd IPv6 interface. IPv4Forwarding entries are
unaffected.</p>
<p><a href="#fig:sample-6rd-routing-and-forwarding"
class="figure">Figure 39</a> shows the flow of tunneled 6rd traffic
through the downstream, upstream, and the logical tunnel interfaces.
Noted in the figure are sample values for the various
<em>IP.Interface</em> entries that would be needed.</p>
<figure id="fig:sample-6rd-routing-and-forwarding">
<img src="images/sample-6rd-routing-and-forwarding.png"
id="img:sample-6rd-routing-and-forwarding"
alt="Sample 6rd Routing and Forwarding" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:sample-6rd-routing-and-forwarding">
Figure 39:
Sample 6rd Routing and Forwarding
</div></figcaption>
</figure>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:dual-stack-lite-theory-of-operation">Appendix
VII: Dual-Stack Lite Theory of Operation</h1>
<p>See <a href="#sec:tunneling" class="heading">Tunneling</a> for
general information on how tunneling is modeled.</p>
<p>RFC 6333 <span class="citation" data-cites="RFC6333"><a
href="#ref-RFC6333" role="doc-biblioref">[44]</a></span> describes the
general operation of the dual-stack lite (DS-Lite) technology and
configuration of external parameters needed to do the protocol. RFC 6334
<span class="citation" data-cites="RFC6334"><a href="#ref-RFC6334"
role="doc-biblioref">[45]</a></span> defines an AFTR (Address Family
Transition Router) name DHCPv6 option that maps to an EndpointName
parameter in the Device:2 data model (introduced in Amendment 2).</p>
<p>EndpointName is a variable length field, containing a Fully Qualified
Domain Name that refers to the AFTR the client is requested to establish
a connection with. EndpointName can be assigned statically (e.g.,
present in the factory default configuration or set by the Controller)
or dynamically (via DHCPv6). If both statically and dynamically
assigned, then the EndpointAssignmentPrecedence parameter indicates
whether it is the static configuration or the DHCPv6 configuration that
is actually applied to EndpointName.</p>
<p>EndpointAddress is a 128 bit field, containing one IPv6 address. The
tunnel EndpointAddress specifies the location of the remote tunnel
endpoint, expected to be located at an AFTR. EndpointAddress can be
assigned statically (e.g., present in the factory default configuration
or set by the Controller) or dynamically (via DNS lookup when
EndpointName is set). If both statically and dynamically assigned, then
the EndpointAssignmentPrecedence parameter indicates whether it is the
static configuration or the DHCPv6-derived configuration that is
actually applied to EndpointAddress.</p>
<p>When EndpointName is assigned, the name is looked up (resolved) and
the corresponding IPv6 address is set in EndpointAddress.</p>
<p>When DS-Lite is running in the CPE, the NAT function is disabled
between the LAN and DSLite interface.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:internal-treatment-of-ipv4-packets">VII.1 Internal Treatment of
IPv4 Packets</h2>
<p>Since a device can have multiple upstream and multiple downstream
interfaces, the model supports a logical representation of the internal
virtual DS-Lite IPv4 interface according to the general pattern
described in <a href="#sec:tunneling" class="heading">Tunneling</a>.</p>
<p>The internal virtual DS-Lite IPv4 interface is modeled as
(<em>TunnelInterface,TunneledInterface</em>).</p>
<p>The IPv4Forwarding entries will route traffic between the downstream
IPv4 interfaces and the DS-Lite IPv4 interface. IPv6Forwarding entries
are unaffected.</p>
<p><a href="#fig:sample-ds-lite-routing-and-forwarding"
class="figure">Figure 40</a> shows the flow of tunneled DS-Lite traffic
through the downstream, upstream, and logical tunnel interfaces. Noted
in the figure are sample values for the various <em>IP.Interface</em>
entries that would be needed.</p>
<figure id="fig:sample-ds-lite-routing-and-forwarding">
<img src="images/sample-ds-lite-routing-and-forwarding.png"
id="img:sample-ds-lite-routing-and-forwarding"
alt="Sample DS-Lite Routing and Forwarding" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:sample-ds-lite-routing-and-forwarding">
Figure 40:
Sample DS-Lite Routing and Forwarding
</div></figcaption>
</figure>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header"
id="sec:advanced-firewall-example-configuration">Appendix VIII: Advanced
Firewall Example Configuration</h1>
<p>The firewall rules modelled by
<code>Device.Firewall.Chain.{i}</code>,
<code>Device.Firewall.DMZ.{i}</code> and
<code>Device.Firewall.Pinhole.{i}</code> operate only on the forwarding
path. This means that they affect only routed traffic, and do not affect
traffic that is destined for or generated by the device itself.</p>
<p>Traffic destined for or generated by the device itself SHOULD use the
<code>Device.Firewall.Service.{i}</code> object to model the appropriate
firewall rules.</p>
<p>Note that any NAT processing on the ingress packet occurs before
firewall rules are applied so, for example, the firewall rules will see
the translated destination IP address and port in a downstream packet
that has passed through the NAT.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:config-level">VIII.1 Config level</h2>
<p>This section presents an advanced firewall example that illustrates
settings corresponding to the following predefined
<code>Firewall.Config</code> levels:</p>
<ul>
<li><p><strong>High</strong>: The firewall implements the “Traffic
Denied Inbound” and “Minimally Permit Common Services Outbound”
components of the ICSA residential certification’s Required Services
Security Policy <span class="citation" data-cites="ICSA-Residential"><a
href="#ref-ICSA-Residential" role="doc-biblioref">[9]</a></span>. If DoS
and vulnerability protections are implemented <span class="citation"
data-cites="ICSA-Baseline"><a href="#ref-ICSA-Baseline"
role="doc-biblioref">[8]</a></span>, these are enabled.</p></li>
<li><p><strong>Low</strong>: All Outbound traffic and pinhole-defined
Inbound traffic is allowed. If DoS and vulnerability protections are
implemented <span class="citation" data-cites="ICSA-Baseline"><a
href="#ref-ICSA-Baseline" role="doc-biblioref">[8]</a></span>, these are
enabled.</p></li>
</ul>
<pre><code>
    Firewall.
        Enable = true
        Config = &quot;Advanced&quot;
        AdvancedLevel = Firewall.Level.1
        Type = &quot;Stateful&quot;
    Firewall.Level.1.
        Name = &quot;High&quot;
        Description = &quot;Deny Inbound and minimally permit Outbound&quot;
        Order = 1
        Chain = Firewall.Chain.1
        DefaultPolicy = &quot;Drop&quot;
    Firewall.Level.2.
        Name = &quot;Low&quot;
        Description = &quot;Allow all Outbound and pinhole-defined Inbound&quot;
        Order = 2
        Chain = Firewall.Chain.2
        DefaultPolicy = &quot;Drop&quot;
    Firewall.Chain.1.
        Name = &quot;High (Deny Inbound and minimally permit Outbound)&quot;
        Creator = &quot;Defaults&quot;
        Rule.1.
            Order = 1
            Description = &quot;Telnet&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 23
        Rule.2.
            Order = 2
            Description = &quot;FTP&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 21
        Rule.3.
            Order = 3
            Description = &quot;HTTP&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 80
        Rule.4.
            Order = 4
            Description = &quot;HTTPS&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 443
        Rule.5.
            Order = 5
            Description= &quot;SMTP&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 25
        Rule.6.
            Order = 6
            Description = &quot;DNS&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 17                    # UDP
            DestPort = 53
        Rule.7.
            Order = 7
            Description = &quot;POP3&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 110
        Rule.8.
            Order = 8
            Description = &quot;IMAP&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
            Protocol = 6                     # TCP
            DestPort = 143
    Firewall.Chain.2.
        Name = &quot;Low (Allow all Outbound and pinhole-defined Inbound)&quot;
        Creator = &quot;Defaults&quot;
        Rule.1.
            Order = 1
            Description = &quot;Outbound&quot;
            Target = &quot;Accept&quot;
            DestInterface = IP.Interface.1   # upstream facing IP interface
        Rule.2.
            Order = 2
            Description = &quot;Allow IPsec AH&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 6                    # IPv6
            Protocol = 51                    # AH
        Rule.3.
            Order = 3
            Description = &quot;Allow IPsec ESP&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 6                    # IPv6
            Protocol = 50                    # ESP
        Rule.4.
            Order = 4
            Description = &quot;Allow IPsec key exchange&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 6                    # IPv6
            Protocol = 17                    # UDP
            DestPort = 500
        Rule.5.
            Order = 5
            Description = &quot;UPnP Port Mapping&quot;
            Target = &quot;TargetChain&quot;
            TargetChain = Firewall.Chain.3
            SourceInterface = IP.Interface.1 # upstream facing IP interface
        Rule.6.
            Order = 6
            Description = &quot;UPnP IPv6 Firewall&quot;
            Target = &quot;TargetChain&quot;
            TargetChain = Firewall.Chain.4
            SourceInterface = IP.Interface.1 # upstream facing IP interface
        Rule.7.
            Order = 7
            Description = &quot;User Interface&quot;
            Target = &quot;TargetChain&quot;
            TargetChain = Firewall.Chain.5
            SourceInterface = IP.Interface.1 # upstream facing IP interface
    Firewall.Chain.3.
        Name = &quot;UPnP Port Mapping (dynamic rules)&quot;
        Creator = &quot;PortMapping&quot;
        Rule.1.
            Order = 1
            Description = &quot;SSH&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 4                    # IPv4
            Protocol = 6                     # TCP
            DestPort = 22
    Firewall.Chain.4.
        Name = &quot;UPnP IPv6 Firewall (dynamic rules)&quot;
        Creator = &quot;WANIPv6FirewallControl&quot;
        Rule.1.
            Order = 1
            Description = &quot;HTTP&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 6                    # IPv6
            Protocol = 6                     # TCP
            DestIP = 1080:0:0:800::1
            DestPort = 80
    Firewall.Chain.5.
        Name = &quot;User Interface&quot;
        Creator = &quot;UserInterface&quot;
        Rule.1.
            Order = 1
            Description = &quot;SMTP server&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 4                    # IPv4
            Protocol = 6                     # TCP
            DestIP = 192.168.1.4
            DestPort = 25
        Rule.2.
            Order = 2
            Description = &quot;DMZ&quot;
            Target = &quot;Accept&quot;
            SourceInterface = IP.Interface.1 # upstream facing IP interface
            IPVersion = 4                    # IPv4
            DestIP = &quot;192.168.1.5&quot;           # IPv4 address of LAN device that recvs
                                             # all unsolicited inbound IPv4 traffic</code></pre>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:firewall-policy">VIII.2 Firewall policy</h2>
<p>The firewall policy enables the definition of firewall rules for
incoming and outgoing traffic. It defines the relation between source
interface and destination interface and the reverse relation (between
destination and source). In it simplest format it can be “Allow”/“Drop”,
but in most cases it is useful to define a firewall chain target for
both directions.</p>
<p>In a multi WAN, multi LAN environment, the policy concept can greatly
reduce the complexity of the firewall configuration. It makes it easier
to re-use firewall chains for different Interface configuration.</p>
<figure id="fig:policy-configuration-example">
<img src="images/firewall-policy-example.svg"
id="img:policy-configuration-example"
alt="Policy configuration example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:policy-configuration-example">
Figure 41:
Policy configuration example
</div></figcaption>
</figure>
<p>In order to configure more complex scenarios the firewall Levels are
extended with a reference to the corresponding policy (instead of the
<code>Firewall.Chain.{i}.</code> reference.).</p>
<p>The policy mode can be enabled by setting the firewall config
parameter to <code>Policy</code>.</p>
<pre><code>    Firewall.Config = Policy</code></pre>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:policy-level">VIII.2.1 Policy Level</h3>
<p>The active firewall Level can be configured by referencing the
<code>Firewall.PolicyLevel</code> parameter to one of the instantiated
objects of the <code>Firewall.Level.{i}</code> table.</p>
<pre><code>    Firewall.PolicyLevel = Firewall.Level.2</code></pre>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:policy-referencing">VIII.2.2 Policy referencing</h3>
<p>Each firewall Level can have its own set of policies. Policies can be
configured by referencing the <code>Firewall.Level.{i}.Policies</code>
parameter to one or more of the instantiated objects of the
<code>Firewall.Policy.{i}</code> table.</p>
<p>Below are some examples of the firewall level configuration
corresponding with the firewall levels <code>Low</code>,
<code>Medium</code> and <code>High</code>.</p>
<p><strong>Firewall level Low</strong></p>
<pre><code>    Firewall.Level.1
      Alias = &quot;Low&quot;
      Name = &quot;Low&quot;
      Policies = Firewall.Policy.1,Firewall.Policy.2,Firewall.Policy.3,Firewall.Policy.4</code></pre>
<p><strong>Firewall level Medium</strong></p>
<pre><code>    Firewall.Level.2
      Alias = &quot;Medium&quot;
      Name = &quot;Medium&quot;
      Policies = Firewall.Policy.5,Firewall.Policy.6,Firewall.Policy.7,Firewall.Policy.8</code></pre>
<p><strong>Firewall level High</strong></p>
<pre><code>    Firewall.Level.2
      Alias = &quot;High&quot;
      Name = &quot;High&quot;
      Policies = Firewall.Policy.9,Firewall.Policy.10,Firewall.Policy.11,Firewall.Policy.12</code></pre>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:policy">VIII.2.3 Policy</h3>
<p>The firewall policy specifies the firewall configuration between any
two interfaces in a device. (Compared to the concept that a Level refers
only to a single chain.) This implies that the interface configuration
should no longer be specified in the
<code>Firewall.Chain.{i}.Rule.{i}</code> but it should be inherited from
the <code>Firewall.Policy.{i}</code> configuration.</p>
<p><strong>Firewall policies Medium</strong></p>
<pre><code>    Firewall.Policy.5.
      Alias = &quot;WAN2LAN&quot;
      Enable = 1
      Status = &quot;Enabled&quot;
      TargetChain = &quot;Chain&quot;
      Chain= &quot;Firewall.Chain.2&quot;
      DestinationInterface = &quot;Device.Logical.Interface.3.&quot;
      IPVersion = 0
      ReverseTargetChain = &quot;Accept&quot;
      ReverseChain = &quot;&quot;
      SourceInterface = &quot;Device.Logical.Interface.1.&quot;
    Firewall.Policy.6.
      Alias = &quot;WAN2GUEST&quot;
      Enable = 1
      Status = &quot;Enabled&quot;
      TargetChain = &quot;Chain&quot;
      Chain = &quot;Firewall.Chain.2&quot;
      DestinationInterface = &quot;Device.Logical.Interface.4.&quot;
      IPVersion = 0
      ReverseTargetChain = &quot;Chain&quot;
      ReverseChain = &quot;Firewall.Chain.4.&quot;
      SourceInterface = &quot;Device.Logical.Interface.1.&quot;
    Firewall.Policy.7.
      Alias=&quot;WAN2LCM&quot;
      Enable = 1
      Status = &quot;Enabled&quot;
      TargetChain = &quot;Chain&quot;
      Chain = &quot;Firewall.Chain.2&quot;
      DestinationInterface = &quot;Device.Logical.Interface.5.&quot;
      IPVersion = 0
      ReverseTargetChain = &quot;Chain&quot;
      ReverseChain = &quot;Firewall.Chain.5.&quot;
      SourceInterface = &quot;Device.Logical.Interface.1.&quot;
    Firewall.Policy.8.
      Alias = &quot;LAN2LCM&quot;
      Enable = 1
      Status = &quot;Enabled&quot;
      TargetChain = &quot;Chain&quot;
      Chain = &quot;Firewall.Chain.2&quot;
      DestinationInterface = &quot;Device.Logical.Interface.5.&quot;
      IPVersion = 0
      ReverseTargetChain = &quot;Chain&quot;
      ReverseChain = &quot;Firewall.Chain.5.&quot;
      SourceInterface = &quot;Device.Logical.Interface.3.&quot;</code></pre>
<p>As the default policy in the FORWARD chain is DROP, all FORWARD paths
needs to be defined and explicitly opened if needed. A Policy is used to
make this relation more clear, and allows the definition of rules for
incoming and outgoing traffic.</p>
<p>The <code>Chain</code> parameter allows to reference a
<code>Firewall.Chain.{i}</code> object where rules can be defined for
traffic coming from the <code>SourceInterface</code> to the
<code>DestinationInterface</code>, the <code>ReverseChain</code>
parameter also allows you to provide a reference to a
<code>Firewall.Chain.{i}</code> object where rules can be defined for
traffic coming from the <code>DestinationInterface</code> to the
<code>SourceInterface</code>.</p>
<p>When no rules are needed because traffic should simply be
<code>Accepted</code>, <code>Rejected</code> or <code>Dropped</code> the
<code>TargetChain</code> and <code>ReverseTargetChain</code> can be
configured accordingly using the following options:</p>
<ul>
<li><strong><code>Accept</code></strong>: The firewall forwards packets
matching this rule.</li>
<li><strong><code>Reject</code></strong>: The firewall discards packets
matching this rule, and sends an ICMP message to the originating
host.</li>
<li><strong><code>Drop</code></strong>: The firewall discards packets
matching this rule.</li>
<li><strong><code>Chain</code></strong>: The rules in the chain
referenced by the ReverseChain parameter are matched.</li>
</ul>
<p><strong>Firewall chain Low</strong></p>
<pre><code>Firewall.Chain.1.
      Alias=&quot;L_Low&quot;
      Creator=&quot;Defaults&quot;
      Enable=1
      Name=&quot;L_Low&quot;
      RuleNumberOfEntries=1
      Rule.1.
            Alias=&quot;cpe-Rule-1&quot;
            CreationDate=&quot;2022-12-06T07:44:57.187868Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=-1
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=1
            Protocol=-1
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0</code></pre>
<p><strong>Firewall chain Medium</strong></p>
<pre><code>Firewall.Chain.2.
      Alias = &quot;L_Medium&quot;
      Creator=&quot;Defaults&quot;
      Enable=1
      Name=&quot;L_Medium&quot;
      RuleNumberOfEntries=1
      Rule.1.
            Alias=&quot;cstate&quot;
            CreationDate=&quot;2022-12-06T07:44:57.224803320Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=-1
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=1
            Protocol=-1
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;RELATED,ESTABLISHED&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0</code></pre>
<p><strong>Firewall chain High</strong></p>
<pre><code>Firewall.Chain.3.
      Alias=&quot;L_High&quot;
      Creator=&quot;Defaults&quot;
      Enable=1
      Name=&quot;L_High&quot;
      RuleNumberOfEntries=13
      Rule.1.
            Alias=&quot;ftp-data&quot;
            CreationDate=&quot;2022-12-06T07:44:57.279995140Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=20
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=1
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.10.
            Alias=&quot;imap&quot;
            CreationDate=&quot;2022-12-06T07:44:57.487939660Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=143
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=10
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.11.
            Alias=&quot;https&quot;
            CreationDate=&quot;2022-12-06T07:44:57.527839880Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=443
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=11
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.12.
            Alias=&quot;last-tcp-rule&quot;
            CreationDate=&quot;2022-12-06T07:44:57.561464140Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=-1
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=12
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Reject&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.13.
            Alias=&quot;last-rule&quot;
            CreationDate=&quot;2022-12-06T07:44:57.600872040Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=-1
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=13
            Protocol=-1
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Reject&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.2.
            Alias=&quot;ftp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.321648340Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=21
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=2
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.3.
            Alias=&quot;ssh&quot;
            CreationDate=&quot;2022-12-06T07:44:57.341043640Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=22
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=3
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.4.
            Alias=&quot;smtp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.358718120Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=25
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=4
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.5.
            Alias=&quot;dns-udp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.376790140Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=53
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=5
            Protocol=17
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.6.
            Alias=&quot;dns-tcp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.391873460Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=53
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=6
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.7.
            Alias=&quot;http&quot;
            CreationDate=&quot;2022-12-06T07:44:57.418379220Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=80
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=7
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.8.
            Alias=&quot;pop3&quot;
            CreationDate=&quot;2022-12-06T07:44:57.432996420Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=110
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=8
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.9.
            Alias=&quot;ntp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.463105040Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=123
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=9
            Protocol=17
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0</code></pre>
<p><strong>Firewall chain Guest</strong></p>
<pre><code>Firewall.Chain.4.
      Alias=&quot;Guest&quot;
      Creator=&quot;Defaults&quot;
      Enable=1
      Name=&quot;Guest&quot;
      RuleNumberOfEntries=5
      Rule.1.
      Rule.1.Alias=&quot;dns-udp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.663302800Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=53
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=1
            Protocol=17
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.2.
            Alias=&quot;dns-tcp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.698019980Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=53
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=2
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.3.
            Alias=&quot;http&quot;
            CreationDate=&quot;2022-12-06T07:44:57.743905080Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=80
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=3
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.4.
            Alias=&quot;https&quot;
            CreationDate=&quot;2022-12-06T07:44:57.784633700Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=443
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=4
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.5.
            Alias=&quot;icmp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.808069460Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=-1
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=5
            Protocol=1
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0</code></pre>
<p><strong>Firewall chain LCM</strong></p>
<pre><code>Firewall.Chain.5.
      Alias=&quot;LCM&quot;
      Creator=&quot;Defaults&quot;
      Enable=1
      Name=&quot;LCM&quot;
      RuleNumberOfEntries=5
      Rule.1.
            Alias=&quot;dns-udp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.848761260Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=53
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=1
            Protocol=17
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.2.
            Alias=&quot;dns-tcp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.885819Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=53
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=2
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.3.
            Alias=&quot;http&quot;
            CreationDate=&quot;2022-12-06T07:44:57.903074620Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=80
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=3
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.4.
            Alias=&quot;https&quot;
            CreationDate=&quot;2022-12-06T07:44:57.922807360Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=443
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=4
            Protocol=6
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0
      Rule.5.
            Alias=&quot;icmp&quot;
            CreationDate=&quot;2022-12-06T07:44:57.955819140Z&quot;
            DSCP=-1
            DSCPExclude=0
            Description=&quot;&quot;
            DestAllInterfaces=1
            DestIP=&quot;&quot;
            DestIPExclude=0
            DestInterface=&quot;&quot;
            DestInterfaceExclude=0
            DestMask=&quot;&quot;
            DestPort=-1
            DestPortExclude=0
            DestPortRangeMax=-1
            Enable=1
            ExpiryDate=&quot;9999-12-31T23:59:59Z&quot;
            IPVersion=-1
            Log=0
            Order=5
            Protocol=1
            ProtocolExclude=0
            SourceAllInterfaces=1
            SourceIP=&quot;&quot;
            SourceIPExclude=0
            SourceInterface=&quot;&quot;
            SourceInterfaceExclude=0
            SourceMask=&quot;&quot;
            SourcePort=-1
            SourcePortExclude=0
            SourcePortRangeMax=-1
            Status=&quot;Enabled&quot;
            Target=&quot;Accept&quot;
            TargetChain=&quot;&quot;
            ConnectionState=&quot;&quot;
            SourceMAC=&quot;&quot;
            SourceMACExclude=0</code></pre>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:remarks">VIII.2.4 Remarks</h3>
<ul>
<li>The <code>Firewall.Level.{i}.Chain</code> parameter is no longer
used.</li>
<li><code>Firewall.Chain.{i}.Rule.{i}</code> should not configure the:
<ul>
<li>SourceInterface</li>
<li>DestinationInterface</li>
<li>SourceInterfaceExclude</li>
<li>DestinationInterfaceExclude</li>
</ul></li>
</ul>
<p>as they might conflict with the Policy Interface configuration.</p>
<h2 class="new-page appendix2 auto-hoverlink" data-info="header"
id="sec:dmz-example">VIII.3 DMZ example</h2>
<p>This section presents a firewall example that illustrates settings
corresponding to creating a DMZ rule for a DMZ host in the LAN.</p>
<figure id="fig:dmz-example">
<img src="images/firewall-dmz-example.svg" id="img:dmz-example"
alt="DMZ example" />
<figcaption><div class="auto-hoverlink" data-anchor="fig:dmz-example">
Figure 42:
DMZ example
</div></figcaption>
</figure>
<p>Example:</p>
<pre><code>    Firewall.DMZ.1
        Alias = &quot;cpe-dmz-1&quot;
        DestIP = &quot;192.168.1.50&quot;
        Interface = &quot;Device.Logical.Interface.2.&quot;
        SourcePrefix = &quot;8.2.1.0/24&quot;
        Enable = 1</code></pre>
<h2 class="new-page appendix2 auto-hoverlink" data-info="header"
id="sec:pinhole-example">VIII.4 Pinhole example</h2>
<p>This section presents a firewall example that illustrates settings
corresponding to creating a pinhole for an IP camera in the LAN.</p>
<figure id="fig:pinhole-example">
<img src="images/firewall-pinhole-example.svg" id="img:pinhole-example"
alt="Pinhole example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:pinhole-example">
Figure 43:
Pinhole example
</div></figcaption>
</figure>
<p>Example:</p>
<pre><code>    Firewall.Pinhole.1
      Alias = &quot;cpe-pinhole-1&quot;
      Description = &quot;IP Camera&quot;
      DestPort = &quot;3343&quot;
      Interface=&quot;Device.Logical.Interface.2.&quot;
      DestIP = &quot;2002::10&quot;
      Origin = &quot;User&quot;
      Protocol = &quot;6,17&quot;
      SourcePort = &quot;3343&quot;
      SourcePrefixes = &quot;&quot;
      Enable = 1</code></pre>
<h2 class="new-page appendix2 auto-hoverlink" data-info="header"
id="sec:service-example">VIII.5 Service example</h2>
<p>This section presents a firewall example that illustrates settings
corresponding to opening a local port for the DNS service provided by
the device.</p>
<figure id="fig:local-service-example">
<img src="images/firewall-service-example.svg"
id="img:local-service-example" alt="Local service example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:local-service-example">
Figure 44:
Local service example
</div></figcaption>
</figure>
<p>Example:</p>
<pre><code>    Firewall.Service.1
      Action = &quot;Accept&quot;
      Alias = &quot;dns-Logical-3&quot;
      DestinationPort = &quot;53&quot;
      ICMPType = -1
      IPVersion = 0
      Interface = &quot;Device.Logical.Interface.3.&quot;
      Protocol = &quot;6,17&quot;
      SourcePrefix = &quot;&quot;
      Enable = 1</code></pre>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:ipsec-theory-of-operation">Appendix IX: IPsec
Theory of Operation</h1>
<p>See <a href="#sec:tunneling" class="heading">Tunneling</a> for
general information on how tunneling is modeled.</p>
<p>The Device:2 data model includes an IPsec (RFC 4301 <span
class="citation" data-cites="RFC4301"><a href="#ref-RFC4301"
role="doc-biblioref">[31]</a></span>) object that supports the
configuration of Encapsulating Security Payload (ESP; RFC 4303 <span
class="citation" data-cites="RFC4303"><a href="#ref-RFC4303"
role="doc-biblioref">[33]</a></span>) and Authentication Header (AH; RFC
4302 <span class="citation" data-cites="RFC4302"><a href="#ref-RFC4302"
role="doc-biblioref">[32]</a></span>) in tunnel mode (Section 3.2/RFC
4301). Use of IKEv2 (RFC 5996 <span class="citation"
data-cites="RFC5996"><a href="#ref-RFC5996"
role="doc-biblioref">[42]</a></span>) is assumed. The IPsec object does
not currently support static configuration of tunnels and child Security
Associations (SAs).</p>
<p><a href="#fig:ipsec-data-model-objects" class="figure">Figure 45</a>
illustrates the main IPsec objects and their relationships.</p>
<figure id="fig:ipsec-data-model-objects">
<img src="images/ipsec-data-model-objects.png"
id="img:ipsec-data-model-objects" alt="IPsec Data Model Objects" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ipsec-data-model-objects">
Figure 45:
IPsec Data Model Objects
</div></figcaption>
</figure>
<p>In the Figure, instances of the colored objects (<em>Filter.{i}</em>
and <em>Profile.{i}</em>) are created and populated by the Controller.
Instances of all other objects are handled by the CPE as IPsec tunnels
are created and deleted. References between objects are shown:</p>
<ul>
<li>Solid lines indicate references that are populated by the
Controller, and dashed lines indicate references that are handled by the
CPE.</li>
<li>A reference marked “(U)” is a unique key, which implies a 1-1
relationship, e.g., only one <em>Tunnel</em> instance can reference a
given (<em>Tunnel,Tunneled</em>) <em>IP.Interface</em> pair.</li>
<li>Other references imply n-1 relationships, e.g., multiple
<em>Filter</em> instances can reference a given <em>Profile</em>
instance.</li>
</ul>
<p>Typical usage is as follows:</p>
<ul>
<li>The factory default configuration can contain static instances of
the various objects.</li>
<li>The Controller creates and configures <em>Filter</em> and
<em>Profile</em> instances. <em>Filter</em> instances model IPsec
Security Policy Database (SPD) selection criteria and <em>Profile</em>
instances model SPD processing info. Each <em>Filter</em> instance
references a <em>Profile</em> instance so a single <em>Profile</em>
instance can, if desired, be shared by several <em>Filter</em>
instances.</li>
<li>When the Controller enables a <em>Filter</em> instance, the CPE
determines whether a new tunnel is needed in order to carry the traffic
that matches that filter. It is possible that an existing tunnel can
carry the traffic.</li>
<li>If a new tunnel is needed, the CPE immediately creates a
<em>Tunnel</em> instance that references a newly-created
(<em>Tunnel,Tunneled</em>) <em>IP Interface</em> pair. This corresponds
exactly to the general tunneling approach that is described in <a
href="#sec:tunneling" class="heading">Tunneling</a>.</li>
<li>Each <em>Tunnel</em> instance also references all of the
currently-enabled <em>Filter</em> instances that require it to
exist.</li>
<li>Classification and forwarding rules can now be defined, regardless
of whether the tunnels have yet been established.
<em>ForwardingPolicy</em> is both a QoS <em>Classification</em> result
and an IPsec <em>Filter</em> result (it’s in the <em>Policy</em> table),
and so can, as explained in <a href="#sec:tunneling"
class="heading">Tunneling</a>, affect the forwarding decision and thus
whether or not a given packet will be en-tunneled or de-tunneled.</li>
<li>When a tunnel needs to become active, e.g., as a result of traffic
that matches one of the <em>Filter</em> instances, the CPE will
establish it and will create the appropriate <em>IKEv2SA</em> and
<em>ChildSA</em> objects.</li>
<li>When a tunnel no longer needs to be active, the CPE will delete the
<em>ChildSA</em> and <em>IKEv2SA</em> objects. This will affect the
status of the <em>Tunnel</em> instance and (<em>Tunnel,Tunneled</em>)
<em>IP Interface</em> pair but will not delete them.</li>
</ul>
<p>The remainder of this Appendix consists of a brief summary of the
various IPsec data model objects.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipsec">IX.1 IPsec</h2>
<p>The top-level object has an <em>Enable</em> parameter that enables
and disables the IPsec sub-system, various capability parameters, e.g.,
supported encryption algorithms, and global IPsec statistics.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipsec.filter">IX.2 IPsec.Filter</h2>
<p>The <em>Filter</em> table models IPsec Security Policy Database (SPD)
selection criteria. Refer to Section 4.4.1/RFC 4301 <span
class="citation" data-cites="RFC4301"><a href="#ref-RFC4301"
role="doc-biblioref">[31]</a></span> for further details.</p>
<p>SPD filtering is performed for all packets that might need to cross
the IPsec boundary. Refer to Section 3.1/RFC4301 for further details.
Given that IPsec operates at the IP level, this means that SPD filtering
conceptually occurs after bridging and before routing.</p>
<p>This table is conceptually quite similar to the QoS Classification
table in that entries are ordered, associated with an ingress interface,
include selection criteria, and specify the action to be taken for
matching packets.</p>
<p>Instances of the <em>Filter</em> table can be created statically by
the CPE, or can be created and deleted by the Controller as needed. Each
instance includes the following (this is not a complete list):</p>
<ul>
<li><em>Enable</em>: to enable and disable the entry.</li>
<li><em>Status</em>: to indicate the status of the entry.</li>
<li><em>Order</em>: to control and indicate the order of the entry.</li>
<li><em>Interface</em>, <em>AllInterfaces</em>: to control and indicate
with which interfaces the entry is associated.</li>
<li><em>DestIP</em>: to select packets by destination IP address.</li>
<li><em>SourceIP</em>: to select packets by source IP address.</li>
<li><em>Protocol</em>: to select packets by IP protocol.</li>
<li><em>DestPort</em>: to select packets by destination port.</li>
<li><em>SourcePort</em>: to select packets by source port.</li>
<li><em>Discard</em>: whether to discard matching packets.</li>
<li><em>Profile</em>: the Profile instance that governs how
non-discarded matching packets will be treated.</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipsec.profile">IX.3 IPsec.Profile</h2>
<p>The <em>Profile</em> table models IPsec Security Policy Database
(SPD) processing info. Refer to Section 4.4.1/RFC 4301 <span
class="citation" data-cites="RFC4301"><a href="#ref-RFC4301"
role="doc-biblioref">[31]</a></span> for further details. Each
<em>Filter</em> instance references a <em>Profile</em> instance. It
would be possible to include the processing info directly in each
<em>Filter</em> instance, but use of a separate table allows
<em>Profile</em> entries to be shared between <em>Filter</em>
instances.</p>
<p>Instances of the <em>Profile</em> table can be created statically by
the CPE, or can be created and deleted by the Controller as needed. Each
instance includes the following (this is not a complete list):</p>
<ul>
<li><em>MaxChildSAs</em>: the maximum number of Child SAs per IKEv2
session (and therefore per IPsec tunnel); this provides a simple way of
controlling the extent to which existing tunnels can be re-used.</li>
<li><em>RemoteEndpoints</em>: an ordered list of remote tunnel endpoints
that are to be used when establishing an IPsec tunnel corresponding to
this <em>Profile</em> instance.</li>
<li><em>ForwardingPolicy</em>: an opaque (Controller-chosen) value that
provides a feed-forward mechanism that allows the SPD filtering decision
to affect the forwarding decision. QoS classification uses the same
mechanism.</li>
<li><em>Protocol</em>: the “child” security protocol, i.e., AH or
ESP.</li>
<li><em>IKEv2AuthenticationMethod</em>: a reference to a CPE certificate
or other CPE credentials.</li>
<li><em>IKEv2AllowedEncryptionAlgorithms</em> (etc): encryption
algorithm that IKEv2 is permitted to negotiate; also several other
“allowed” parameters that define acceptable IKEv2, AH and ESP
algorithms.</li>
<li><em>DSCPMarkPolicy</em> (etc): various settings that govern how
packets should be tunneled.</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipsec.tunnel">IX.4 IPsec.Tunnel</h2>
<p>The <em>Tunnel</em> table that models IPsec tunnels. Instances are
created and deleted by the CPE as needed. A (<em>Tunnel,Tunneled</em>)
<em>IP</em> <em>Interface</em> pair is always created at the same time
as an IPsec <em>Tunnel</em> instance and has the same lifetime; the
<em>Tunnel IP Interface</em> contains generic IP interface settings,
e.g., <em>Enable</em>, <em>Status</em> and generic <em>Stats</em>, and
the IPSec <em>Tunnel</em> instance contains IPsec-specific settings,
e.g., additional <em>Stats</em>.</p>
<div class="note">
<p>A (<em>Tunnel,Tunneled</em>) <em>IP</em> <em>Interface</em> pair
consists of an IP Interface instance with Type = “Tunnel”, and another
IP Interface instance with Type = “Tunneled”.</p>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipsec.ikev2sa">IX.5 IPsec.IKEv2SA</h2>
<p>Each entry in the <em>IKEv2SA</em> table models a single IKEv2 SA
pair and uniquely references a <em>Tunnel</em> instance. Unlike
<em>Tunnel</em> instances, which exist regardless of whether the tunnel
is active, <em>IKEv2SA</em> instances exist only when the IKEv2 SA pair
exists, i.e., they exist only when the tunnel is active.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:ipsec.ikev2sa.childsa">IX.6 IPsec.IKEv2SA.ChildSA</h2>
<p>The <em>ChildSA</em> table models child SA pairs. It is a child of
the corresponding <em>IKEv2SA</em> instance and so exists only when the
<em>IKEv2SA</em> instance exists.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header"
id="sec:etsi-m2m-remote-entity-management-theory-of-operation">Appendix
X: ETSI M2M Remote Entity Management Theory of Operation</h1>
<div class="note">
<p>ETSI currently only endorses TR-069 <span class="citation"
data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span> for management of M2M devices, but
the principles would also apply for USP, even if the protocol is not
mentioned in this appendix.</p>
</div>
<p><a href="#fig:etsi-high-level-functional-architecture"
class="figure">Figure 46</a> below depicts the high level ETSI M2M
functional architecture defined in section 4 of ETSI TS 102 690 <span
class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span>. The Data Models defined <span
class="citation" data-cites="ETSIM2MInterfaces"><a
href="#ref-ETSIM2MInterfaces" role="doc-biblioref">[6]</a></span> are
used within CWMP enabled Devices and Gateways within the Device and
Gateway domain.</p>
<figure id="fig:etsi-high-level-functional-architecture">
<img src="images/etsi-high-level-functional-architecture.png"
id="img:etsi-high-level-functional-architecture"
alt="ETSI High Level Functional Architecture" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:etsi-high-level-functional-architecture">
Figure 46:
ETSI High Level Functional Architecture
</div></figcaption>
</figure>
<p>Within the Device and Gateway Domain, the M2M Device and Gateway
contains 2 functional components as defined in the ETSI M2M Functional
Architecture <span class="citation" data-cites="ETSIM2MFA"><a
href="#ref-ETSIM2MFA" role="doc-biblioref">[5]</a></span>:</p>
<ul>
<li>M2M Service Capabilities: M2M functions that are to be shared by
different M2M Applications.</li>
<li>M2M Applications: Applications that run the service logic and use
M2M Service Capabilities.</li>
</ul>
<p>Interactions between components within the ETSI architecture are
defined using reference points. <a
href="#fig:m2m-scl-functional-architecture-framework"
class="figure">Figure 47</a> below illustrates the Service Capability
Layer (SCL) mId reference point that is of interest. A full explanation
of the SCL reference points is provided in section 5 of the ETSI M2M
Functional Architecture <span class="citation" data-cites="ETSIM2MFA"><a
href="#ref-ETSIM2MFA" role="doc-biblioref">[5]</a></span>.</p>
<figure id="fig:m2m-scl-functional-architecture-framework">
<img src="images/m2m-scl-functional-architecture-framework.png"
id="img:m2m-scl-functional-architecture-framework"
alt="M2M SCL Functional Architecture Framework" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:m2m-scl-functional-architecture-framework">
Figure 47:
M2M SCL Functional Architecture Framework
</div></figcaption>
</figure>
<p>The M2M Device or Gateway SCL provides capabilities (functionality)
for the following areas:</p>
<ul>
<li>Application Enablement (xAE)</li>
<li>Generic Communication (xGC)</li>
<li>Reachability, Addressing and Repository (xRAR)</li>
<li>Communication Selection (xCS)</li>
<li>Remote Entity Management (xREM)</li>
<li>SECurity (xSEC)</li>
<li>History and Data Retention (xHDR)</li>
<li>Transaction Management (xTM)</li>
<li>Compensation Broker (xCB)</li>
<li>Telco Operator Exposure (xTOE)</li>
<li>Interworking Proxy (xIP)</li>
</ul>
<div class="note">
<p>The « x » designates a capability is used in the context of the
Device (D) or Gateway (G).</p>
</div>
<p>The Data Model in <span class="citation"
data-cites="ETSIM2MInterfaces"><a href="#ref-ETSIM2MInterfaces"
role="doc-biblioref">[6]</a></span> reflects the device management
objects and parameters necessary to implement xREM functionality across
the mId reference point as defined in Annex E of the ETSI Functional
Architecture <span class="citation" data-cites="ETSIM2MFA"><a
href="#ref-ETSIM2MFA" role="doc-biblioref">[5]</a></span> is depicted in
<a href="#fig:m2m-rem-service-capability" class="figure">Figure 48</a>.
In this instance, the Device Mgmt Client is considered a CWMP endpoint
interface and the Device Mgmt Server is considered the ACS interface. In
most situations, these endpoints and servers have an interface between
the native Device, Gateway or Server environment and the SCL. In
addition, the dIa reference point, using RESTful procedures, is used to
discover M2M D’ Devices and M2M Applications as well as proxy selected
xREM management functions.</p>
<figure id="fig:m2m-rem-service-capability">
<img src="images/m2m-rem-service-capability.png"
id="img:m2m-rem-service-capability" alt="M2M REM Service Capability" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:m2m-rem-service-capability">
Figure 48:
M2M REM Service Capability
</div></figcaption>
</figure>
<div class="note">
<p>The mId reference point in this scenario would support CWMP for the
exchange of “mgmtObjs” using the xREM procedures between SCLs while
continuing to support the ETSI RESTful procedures (e.g., container
management) for the exchange of other resources across the mId reference
point.</p>
</div>
<p>Within the ESTI M2M Functional Architecture, the xREM is responsible
for the following management functions:</p>
<ul>
<li>General Management: Provides retrieval of information related to the
M2M Device or Gateway that hosts the ETSI M2M Service Capability Layer
(SCL).</li>
<li>Configuration Management: Provides configuration of the M2M Device
or Gateway’s capabilities in order to support ETSI M2M Services and
Applications.</li>
<li>Diagnostics and Monitoring Management: Provides diagnostic tests and
retrieves/receives alerts associated with the M2M Device or Gateway that
hosts the SCL.</li>
<li>Software Management: Maintains software associated with the SCL and
M2M services.</li>
<li>Firmware Management: Maintain firmware associated with the M2M
Device or Gateway that hosts the SCL.</li>
<li>Area Network Management: Maintains devices on the M2M Area Network
associated with the SCL.</li>
<li>SCL Administration: Provides administration capabilities in order to
configure and maintain a SCL within the M2M Device or Gateway.</li>
</ul>
<p>Within the customer premises, equipment is categorized within the
ETSI M2M framework as a:</p>
<ul>
<li>M2M Gateway: A Gateway that runs M2M Application(s) using M2M
Service Capabilities.</li>
<li>M2M Device: A Device that runs applications using M2M capabilities
and network domain functions. Depending on M2M capabilities of the M2M
Device, the M2M Device is defined as a:
<ul>
<li>Device (D): provides M2M Service Capabilities (DSCL) that
communicates to an NSCL using the mId reference point and to DA using
the dIa reference point</li>
<li>Device’ (D’): hosts a Device Application (DA) that communicates to a
GSCL using the dIa reference point. D’ does not implement ETSI M2M
Service Capabilities</li>
</ul></li>
<li>Non-ETSI M2M compliant device (d): A device that connects to a SCL
through the SCL’s Interworking Proxy capability.</li>
</ul>
<figure id="fig:etsi-m2m-devices-and-gateways">
<img src="images/etsi-m2m-devices-and-gateways.png"
id="img:etsi-m2m-devices-and-gateways"
alt="ETSI M2M Devices and Gateways" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:etsi-m2m-devices-and-gateways">
Figure 49:
ETSI M2M Devices and Gateways
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:etsi-m2m-area-networks">X.1 ETSI M2M Area Networks</h2>
<p>In the ETSI framework D’ and d Devices that connect to a SCL within a
M2M Device or Gateway are said to be “attached devices” and are
organized by M2M Area Networks within the SCL. The mechanism that a M2M
Gateway uses to identify M2M Area Networks and their associated devices
is implementation specific.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:device2-data-model-and-functionality-for-etsi-m2m-rem">X.2
Device:2 Data Model and Functionality for ETSI M2M REM</h2>
<p>Annex B of the ETSI M2M Functional Architecture <span
class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> provides a cross reference between
the xREM management functions and the object instances and RPCs required
to implement the management functionality. The following is a summary of
the objects, services, components, RPCs and optional TR-069
functionality required by the ETSI M2M xREM solution.</p>
<p>The ETSI M2M xREM solution in Annex E of the ETSI M2M Managed Objects
[<span class="citation" data-cites="ETSIM2MInterfaces"><a
href="#ref-ETSIM2MInterfaces" role="doc-biblioref">[6]</a></span>
defines a cross reference of the following ETSI resources to the
existing Device:2 Data Model objects. These ETSI resources are:</p>
<ul>
<li>etsiDeviceInfo</li>
<li>etsiDeviceCapability</li>
<li>etsiMemory</li>
<li>etsiTrapEvent</li>
<li>etsiPerformanceLog</li>
<li>etsiFirmware</li>
<li>etsiSoftware</li>
<li>etsiReboot</li>
</ul>
<p>The implementation of these resources the use of the following
objects from the data model:</p>
<ul>
<li>DeviceInfo.</li>
<li>WiFi.</li>
<li>SmartCardReaders.</li>
<li>USB.</li>
<li>HomePlug.</li>
<li>MoCA.</li>
<li>UPA.</li>
<li>UPnP.</li>
<li>Hosts.</li>
<li>SoftwareModules.</li>
<li>FaultMgmt. (Use for etsiTrapEvent)</li>
<li>SelfTestDiagnostics.</li>
<li>DeviceInfo.VendorLogFile. (Use for etsiPerformanceLog)</li>
<li>ManagementServer.EmbeddedDevice.</li>
<li>ManagementServer.VirtualDevice.</li>
</ul>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:tr-069-functionality-for-etsi-m2m-rem">X.2.1 TR-069
Functionality for ETSI M2M REM</h3>
<p>In addition to the mandatory RPCs defined in TR-069 <span
class="citation" data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span>, the ETSI M2M xREM solution
requires that a M2M Device or Gateway implement the following optional
RPCs according to Section 9.2.1.11 of <span class="citation"
data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span>:</p>
<ul>
<li>Upload method</li>
<li>ScheduleDownload method</li>
<li>ScheduleInform method</li>
<li>ChangeDUState method</li>
<li>FactoryReset method</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:device2-data-model-and-functionality-for-etsi-m2m-rem-1">X.3
Device:2 Data Model and Functionality for ETSI M2M REM</h2>
<p>In addition to reusing objects and parameters, the ETSI M2M xREM
solution defines extensions to the resource model for the following ETSI
resources by defining extensions to the data model for the following
ETSI resources:</p>
<ul>
<li>etsiSclMo</li>
<li>etsiAreaNwkInfo</li>
<li>etsiAreaNwkDeviceInfo</li>
</ul>
<p>These resources provide administration of the SCL in order for the
SCL in the Device or Gateway to communicate with SCLs in the network. In
addition, these resources provide administration of the SCL for M2M
Devices within the local M2M area network attached to a Device or
Gateway in order to communicate with associated network SCLs.</p>
<p>The ETSI M2M Services Device model defines the ETSIM2M service in
support of the xREM functionality.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:m2m-service-scl-execution-environment">X.3.1 M2M Service SCL
Execution Environment</h3>
<p>CPEs that provide software execution capabilities have the option to
implement the Gateway Service Capabilities Layer and Gateway
Applications as software modules. When a SCL is implemented as a
software module, each instance of the GSCL and GA would be represented
as individual Deployment Units with the associated software and
configuration files. For the GSCL the vendor configuration file could
contain configuration elements (e.g., M2M Node Id, NSCL List) that would
be returned from or necessary to perform the M2M Service Bootstrap and
Service Connection Procedures.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:etsim2m-object">X.3.2 ETSIM2M Object</h3>
<p>The ETSIM2M objects provide administration of the SCL instantiated
within a Device or Gateway.</p>
<p>The primary administration functions of the service are to:</p>
<ul>
<li>Maintain the set of Network SCLs (NSCL) that the M2M Device or
Gateway SCL is registered.</li>
<li>Maintain the set of NSCLs to which the M2M Device or Gateway will
“announce” local resources.</li>
<li>Maintain a list of Store and Forward (SAF) policies associated with
the access network provider for message handling between M2M Devices in
the area network and the NSCL.</li>
<li>Maintain a list of Store and Forward (SAF) policies associated with
the access network provider for message handling between the gateway and
the NSCL.</li>
<li>Maintain a list of Store and Forward (SAF) policies associated with
the M2M service provider for message handling between M2M Devices in the
area network and the NSCL.</li>
<li>Maintain a list of Store and Forward (SAF) policies associated with
the M2M service provider for message handling between the gateway and
the NSCL.</li>
<li>Discovery and Maintenance of M2M Area Networks.</li>
<li>Discovery and Maintenance of M2M Devices.</li>
</ul>
<div class="note">
<p>As a SCL instance within a M2M Device or Gateway is associated with
one M2M service provider, the M2M Device or Gateway is capable of
maintaining multiple SCL instances.</p>
</div>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:m2m-service-bootstrap-and-service-connection-procedures">X.3.2.1
M2M Service Bootstrap and Service Connection Procedures</h4>
<p>In the ETSI M2M system, the M2M (Device or Gateway) Node must
establish the capability to connect with a M2M Network Node before the
SCLs are permitted to be registered using M2M Service Bootstrap and
Service Connection procedures.</p>
<p>The M2M Service Bootstrap and Service Connection procedures are
defined in section 8.2 of the ETSI M2M Functional Architecture <span
class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> and describe how some of the
credentials are shared and obtained in order to establish a connections
(e.g, HTTP TLS-PSK) during the exchange of RESTFul information over the
mId reference point.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:rules-for-instantiating-a-scl-instance">X.3.2.2 Rules for
Instantiating a SCL Instance</h4>
<p>A M2M Node is not modeled as a device management entity but is
considered a logical representation of the M2M components in the M2M
Device, M2M Gateway or the M2M Core. Such components include:</p>
<ul>
<li>One instance of a SCL</li>
<li>An optional M2M Service Bootstrap procedure</li>
<li>A M2M Service Connection procedure</li>
</ul>
<p>A M2M Node is identified by a globally unique identifier, the
M2M-Node-ID.</p>
<p>In addition to the logical representation of a M2M Node, the
following are constraints of a M2M Node that reflect on why a M2M Device
or Gateway would instantiate multiple SCL instances:</p>
<ul>
<li>A M2M Node is owned by one M2M Service Provider.</li>
<li>A M2M Node is instantiated upon M2M Bootstrap procedure or
pre-provisioning the M2M Device or Gateway with a M2M Service
Provider.</li>
<li>Multiple M2M Nodes MAY be instantiated on the same M2M Device or
Gateway by performing multiple M2M Bootstrap procedures either with the
same M2M Service Provider or with different M2M Service Providers.</li>
</ul>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scl-addressing">X.3.2.3 SCL Addressing</h4>
<p>When a SCL is instantiated the SCL is provided a SCL-ID using the M2M
Service Bootstrap procedure or through an out-of-band mechanism. Table
7.1 of the ETSI M2M Functional Architecture <span class="citation"
data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> describes the characteristics of the
SCL-ID.</p>
<p>When a M2M Device or Gateway SCL registers with a NSCL, the NSCL
maintains the following information in its resource tree for the SCL
that allows the NSCL to identify and contact the M2M Device or Gateway
SCL:</p>
<ul>
<li>SCL-ID that globally unique and MAY be the same as the
M2M-Node-ID.</li>
<li>M2MPoCs contactInfo of the M2M Device or Gateway SCL – This MAY be
the FQDN, IP Address and port information or it MAY be other information
that the M2M Service Provider can use to ask the network access provider
for an IP Address.</li>
</ul>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scl-registration">X.3.2.4 SCL Registration</h4>
<p>In order to communicate requests between the M2M Device or Gateway
SCL and the NSCL, the M2M Device or Gateway SCL registers with the NSCL.
Section 9.3.2.6.2 of the ETSI M2M Functional Architecture <span
class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> describes the registration process
including how attributes such as the SCLID, search strings and
expiration times are provisioned. In order for a M2M Device or Gateway
SCL to register with the NSCL, the M2M Device or Gateway SCL must be
provisioned with a list of potential NSCLs that the M2M Device or
Gateway SCL is registered. In addition to the list of NSCLs, the M2M
Device or Gateway SCL also has parameters to manage when a M2M Device or
Gateway SCL re-registers with the NSCL. The M2M Device or Gateway SCL
also has the capability to be requested to re-register with the NSCL
through its TR-069 interface.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:discovery-of-m2m-devices-through-the-scl">X.3.2.5 Discovery of
M2M Devices through the SCL</h4>
<p>Using the control plane, the M2M Device or Gateway SCL provides the
capability to return a list of resources that the M2M Device or Gateway
has discovered. Filtering MUST be performed on a subset of the offered
resources’ attributes using a query string. A match, that MAY include
ranges, is performed on the query string, and a successful response is
returned with a URI(s) list for resources that contains the matching
attributes. Section 9.3.2.27 of the ETSI M2M Functional Architecture
<span class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> describes this procedure. The M2M
Device or Gateway MAY be provisioned through the TR-069 interface to
either limit the number of URIs discovered by the device or define the
maximum size allowed for a discovery result.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:deannouncing-m2m-devices-through-the-scl">X.3.2.6 De/Announcing
M2M Devices through the SCL</h4>
<p>One capability of the M2M Device or Gateway SCL control plane is to
announce or de-announce M2M resources (e.g., access rights,
applications) to NSCL(s) to which the M2M Device or Gateway SCL has
registered if the SCL is contained within the “AnnounceToSCLList”.
Section 9.3.2.28 of the ETSI M2M Functional Architecture <span
class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> describes this procedure. The
“AnnouncedToSCLList” is maintained through the TR-069 interface.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scl-store-and-forward-policies">X.3.2.7 SCL Store and Forward
Policies</h4>
<p>The M2M Device or Gateway SCL is responsible for handling requests
from an attached M2M Device or itself and the NSCL. The handling of the
requests is based on criteria within the request (e.g., Request category
[RCAT], Tolerable Request Processing Delay [TRPDT]) as well as
conditions within the M2M Device or Gateway SCL (e.g., pending requests,
access network availability).</p>
<p>There are two types of SCL store and forward (SAF) policies:</p>
<ul>
<li>Access Network Provider SAF Policies</li>
<li>Service Provider SAF Policies</li>
</ul>
<p>The SAF policies are organized into instances of Policy sets. The
selection of which Policy sets are used by the M2M Device or Gateway SCL
is determined by the PolicyScope attribute of the Policy set.</p>
<p>Section 9.3.1.5 of the ETSI M2M Functional Architecture <span
class="citation" data-cites="ETSIM2MFA"><a href="#ref-ETSIM2MFA"
role="doc-biblioref">[5]</a></span> describes this procedure. These
policies are maintained through the TR-069 interface.</p>
<h5 class="appendix5 auto-hoverlink" data-info="header"
id="sec:access-network-provider-saf-policies">X.3.2.7.1 Access Network
Provider SAF Policies</h5>
<p>Access Network Provider SAF policies are used by M2M Device or
Gateway SCLs to determine if an Access Network is to be used when
forwarding requests from the M2M Device or Gateway SCL to the NSCL. The
determination of which Access network to use is based on:</p>
<ul>
<li>Schedule of RCAT values versus time: The M2M Device or Gateway SCL
is provisioned with information from the NSCL for the access network
provider regarding when it is appropriate to forward requests of a given
RCAT value.</li>
<li>Blocking of access attempts after failure to establish connectivity:
The M2M Device or Gateway SCL is provisioned with information from the
NSCL for the access network provider regarding the period of time over
which attempts to establish connectivity over its access network are not
appropriate after the previous attempt to establish connectivity over
the corresponding access network has failed. The period of time to block
attempts to establish connectivity can be a function of the number of
consecutive previous attempts to establish connectivity over this access
network.</li>
</ul>
<div class="note">
<p>An Access Network Provider SAF is identified from the Access Network
Provider name parameter.</p>
</div>
<h5 class="appendix5 auto-hoverlink" data-info="header"
id="sec:m2m-service-provider-saf-policies">X.3.2.7.2 M2M Service
Provider SAF Policies</h5>
<p>M2M Service Provider Store and Forward (SAF) policies are used by M2M
Device or Gateway SCLs to determine to forward a request to NSCL. The
determination if the request is forwarded is based on the:</p>
<ul>
<li>Wait time as function of number of pending requests: The M2M Device
or Gateway SCL is provisioned with information from the NSCL for the
service provider regarding how many pending requests of a given range of
RCAT values are sufficient to forward the aggregated request to the
NSCL. The ranges of RCAT values for different policies cannot
overlap.</li>
<li>Wait time as function of amount of pending request data: The M2M
Device or Gateway SCL is provisioned with information from the NSCL for
the service provider regarding a threshold of consumed storage (memory)
in the M2M Device or Gateway SCL that is needed to buffer data for
pending requests of a given range of RCAT values. The ranges of RCAT
values for different policies cannot overlap.</li>
<li>Selection among appropriate access networks: The M2M Device or
Gateway SCL is provisioned with information from the NSCL for the
service provider regarding how to select an access network for making an
attempt to establish connectivity from an ordered list of possible
access networks for a given range of RCAT values. The ranges of RCAT
values for different policies cannot overlap.</li>
<li>Default values for TRPDT and RCAT: The M2M Device or Gateway SCL is
provisioned with information from the NSCL for the service provider
regarding the TRPDT and RCAT values to use if they are not provided by
the request issuer.</li>
</ul>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:area-network-discovery-and-maintenance">X.3.2.8 Area Network
Discovery and Maintenance</h4>
<p>The M2M Device or Gateway SCL discovers properties of instances of
M2M Area Networks as well as the Devices (D’, d) associated with a M2M
Area Network. A M2M Area Network is a logical entity in that an instance
of an Area Network can span one or more physical interfaces of the M2M
Device or Gateway. In addition, a M2M Gateway can provide connectivity
to more than one instance of the same type of M2M Area Network. Examples
of M2M Area Networks include: Personal Area Network technologies such as
IEEE 802.15.x, Zigbee, Bluetooth, IETF ROLL, ISA100.11a or local
networks such as PLC, M-BUS, Wireless M-BUS and KNX.</p>
<p>A M2M Area Network is maintained as instances of an AreaNwkInstance.
Each AreaNwkInstance maintains opaque properties of the Area Network
using Property instances of name/value pairs. In addition, the
AreaNwkInstance also maintains a list of references to instances of
AreaNwkDeviceInfoInstance table that are associated with the Area
Network.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:m2m-device-discovery-and-maintenance">X.3.2.9 M2M Device
Discovery and Maintenance</h4>
<p>The M2M Device or Gateway maintains a list of discovered M2M Devices
(D’, d) that are attached to the SCL. A discovered M2M Device that is
associated with more than one AreaNwkInstance is represented as multiple
instances of AreaNwkDeviceInfoInstance objects.</p>
<figure id="fig:example-m2m-network">
<img src="images/example-m2m-network.png" id="img:example-m2m-network"
alt="Example M2M Network" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-m2m-network">
Figure 50:
Example M2M Network
</div></figcaption>
</figure>
<p>In <a href="#fig:example-m2m-network" class="figure">Figure 50</a>,
an M2M Gateway has two (2) SCL instances that manage three (3) M2M
Devices. Each M2M Device is represented in the Root Data Model’s
Hosts.Host table. The M2M Devices are represented by the
AreaNwkDeviceInfoInstance object that was discovered within a context of
an AreaNwkInstance of a SCL. As a M2M Device is capable of being
discovered through multiple M2M Area Networks, different instances of
the AreaNwkDeviceInfoInstance could reference the same or different Host
table entry.</p>
<p>Each AreaNwkDeviceInfoInstance maintains a reference to an
AreaNwkInstance object as well as properties specific to the device and
area network association (e.g., SleepInterval). In addition, each
AreaNwkDeviceInfoInstance maintains opaque properties of the device
using Property instances of name/value pairs.</p>
<h5 class="appendix5 auto-hoverlink" data-info="header"
id="sec:m2m-device-discovery-and-maintenance-1">X.3.2.9.1 M2M Device
Discovery and Maintenance</h5>
<p>M2M Devices are able to be managed through the TR-069 Embedded Object
and Virtual Device Proxy management capabilities. In these scenarios the
AreaNwkDeviceInfoInstances are known as Discovered Devices.</p>
<p>In the scenario where a M2M Device (D’, d) is discovered as part of
an Embedded or Virtual Device, the AreaNwkDeviceInfoInstance is
maintained as an item in the DiscoveryProtocolReference parameter of the
Embedded or Virtual Device using one or more of the protocols listed in
the DiscoveryProtocol parameter. <a
href="#fig:m2m-device-discovery-for-proxy-management"
class="figure">Figure 51</a> describes the scenario where the M2M
Devices are discovered using the ETSI-M2M protocols.</p>
<figure id="fig:m2m-device-discovery-for-proxy-management">
<img src="images/m2m-device-discovery-for-proxy-management.png"
id="img:m2m-device-discovery-for-proxy-management"
alt="M2M Device Discovery for Proxy Management" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:m2m-device-discovery-for-proxy-management">
Figure 51:
M2M Device Discovery for Proxy Management
</div></figcaption>
</figure>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scl-configuration">X.3.2.10 SCL Configuration</h4>
<p>The ETSI M2M Data Model includes the capability to provision the SCL
with objects and parameters necessary for the SCL to host resources and
transfer messages between M2M Devices and Gateway Applications and the
NSCL. This section describes the minimal configuration necessary for an
SCL to:</p>
<ul>
<li>Host resources</li>
<li>Transfer messages</li>
</ul>
<figure id="fig:etsi-m2m-data-model-structure">
<img src="images/etsi-m2m-data-model-structure.png"
id="img:etsi-m2m-data-model-structure"
alt="ETSI M2M Data Model Structure" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:etsi-m2m-data-model-structure">
Figure 52:
ETSI M2M Data Model Structure
</div></figcaption>
</figure>
<p><a href="#fig:etsi-m2m-data-model-structure" class="figure">Figure
52</a> depicts the objects within an ETSI SCL instance.</p>
<p>For deployments where the SCL will only host resources, the following
resources must be provisioned:</p>
<pre><code>SCL.{1}.
    Enable = true</code></pre>
<p>However for deployments where the SCL will transfer messages between
M2M Applications and the NSCL, each SCL must have:</p>
<ul>
<li>An enabled SCL</li>
<li>An enabled default SAFPolicySet</li>
<li>At least 1 enabled ANPPolicy with an enabled Schedule for each of
the enabled RequestCategory. There is one enabled RequestCategory
instance for each possible RCAT value (e.g., 8 possible values in ETSI
release 1.0)</li>
<li>Within the M2MSPPolicy, there is one enabled RequestCategory
instance for each possible RCAT value (e.g., 8 possible values in ETSI
release 1.0)</li>
</ul>
<p>As such the following resources must be provisioned:</p>
<pre><code>SCL.{1}.
    Enable = true
SCL.{1}.SAFPolicySet.{1}.
    Enable = true
    PolicyScope= default
SCL.{1}.SAFPolicySet.{1}.ANPPolicy.{1}.
    Enable = true
    ANName = *AccessNetworkProviderName*
SCL.{1}.SAFPolicySet.{1}.ANPPolicy.{1}.RequestCategory.{1}.
    Enable = true
    RCAT = *RCAT1*
SCL.{1}.SAFPolicySet.{1}.ANPPolicy.{1}.RequestCategory.{1}.Schedule.{1}.
    Enable = true
    Schedules = * * * * *
.
.
SCL.{1}.SAFPolicySet.{1}.ANPPolicy.{1}.RequestCategory.{7}.
    Enable = true
    RCAT = *RCAT7*
SCL.{1}.SAFPolicySet.{1}.ANPPolicy.{1}.RequestCategory.{7}.Schedule.{1}.
    Enable = true
    Schedules = * * * * *
SCL.{1}.SAFPolicySet.{1}.M2MSPPolicy.RequestCategory.{1}.
    Enable = true
    RCAT = *RCAT7*
*    *RankedANList = *AccessNetworkProviderName*
.
.
SCL.{1}.SAFPolicySet.{1}.M2MSPPolicy.RequestCategory.{7}.
    Enable = true
    RCAT = *RCAT7*
    RankedANList = *AccessNetworkProviderName*</code></pre>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:provider-bridge-theory-of-operation">Appendix
XI: Provider Bridge Theory of Operation</h1>
<p>A Provider Bridge is defined in 802.1Q-2011 <span class="citation"
data-cites="802.1Q-2011"><a href="#ref-802.1Q-2011"
role="doc-biblioref">[11]</a></span> as either a Provider Edge Bridge
(PEP) or an S-VLAN Bridge. A PEP provides the capability to stack VLAN
tags with the inner tag being the C-TAG and the outer tag being the
S-TAG. An S-VLAN Bridge provides a mechanism to process a S-TAG but does
not utilize the mechanism to stack C-VLAN tags. The Provider Bridge
model supports both of these types of Provider Bridges through the use
of the ProviderBridge and VLANTermination objects.</p>
<p>Regarding different traffic bridging rules for Provider Bridges, the
possible cases are characterized as follows:</p>
<ul>
<li>Provider Edge Bridge as a pure VLAN Bridge</li>
<li>Stacked VLAN termination in a routed environment</li>
<li>Internally generated to tagged WAN traffic as a S-VLAN
Termination</li>
</ul>
<p>These scenarios are portrayed in <a
href="#fig:provider-bridge-scenarios" class="figure">Figure 53</a>,
where:</p>
<ul>
<li>Residential Domain traffic is treated as a Stacked VLAN termination
in a routed environment</li>
<li>Public Domain and Roaming Domain traffic is treated as a Provider
Edge Bridge in a pure VLAN Bridge environment</li>
<li>Internally generated Device traffic is treated as a S-VLAN
termination in a routed environment</li>
</ul>
<figure id="fig:provider-bridge-scenarios">
<img src="images/provider-bridge-scenarios.png"
id="img:provider-bridge-scenarios" alt="Provider Bridge Scenarios" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:provider-bridge-scenarios">
Figure 53:
Provider Bridge Scenarios
</div></figcaption>
</figure>
<p>In order to model the traffic scenarios in <a
href="#fig:provider-bridge-scenarios" class="figure">Figure 53</a>, the
use of the VLANTermination and Bridging Objects are used.</p>
<figure id="fig:provider-bridge-components">
<img src="images/provider-bridge-components.png"
id="img:provider-bridge-components" alt="Provider Bridge Components" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:provider-bridge-components">
Figure 54:
Provider Bridge Components
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:residential-domain-scenario">XI.1 Residential Domain
Scenario</h2>
<p>In the Residential Domain scenario untagged traffic is routed from
the Ethernet and SSIDa interfaces and tagged with a customer VLAN tag
(C-TAG) of VLANa and then double tagged with a Service Provider VLAN tag
(S-TAG) of VLANx. This requires the use of:</p>
<ul>
<li>802.1d Bridge instance: This object bridges the residential domain
traffic to the Router.</li>
<li>Layer3 Forwarding Rule: This object ensures that traffic between the
Bridge and VLANTermination objects is forwarded to the correct
interface. The Rule utilizes the IP Interfaces of the Bridge (IP Intf:
Bridge_a) and Residential Domain (IP Intf: Residential)</li>
<li>VLANTermination object (C-TAG): The C-TAG is applied and removed for
traffic egress and ingress to the IP Intf: Residential interface.</li>
<li>VLANTermination object (S-TAG): The S-TAG is applied and removed for
traffic from and to the C-VLAN termination object.</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:device-traffic-scenario">XI.2 Device Traffic Scenario</h2>
<p>In the Device Traffic scenario untagged traffic is routed from the
Device and tagged with a Service Provider VLAN tag (S-TAG) of VLANu.
This requires the use of:</p>
<ul>
<li>VLANTermination object (S-TAG): The S-TAG is applied and removed for
traffic egress and ingress to the IP Intf: Device interface.</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:public-and-roaming-domain-scenarios">XI.3 Public and Roaming
Domain Scenarios</h2>
<p>In the Public and Roaming Domain scenarios untagged traffic is
bridged from the SSIDb and SSIDc interfaces and tagged with a customer
VLAN tag (C-TAG) of VLANa and then double tagged with a Service Provider
VLAN tag (S-TAG) of VLANy and VLANz respectively. This requires the use
of:</p>
<ul>
<li>ProviderBridge instance: This object contains and references the
customer and service provider bridge components.</li>
<li>Bridge instance (Customer Public): This object bridges and tags
(C-TAG) traffic in the Public Domain to the service provider bridge
component.</li>
<li>Bridge instance (Customer Roaming): This object bridges and tags
(C-TAG) traffic in the Roaming Domain to the service provider bridge
component.</li>
<li>Bridge instance (Service Provider): This object add and removes a
service provider tag (S-TAG) for customer tagged traffic (C-VLAN) from
the Pubic and Roaming Domains.</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:provisioning-provider-bridges">XI.4 Provisioning Provider
Bridges</h2>
<p>A Provider Bridge provides support for Provider Bridges and Provider
Edge Bridges as defined in 802.1Q-2011. The difference between a
Provider Bridge and a Provider Edge Bridge is that a Provider Edge
Bridge incorporates a C-TAG and S-TAG while a Provider Bridge has a
S-TAG. The data model differentiates which type of provider using the
Type parameter of the ProviderBridge.{i} object.</p>
<p>When configuring the components of a Provider Bridge, the Bridge
instance associated with the SVLAN component will have its
Device.Bridging.Bridge.{i}.Port.{i}. objects provisioned as either
ProviderNetworkPort or a CustomerNetworkPort. Likewise, the CVLAN
component(s) will have its Device.Bridging.Bridge.{i}.Port.{i}. objects
provisioned as CustomerEdgePorts.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:associating-customer-edge-ports-with-customer-network-ports">XI.4.1
Associating Customer Edge Ports with Customer Network Ports</h3>
<p>Ports of type CustomerEdgePort are associated with ports of type
CustomerNetworkPort by assigning the ports of type CustomerNetworkPort
and ports of type CustomerEdgePort to the port membership
(Bridging.Bridge.{i}.VLANPort.{i}.) of the S-VLAN for the Bridge
instance of the S-VLAN component.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:zigbee-theory-of-operation">Appendix XII:
ZigBee Theory of Operation</h1>
<p>This section explains how the ZigBee Device:2 data model can be used
for the management of ZigBee devices.</p>
<div class="note">
<p>This Theory of Operation is explained using CWMP but the same
principles also apply for USP.</p>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:cwmp-management-using-the-zigbee-data-model">XII.1 CWMP
management using the ZigBee data model</h2>
<p><a
href="#fig:usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069"
class="figure">Figure 55</a> and <a
href="#fig:example-sequence-diagram-of-zigbee-management-with-tr-069"
class="figure">Figure 56</a> present the principle and an example basic
sequence for the management of ZigBee devices using the Device:2 ZigBee
data model. The ZigBee protocol is specified in <span class="citation"
data-cites="ZigBee2007"><a href="#ref-ZigBee2007"
role="doc-biblioref">[70]</a></span>.</p>
<p>The ZigBee devices reside behind a CPE proxy and communicate with the
ACS via this CPE proxy. The CPE proxy normally resides in a device such
as a broadband router, i.e., a home gateway or an enterprise gateway,
and it has a proxy function to translate CWMP messages to ZDO (ZigBee
Device Object) function invocations based on the ZigBee data model. The
proxy function translates the messages by using a mapping of ZigBee data
model objects and CWMP methods to ZDO functions and their parameters. A
ZigBee device management example using CWMP is shown in <a
href="#fig:usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069"
class="figure">Figure 55</a>.</p>
<figure
id="fig:usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069">
<img
src="images/usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069.png"
id="img:usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069"
alt="Usage of the data model to manage ZigBee devices with TR-069" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:usage-of-the-data-model-to-manage-zigbee-devices-with-tr-069">
Figure 55:
Usage of the data model to manage ZigBee devices with TR-069
</div></figcaption>
</figure>
<figure
id="fig:example-sequence-diagram-of-zigbee-management-with-tr-069">
<img
src="images/example-sequence-diagram-of-zigbee-management-with-tr-069.png"
id="img:example-sequence-diagram-of-zigbee-management-with-tr-069"
alt="Example sequence diagram of ZigBee management with TR-069" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-sequence-diagram-of-zigbee-management-with-tr-069">
Figure 56:
Example sequence diagram of ZigBee management with TR-069
</div></figcaption>
</figure>
<p>This example shows how the ACS gets the network address of a ZigBee
device by using TR-069 communication based on the ZigBee data model. The
ACS performs a “GetParameterValues” CWMP method call containing the
parameter “Device.ZigBee.ZDO.{i}.NetworkAddress” of the ZigBee data
model, which refers to the ZigBee network address. The proxy function in
the CPE proxy changes the received message to a ZDO message that calls
some ZDO function on the ZigBee Coordinator. The ZigBee Coordinator
manages the ZigBee devices according to the called ZDO function and
sends the result (the searched network address, in this case) to the
proxy. The proxy function changes the ZDO management result to a CWMP
message which is denoted in <a
href="#fig:example-sequence-diagram-of-zigbee-management-with-tr-069"
class="figure">Figure 56</a> as “GetParameterValuesResponse”. The
parameter name inside the parameter list is
“Device.ZigBee.ZDO.{i}.NetworkAddress” and the corresponding value is
“0x0fE3” (network address instance).</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:cwmp-proxying-mechanisms-and-the-zigbee-data-model">XII.2 CWMP
proxying mechanisms and the ZigBee data model</h2>
<p>The following two issues related to the proxying of ZigBee devices
with the standard TR-069 proxying mechanisms are out of scope of this
document:</p>
<ul>
<li>Mapping of TR-069 methods plus data model objects/parameters to ZDO
functions.</li>
<li>Description of the exact approaches (and their differences) for
proxying a ZigBee device (i) as a Virtual Device or (ii) as an Embedded
Device.</li>
</ul>
<p>However, the following example explains how the main needs of the
proxying mechanisms have been taken into account and are covered by the
designed data model.</p>
<p>Imagine, for example, a ZigBee coordinator that controls a network
which contains, among others, a ZigBee device that is used in a home
automation system, i.e., implements the Home Automation Application
Profile (0104). Then, the instantiation of the data model for the CPE
contains, among others, the following two parameter values (note that
“ZC” stands for ZigBee coordinator):</p>
<pre><code>Device.ZigBee.ZDO.1.NodeDescriptor.LogicalType = &quot;ZC&quot;
Device.ZigBee.ZDO.2.ApplicationEndpoint.1.ApplicationProfileId = &quot;0104&quot;</code></pre>
<p>In order to reference and manage these devices with the
EmbeddedDevice mechanism, the CPE instance would simply also include,
among others, the following entries:</p>
<p><code>Device.ManagementServer.EmbeddedDevice.1.Reference</code></p>
<ul>
<li>(<em>pointing to</em>)
<code>Device.DeviceInfo.TemperatureStatus.TemperatureSensor.2</code></li>
</ul>
<p><code>Device.ManagementServer.EmbeddedDevice.1.ProtocolReference</code></p>
<ul>
<li>(<em>pointing to</em>)
<code>Device.ZigBee.ZDO.2.ApplicationEndpoint.1</code></li>
</ul>
<p><code>Device.ManagementServer.EmbeddedDevice.2.DiscoveryReference</code></p>
<ul>
<li>(<em>pointing to</em>) <code>Device.ZigBee.ZDO.1</code></li>
</ul>
<p>For setting the temperature for TemperatureSensor.2, for example, the
TR-069 proxy would send a request through the ZigBee coordinator to the
Application endpoint referenced by the ProxyReference parameter on the
EmbeddedDevice instance. As indicated by the value of
<code>Device.ManagementServer.EmbeddedDevice.1.Reference</code> in the
above example<code>,</code> multiple sensors integrated in the same
ZigBee device (i.e., same ZDO instance) can be modeled as different
Embedded or Virtual devices while referring to the same ZDO object.</p>
<p>According to the ZigBee protocol, the discovery of ZigBee devices is
the responsibility of the ZigBee coordinator. Thus, a ZDO instance that
has a LogicalType=“ZC” can be made a DiscoveryReference of the various
EmbeddedDevice and VirtualDevice instances.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header"
id="sec:port-control-protocol-theory-of-operation">Appendix XIII: Port
Control Protocol Theory of Operation</h1>
<p>The Port Control Protocol (PCP) allows an IPv6 or IPv4 host to
control how incoming IPv6 or IPv4 packets are translated and forwarded
by a Network Address Translator (NAT) or simple firewall (generically
referred to as the “PCP-controlled device”), and also allows a host to
optimize its outgoing NAT keepalive messages.</p>
<p>When a PCP client is embedded in a device, the PCP client can be
invoked by:</p>
<ul>
<li>Applications running on the device itself (remote access,
VoIP…),</li>
<li>The device GUI,</li>
<li>The Controller,</li>
<li>Interworking functions <span class="citation"
data-cites="RFC6970"><a href="#ref-RFC6970"
role="doc-biblioref">[47]</a></span> and the PCP proxy that allow
applications running on other end-devices connected to the device to
manage the PCP-controlled device.</li>
</ul>
<figure id="fig:example-of-a-pcp-client-embedded-in-the-rg-using-cwmp">
<img
src="images/example-of-a-pcp-client-embedded-in-the-rg-using-cwmp.png"
id="img:example-of-a-pcp-client-embedded-in-the-rg-using-cwmp"
alt="Example of a PCP Client embedded in the RG using CWMP" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-of-a-pcp-client-embedded-in-the-rg-using-cwmp">
Figure 57:
Example of a PCP Client embedded in the RG using CWMP
</div></figcaption>
</figure>
<figure
id="fig:example-of-a-pcp-client-embedded-in-a-device-using-cwmp-with-pcp-proxy-in-the-rg">
<img
src="images/example-of-a-pcp-client-embedded-in-a-device-using-cwmp-with-pcp-proxy-in-the-rg.png"
id="img:example-of-a-pcp-client-embedded-in-a-device-using-cwmp-with-pcp-proxy-in-the-rg"
alt="Example of a PCP Client embedded in a device using CWMP, with PCP Proxy in the RG" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-of-a-pcp-client-embedded-in-a-device-using-cwmp-with-pcp-proxy-in-the-rg">
Figure 58:
Example of a PCP Client embedded in a device using CWMP, with PCP Proxy
in the RG
</div></figcaption>
</figure>
<p>Defining a PCP data model allows the Controller to remotely manage
the PCP client including:</p>
<ul>
<li>Configuration and monitoring of the PCP client itself,</li>
<li>Configuration and monitoring of the PCP servers interacting with the
client,</li>
<li>Monitoring PCP Interworking Functions,</li>
<li>Monitoring and setting rules in the PCP-controlled device from the
PCP client.</li>
</ul>
<p>Whereas the description of objects themselves is enough to understand
how to proceed, some operations need further explanation about the way
to manage the objects.</p>
<p>This theory of operation relies on IETF RFCs and drafts:</p>
<ul>
<li>RFC 6887 Port Control Protocol (PCP) <span class="citation"
data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>,</li>
<li>RFC 6970 UPnP IGD-PCP Interworking Function <span class="citation"
data-cites="RFC6970"><a href="#ref-RFC6970"
role="doc-biblioref">[47]</a></span>,</li>
<li>DHCP Options for the Port Control Protocol (PCP) <span
class="citation" data-cites="RFC7291"><a href="#ref-RFC7291"
role="doc-biblioref">[48]</a></span>,</li>
<li>Port Control Protocol (PCP) Proxy Function <span class="citation"
data-cites="RFC7648"><a href="#ref-RFC7648"
role="doc-biblioref">[54]</a></span>,</li>
<li>PCP Server Selection <span class="citation" data-cites="RFC7488"><a
href="#ref-RFC7488" role="doc-biblioref">[49]</a></span>,</li>
<li>PCP Flow Examples <span class="citation"
data-cites="draft-boucadair-pcp-flow-examples"><a
href="#ref-draft-boucadair-pcp-flow-examples"
role="doc-biblioref">[4]</a></span>.</li>
</ul>
<p>The data model allows for more than one PCP client, but those clients
operate independently. Therefore, the text below considers only one PCP
client.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:configuration-and-monitoring-of-the-pcp-server">XIII.1
Configuration and monitoring of the PCP Server</h2>
<p>Prior to sending its first PCP message, the PCP client determines
which server to use as described in <span class="citation"
data-cites="RFC7488"><a href="#ref-RFC7488"
role="doc-biblioref">[49]</a></span>. To do so the PCP client of the CPE
can be configured statically (GUI or CWMP) or via DHCP (v4 or v6).</p>
<ul>
<li><p>When configured via DHCP, the CPE receives a list (at least one)
of PCP server addresses in one or more <em>OPTION_V4_PCP_SERVER</em> or
<em>OPTION_V6_PCP_SERVER</em> DHCP options. Based on the content of
these DHCP options, the CPE creates one or more instances of
<em>PCP.Client.{i}.Server</em> (see <span class="citation"
data-cites="RFC7291"><a href="#ref-RFC7291"
role="doc-biblioref">[48]</a></span>). The list of addresses provided
for each PCP server is stored in the <em>ServerNameOrAddress</em> and
<em>AdditionalServerAddresses</em> parameters and the <em>Origin</em>
parameter is set to either “DHCPv4” or “DHCPv6”.</p></li>
<li><p>When statically configured, one instance of
<em>PCP.Client.{i}.Server</em> is created per server, with the
<em>Origin</em> parameter set to “Static”. The server is defined by
either an FQDN or an IP address in
<em>ServerNameOrAddress</em>.</p></li>
</ul>
<p>Based on these server definitions, the PCP client follows the
procedures specified in <span class="citation" data-cites="RFC7488"><a
href="#ref-RFC7488" role="doc-biblioref">[49]</a></span> to determine
the IP Address to be used for each configured PCP server.</p>
<ul>
<li><p>While the PCP client is trying to connect to a PCP server on a
given IP address, the <em>PCP.Client.{i}.Server</em> object’s
<em>ServerAddressInUse</em> holds that IP address and its
<em>Status</em> is “Connecting”.</p></li>
<li><p>When the PCP client has successfully received a response from a
server, <em>Status</em> becomes “Enabled” and server-discovered
properties (<em>CurrentVersion</em>, <em>Capabilities</em>…) are stored
in the corresponding parameters.</p></li>
<li><p>If the PCP client fails to connect to a given PCP server,
<em>ServerAddressInUse</em> remains the last IP address tried and
<em>Status</em> reflects the appropriate error condition.</p></li>
</ul>
<p>No conflict or doubt can arise between DHCP and static
configurations, because they are represented in separate
<em>PCP.Client.{i}.Server</em> instances, with <em>Origin</em> to record
the origin of the configuration. <em>ServerNameOrAddress</em> is
writable by the Controller only if <em>Origin</em> is “Static”.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:monitoring-and-setting-rules-set-by-the-pcp-client">XIII.2
Monitoring and setting rules set by the PCP client</h2>
<p>Once a PCP server has been successfully contacted, the PCP client is
ready to set rules in the corresponding PCP-controlled device. Depending
on the use case, the PCP client selects the appropriate PCP server based
on its <em>Capabilities</em>, as described in Section 10 of <span
class="citation" data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>. It is possible to define the
following mappings:</p>
<p><u>Inbound Mapping without filters</u><br />
An inbound mapping is defined by an instance of the
<em>PCP.Client.{i}.Server.{i}.InboundMapping</em> table. It is created
by a PCP request with the MAP OpCode, as described in Section 11 of
<span class="citation" data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>. This is allowed only if
<em>PCP.Client.{i}.MAPEnable</em> is “true”.</p>
<p><u>Inbound Mapping with filters</u><br />
As above, but additional filters are defined by instances of the
<em>PCP.Client.{i}.Server.{i}.InboundMapping.{i}.Filter</em> table.
Filters are specified in the PCP request using the FILTER option, as
described in Section 13.3 of <span class="citation"
data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>. This is allowed only if
<em>PCP.Client.{i}.FILTEREnable</em> is “true”.</p>
<p><u>Outbound Mapping</u><br />
An outbound mapping is defined by an instance of the
<em>PCP.Client.{i}.Server.{i}.OutboundMapping</em> table. It is created
by a PCP request with the PEER OpCode, as described in Section 12 of
<span class="citation" data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>. This is allowed only if
<em>PCP.Client.{i}.PEEREnable</em> is “true”.</p>
<p>It is possible to define a mapping on behalf of another device. The
PCP request uses the THIRD_PARTY option to create the mapping, as
described in Section 13.1 of <span class="citation"
data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>. This is allowed only if
<em>PCP.Client.{i}.THIRDPARTYStatus</em> is “Enabled”.</p>
<p>These operations can be requested by the device itself (embedded
applications, GUI, CWMP…) or by another device through the UPnP IGD
interworking function <span class="citation" data-cites="RFC6970"><a
href="#ref-RFC6970" role="doc-biblioref">[47]</a></span> (if
<em>PCP.Client.{i}.UPnPIWF.Status</em> is “Enabled”) or the PCP Proxy
<span class="citation" data-cites="RFC7648"><a href="#ref-RFC7648"
role="doc-biblioref">[54]</a></span> (if
<em>PCP.Client.{i}.PCPProxy.Status</em> is “Enabled”).</p>
<p><span class="citation"
data-cites="draft-boucadair-pcp-flow-examples"><a
href="#ref-draft-boucadair-pcp-flow-examples"
role="doc-biblioref">[4]</a></span> provides a set of examples to
illustrate PCP operations. These operations can be monitored by getting
<em>PCP.Client.{i}.Server.{i}.InboundMapping</em> and
<em>PCP.Client.{i}.Server.{i}.OutboundMapping</em> objects<em>.</em> The
parameters sent by the PCP client in MAP or PEER requests are
represented in corresponding parameters <em>(Lifetime,
SuggestedExternalIPAddress, SuggestedExternalPort,
SuggestedExternalPortEndRange, ProtocolNumber, InternalPort</em>…) of
<em>PCP.Client.Server.{i}.InboundMapping</em> and
<em>PCP.Client.Server.{i}.OutboundMapping.</em> The <em>Origin</em>
parameter denotes which mechanism triggered the request:</p>
<ul>
<li>“Internal” for an embedded application,</li>
<li>“Static” for a request issued from the GUI or set using CWMP (see
next paragraph),</li>
<li>“UPnP_IWF” for a UPnP IGD device,</li>
<li>“PCP_Proxy” for a PCP device.</li>
</ul>
<p>The parameters received when the PCP-controlled device has processed
the request are represented in corresponding parameters <em>(Lifetime,
AssignedExternalIPAddress, AssignedExternalPort,
AssignedExternalPortEndRange</em>…) of
<em>PCP.Client.{i}.Server.{i}.InboundMapping</em> and
<em>PCP.Client.{i}.Server.{i}.OutboundMapping.</em></p>
<p>To remotely create rules using CWMP or USP, the Controller configures
the request to be sent by the PCP Client. To do so the Controller
creates the necessary objects and sets, depending on the operation, the
<em>Lifetime, SuggestedExternalIPAddress, SuggestedExternalPort,
SuggestedExternalPortEndRange, ProtocolNumber, InternalPort</em>
parameters of <em>PCP.Client.{i}.Server.{i}.InboundMapping</em> or of
<em>PCP.Client.{i}.Server.{i}.OutboundMapping.</em> To monitor the
result, the Controller will get
<em>PCP.Client.{i}.Server.{i}.InboundMapping</em> and
<em>PCP.Client.{i}.Server.{i}.OutboundMapping</em> objects to retrieve
the parameters received from the PCP-controlled device.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:rapid-recovery">XIII.3 Rapid recovery</h2>
<p>A recovery mechanism for situations where the PCP server loses its
state is described in Section 14 of <span class="citation"
data-cites="RFC6887"><a href="#ref-RFC6887"
role="doc-biblioref">[46]</a></span>. This is usable only if
<em>PCP.Client.{i}.ANNOUNCEEnable</em> is “true”.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:gre-tunnel-theory-of-operation">Appendix XIV:
GRE Tunnel Theory of Operation</h1>
<p>See <a href="#sec:tunneling" class="heading">Tunneling</a> for
general information on how tunneling is modeled.</p>
<p>RFC 2784 <span class="citation" data-cites="RFC2784"><a
href="#ref-RFC2784" role="doc-biblioref">[18]</a></span> defines a
generic mechanism to encapsulate a packet of protocol A (known as the
payload protocol) in a GRE packet. The resulting GRE packet is then
encapsulated into a protocol B (known as the delivery protocol). The
result of this operation is a payload packet that is encapsulated in a
GRE tunnel delivered via protocol B. RFC 2890 <span class="citation"
data-cites="RFC2890"><a href="#ref-RFC2890"
role="doc-biblioref">[20]</a></span> extends the GRE header with two
optional fields. The Key field provides an identifier to identify flows
within the GRE tunnel. The Sequence Number field is used to maintain the
sequence of packets within the GRE tunnel.</p>
<p>Device:2 models a GRE tunnel using the <em>GRE.Tunnel</em> object.
Multiple GRE flows to the same remote endpoint are possible by defining
multiple <em>GRE.Tunnel.{i}.Interface</em> instances within the same
<em>GRE.Tunnel</em> instance.</p>
<p>This Appendix describes the usage of GRE for two scenarios: L2
payload over GRE and L3 payload over GRE.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:l2-payload-over-gre">XIV.1 L2 Payload over GRE</h2>
<p>For this example consider a Provider Edge Bridge that discriminates 2
separate VLANs as shown in <a href="#fig:vlan-traffic-over-gre"
class="figure">Figure 59</a>. In this case the service provider does not
support a VLAN infrastructure at the access node, but does at the core
network.</p>
<p>A GRE tunnel is used to preserve the VLAN tagging at the edge to
further interconnect the other VLAN segments. In this scenario, as the
remote endpoint is the same in both cases, the VLANs are modeled as two
flows within a single instance of the <em>GRE.Tunnel.{i}</em>
object.</p>
<p>In addition, the <em>DSCPMarkPolicy</em> parameter can be used to
assign DSCP values to each <em>GRE.Tunnel.{i}.Interface</em> instance
for QoS treatment in the access network and towards the GRE
concentrator.</p>
<figure id="fig:vlan-traffic-over-gre">
<img src="images/vlan-traffic-over-gre.png"
id="img:vlan-traffic-over-gre" alt="VLAN Traffic over GRE" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:vlan-traffic-over-gre">
Figure 59:
VLAN Traffic over GRE
</div></figcaption>
</figure>
<p>The GRE Tunnel interface layout is shown in <a
href="#fig:l2-over-gre-tunnel" class="figure">Figure 60</a>.</p>
<figure id="fig:l2-over-gre-tunnel">
<img src="images/l2-over-gre-tunnel.png" id="img:l2-over-gre-tunnel"
alt="L2 over GRE Tunnel" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:l2-over-gre-tunnel">
Figure 60:
L2 over GRE Tunnel
</div></figcaption>
</figure>
<p>The configuration for this scenario assumes that the WAN Ethernet
interface, Ethernet Link and IP interface objects have been previously
configured; likewise the LAN Ethernet and Bridging objects have been
previously configured. This section focuses on the association and
configuration of the GRE tunnel with the WAN IP interface and the Bridge
Ports.</p>
<p>The example configuration uses the RFC 2890 <span class="citation"
data-cites="RFC2890"><a href="#ref-RFC2890"
role="doc-biblioref">[20]</a></span> Key field to determine the GRE
tunnel interface to which the GRE tunnel will forward packets.</p>
<div class="code">
<div class="line-block"><u><strong><em>GRE
Tunnel</em></strong></u><br />
<strong>Device.GRE.Tunnel.1.Enable = True</strong><br />
<strong>Device.GRE.Tunnel.1.RemoteEndPoints =
GRE-IPAddress</strong><br />
<strong>Device.GRE.Tunnel.1.DeliveryHeaderProtocol = IPv4</strong><br />
<br />
<u><strong><em>GRE Tunnel Interface 1</em></strong></u><br />
<strong>Device.GRE.Tunnel.1.Interface.1</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.1.Enable = True</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.1.KeyIdentifierGenerationPolicy =
Provisioned</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.1.KeyIdentifier = 1</strong><br />
<br />
<u><strong><em>GRE Tunnel Interface 2</em></strong></u><br />
<strong>Device.GRE.Tunnel.1.Interface.2</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.2.Enable = True</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.2.KeyIdentifierGenerationPolicy =
Provisioned</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.2.KeyIdentifier = 2</strong><br />
<br />
<u><strong><em>Associate Bridge Ports with GRE Tunnel
Interfaces</em></strong></u><br />
<strong>Device.Bridging.Bridge.1.Port.1.LowerLayers =
Device.GRE.Tunnel.1.Interface.1</strong><br />
<strong>Device.Bridging.Bridge.1.Port.2.LowerLayers =
Device.GRE.Tunnel.1.Interface.2</strong><br />
<br />
<u><strong><em>Assign the DSCP value to each GRE Tunnel Interface using
the GRE.Filter</em></strong></u><br />
<strong>Device.GRE.Filter.1</strong><br />
<strong>Device.GRE.Filter.1.Enable = True</strong><br />
<strong>Device.GRE.Filter.1.Order = 1</strong><br />
<strong>Device.GRE.Filter.1.Interface =
Device.GRE.Tunnel.1.Interface.1</strong><br />
<strong>Device.GRE.Filter.1.DSCPMarkPolicy = DSCP1</strong><br />
<strong>Device.GRE.Filter.2</strong><br />
<strong>Device.GRE.Filter.2.Enable = True</strong><br />
<strong>Device.GRE.Filter.2.Order = 2</strong><br />
<strong>Device.GRE.Filter.2.Interface =
Device.GRE.Tunnel.1.Interface.2</strong><br />
<strong>Device.GRE.Filter.2.DSCPMarkPolicy = DSCP2</strong></div>
</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:l3-payload-over-gre">XIV.2 L3 Payload over GRE</h2>
<p>This example describes an IP in IP encapsulation where a GRE tunnel
takes IPv4 payload and encapsulates over IPv6.</p>
<p><a href="#fig:ip-over-ip-gre-encapsulation" class="figure">Figure
61</a> shows the scenario where an IPv4 LAN network is tunneled in an
IPv6 GRE tunnel that uses IPv6 global addresses.</p>
<p>The GRE tunnels use the default IPv6 WAN interface of the CPE.</p>
<figure id="fig:ip-over-ip-gre-encapsulation">
<img src="images/ip-over-ip-gre-encapsulation.png"
id="img:ip-over-ip-gre-encapsulation"
alt="IP over IP GRE Encapsulation" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ip-over-ip-gre-encapsulation">
Figure 61:
IP over IP GRE Encapsulation
</div></figcaption>
</figure>
<p><a href="#fig:l3-over-gre-tunnel" class="figure">Figure 62</a> shows
the configuration of a GRE tunnel for an IPv4 Private network attached
to a LAN interface that is encapsulated in the IPv6 packet.</p>
<figure id="fig:l3-over-gre-tunnel">
<img src="images/l3-over-gre-tunnel.png" id="img:l3-over-gre-tunnel"
alt="L3 over GRE Tunnel" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:l3-over-gre-tunnel">
Figure 62:
L3 over GRE Tunnel
</div></figcaption>
</figure>
<p>The configuration for this scenario assumes that the WAN and LAN
Ethernet interface, Ethernet Link and IP interface objects have been
previously configured. This section focuses on the association and
configuration of the GRE tunnel with the WAN and Tunnel IP
interfaces.</p>
<div class="code">
<div class="line-block"><u><strong><em>GRE
Tunnel</em></strong></u><br />
<strong>Device.GRE.Tunnel.1.Enable = True</strong><br />
<strong>Device.GRE.Tunnel.1.RemoteEndPoints =
GRE-IPAddress</strong><br />
<strong>Device.GRE.Tunnel.1.DeliveryHeaderProtocol = IPv6</strong><br />
<br />
<u><strong><em>GRE Tunnel Interface 1</em></strong></u><br />
<strong>Device.GRE.Tunnel.1.Interface.1</strong><br />
<strong>Device.GRE.Tunnel.1.Interface.1.Enable = True</strong><br />
<br />
<u><strong><em>Associate Tunnel IPv4 Interface with GRE Tunnel
Interface</em></strong></u><br />
<strong>Device.IP.Interface.3.LowerLayers =
Device.GRE.Tunnel.1.Interface.1</strong></div>
</div>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:map-theory-of-operation">Appendix XV: MAP
Theory of Operation</h1>
<p>See <a href="#sec:tunneling" class="heading">Tunneling</a> for
general information on how tunneling is modeled.</p>
<p>MAP (Mapping of Address and Port) is a mechanism for transporting
IPv4 packets across an IPv6 network, and a generic mechanism for mapping
between IPv6 addresses and IPv4 addresses and ports. There are two
mutually exclusive MAP transport modes, both of which use NAPT44
(modified to use a restricted port range):</p>
<ul>
<li>MAP-E (Encapsulation) <span class="citation" data-cites="RFC7597"><a
href="#ref-RFC7597" role="doc-biblioref">[51]</a></span> uses an
IPv4-in-IPv6 tunnel.</li>
<li>MAP-T (Translation) <span class="citation" data-cites="RFC7599"><a
href="#ref-RFC7599" role="doc-biblioref">[53]</a></span> uses stateless
NAT64.</li>
</ul>
<p>Many aspects of the MAP configuration are the same for both MAP-E and
MAP-T. <span class="citation" data-cites="RFC7598"><a
href="#ref-RFC7598" role="doc-biblioref">[52]</a></span> defines DHCPv6
options for configuring MAP parameters, and the Device:2 data model
parameters correspond closely to these parameters.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:map-configuration-parameters">XV.1 MAP Configuration
Parameters</h2>
<p>The MAP-T architecture is illustrated in <a
href="#fig:map-t-architecture" class="figure">Figure 63</a>. The MAP-E
architecture diagram looks very similar, but differs as follows:</p>
<ul>
<li>The CPE’s MAP function involves 6-4 encapsulation rather than 6-4
translation.</li>
<li>The CPE uses a Border Router (BR) IPv6 address rather than a
prefix.</li>
<li>Non MAP-aware servers (i.e., native IPv6 servers) can’t be reached
by IPv4 devices behind the CPE (i.e., can’t be part of the MAP
domain).</li>
</ul>
<figure id="fig:map-t-architecture">
<img src="images/map-t-architecture.png" id="img:map-t-architecture"
alt="MAP-T Architecture" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:map-t-architecture">
Figure 63:
MAP-T Architecture
</div></figcaption>
</figure>
<p>The Device:2 data model models each MAP domain as an instance of the
corresponding <em>MAP.Domain</em> table. The most important domain
parameters are:</p>
<ul>
<li><em>TransportMode</em>: “Encapsulation” (MAP-E) or “Translation”
(MAP-T).</li>
<li><em>WANInterface</em>: the WAN IP interface through which all MAP
traffic will flow.</li>
<li><em>IPv6Prefix</em>: end-user IPv6 prefix; one of this interface’s
prefixes, typically assigned via DHCPv6 Prefix Delegation.</li>
<li><em>BRIPv6Prefix</em>: the Border Router IPv6 prefix (MAP-T mode) or
IPv6 address (MAP-E mode).</li>
<li><em>DSCPMarkPolicy</em>: governs DSCP selection when encapsulating /
translating.</li>
<li><em>PSIDOffset</em> etc: parameters defining Port-sets (<span
class="citation" data-cites="RFC7597"><a href="#ref-RFC7597"
role="doc-biblioref">[51]</a></span> Section 5.1).</li>
</ul>
<p>Each domain has a set of mapping rules (<span class="citation"
data-cites="RFC7597"><a href="#ref-RFC7597"
role="doc-biblioref">[51]</a></span> Section 5) with each rule having
the following parameters:</p>
<ul>
<li><em>IPv6Prefix</em>: the IPv6 prefix for this rule.</li>
<li><em>IPv4Prefix</em>: the IPv4 prefix for this rule.</li>
<li><em>EABitsLength</em>: the length of the EA (Embedded Address) bits
for this rule.</li>
<li><em>IsFMR</em>: whether this rule is an FMR (Forwarding Mapping
Rule).</li>
</ul>
<p>The mapping rule with the longest match between its
<em>IPv6Prefix</em> and the end-user IPv6 prefix is the BMR (Basic
Mapping Rule). This is used to determine the MAP IPv6 address, which is
one of <em>Interface</em>’s addresses and is used for all MAP
traffic.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:internal-treatment-of-ipv4-packets-1">XV.2 Internal Treatment of
IPv4 Packets</h2>
<p>Since a device can have multiple upstream and multiple downstream
interfaces, the model supports a logical representation of the internal
virtual MAP IPv4 interface according to the general pattern described in
<a href="#sec:tunneling" class="heading">Tunneling</a>. The
<em>IPv4Forwarding</em> entries will route traffic between the LAN IPv4
interface and the MAP IPv4 interface.</p>
<p><a href="#fig:sample-map-routing-and-forwarding"
class="figure">Figure 64</a> shows the flow of MAP traffic through the
various interfaces. Noted in the figure are sample values for the
various <em>IP.Interface</em> entries that would be needed.</p>
<figure id="fig:sample-map-routing-and-forwarding">
<img src="images/sample-map-routing-and-forwarding.png"
id="img:sample-map-routing-and-forwarding"
alt="Sample MAP Routing and Forwarding" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:sample-map-routing-and-forwarding">
Figure 64:
Sample MAP Routing and Forwarding
</div></figcaption>
</figure>
<p><a href="#fig:sample-map-routing-and-forwarding-interface-stack"
class="figure">Figure 65</a> shows the corresponding MAP interface
stack.</p>
<figure id="fig:sample-map-routing-and-forwarding-interface-stack">
<img src="images/sample-map-routing-and-forwarding-interface-stack.png"
id="img:sample-map-routing-and-forwarding-interface-stack"
alt="Sample MAP Routing and Forwarding (Interface Stack)" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:sample-map-routing-and-forwarding-interface-stack">
Figure 65:
Sample MAP Routing and Forwarding (Interface Stack)
</div></figcaption>
</figure>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:g.fast-theory-of-operation">Appendix XVI:
G.fast Theory of Operation</h1>
<p>G.fast (hereafter referred to as FAST) is a DSL communications
technology defined by ITU-T G.9700, G.9701, and G.997.2.</p>
<p>Devices that support both DSL and FAST (both interfaces’ objects are
administratively Enabled) have the capability to switch from one mode to
another. If the device is connected in xDSL mode (DSL.Line.{i}.status is
“Up”), FAST interface is down (FAST.Line.{i}.status is “Not Present” or
“Down”). The InterfaceStack Table needs to reflect the relationship
between the PTM interface and DSL interface as seen in <a
href="#fig:ptm-link-for-dsl-mode-line" class="figure">Figure 66</a>. The
PTM’s LowerLayers points to DSL.Channel instance whose status is
“Up”.</p>
<figure id="fig:ptm-link-for-dsl-mode-line">
<img src="images/ptm-link-for-dsl-mode-line.png"
id="img:ptm-link-for-dsl-mode-line" alt="PTM Link for DSL mode Line" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ptm-link-for-dsl-mode-line">
Figure 66:
PTM Link for DSL mode Line
</div></figcaption>
</figure>
<p>In the case when the device is connected in FAST mode, the DSL line
is down. The InterfaceStack Table needs to show that the PTM’s
LowerLayers points to the FAST.Line interface as below:</p>
<figure id="fig:ptm-link-for-fast-mode-line">
<img src="images/ptm-link-for-fast-mode-line.png"
id="img:ptm-link-for-fast-mode-line"
alt="PTM Link for FAST mode Line" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ptm-link-for-fast-mode-line">
Figure 67:
PTM Link for FAST mode Line
</div></figcaption>
</figure>
<p>The same fall back mechanism applies to the bonding of FAST and DSL
interfaces. PTM’s interface is to be stacked on two bonding groups as
they are both administrative “Enable”. However, in the InterfaceStack
Table, the PTM interface’s LowerLayers points to the bonding group that
has Operational Status “Up”. In the diagram below, PTM’s LowerLayers
points to the bonding group of FAST.Line, which is currently “Up”. The
DSL bonding group instance corresponding to DSL channels is “Down”.</p>
<figure id="fig:ptm-link-bonding-groups-for-fast-mode-lines">
<img src="images/ptm-link-bonding-groups-for-fast-mode-lines.png"
id="img:ptm-link-bonding-groups-for-fast-mode-lines"
alt="PTM Link Bonding Groups for FAST mode Lines" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ptm-link-bonding-groups-for-fast-mode-lines">
Figure 68:
PTM Link Bonding Groups for FAST mode Lines
</div></figcaption>
</figure>
<p>In the case where DSL Bonding group is “Up” for non-FAST mode lines,
the diagram below shows PTM’s LowerLayers pointing to the bonding group
of DSL.Channel, which is currently “Up”. The DSL bonding group instance
corresponding to FAST Lines is “Down” here.</p>
<figure id="fig:ptm-link-bonding-groups-for-dsl-mode-lines">
<img src="images/ptm-link-bonding-groups-for-dsl-mode-lines.png"
id="img:ptm-link-bonding-groups-for-dsl-mode-lines"
alt="PTM Link Bonding Groups for DSL mode Lines" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:ptm-link-bonding-groups-for-dsl-mode-lines">
Figure 69:
PTM Link Bonding Groups for DSL mode Lines
</div></figcaption>
</figure>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:usb-host-theory-of-operation">Appendix XVII:
USB Host Theory of Operation</h1>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:overview-2">XVII.1 Overview</h2>
<p>An increasing number of devices are equipped with a USB Host
controller and USB host interface(s) / connector(s).</p>
<p>There are a number of use cases for adding a USB Host and connected
devices to a CWMP data model. One example is retrieving the exact
product identity of the connected device in the event of service issues
such as printer or file sharing problems. Another example is notifying
the user that a newly-connected device is not supported, e.g., due to a
missing driver. Or the detection of the connection of a particular USB
device could mean additional services for this device could be offered
to the subscriber.</p>
<p>The data model contains the number of devices connected to each host
controller. For each device, the main properties of the USB device
descriptors as well as interface descriptors are represented. The latter
is to support devices that only indicate class/subclass (and therefore
device type) at the interface level.</p>
<p>Example USB topology of connected devices:</p>
<figure id="fig:example-usb-host-connections">
<img src="images/example-usb-host-connections.png"
id="img:example-usb-host-connections"
alt="Example USB Host Connections" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:example-usb-host-connections">
Figure 70:
Example USB Host Connections
</div></figcaption>
</figure>
<p>All USB devices attach to a USB Host through a port on a USB entity
known as a hub. Hubs have status bits that are used to report the
attachment or removal of a USB device on one of its ports. The USB Host
queries the hub to retrieve these status bits. In the case of an
attachment, the USB Host enables the port and addresses the USB device
through the device’s control pipe at the default address. <a
href="#fig:example-usb-host-connections" class="figure">Figure 70</a>
depicts both a Root Hub and an External Hub that provide this
service.</p>
<p>The USB Host assigns a unique USB address to the device and then
determines if the newly attached USB device is a hub or function. The
USB Host establishes its end of the control pipe for the USB using the
assigned USB address and endpoint number zero. This is reflected in the
data model by adding a new USBHosts.Host.{i}.Device.{i}. instance.</p>
<p>If the attached USB device is a hub and USB devices are attached to
its ports, then the above procedure is followed for each of the attached
USB devices.</p>
<p>If the attached USB device is a function, then attachment
notifications will be handled by the USB Host software that is
appropriate for the function.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:location-management">Appendix XVIII: Location
Management</h1>
<p>This section discusses the Theory of Operation for Location
Management using CWMP <span class="citation" data-cites="TR-069"><a
href="#ref-TR-069" role="doc-biblioref">[58]</a></span> or USP <span
class="citation" data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span> and the Location object defined in
the &lt;rootobject&gt;.DeviceInfo data model.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:overview-3">XVIII.1 Overview</h2>
<p>The Location object defined in this document is a multi-instance
object that can be used by any device that needs to be able to acquire
and/or express its “location.”</p>
<p>This Location object is a multi instance object to account for the
fact that a Device can acquire location information in more than one
way. Location info can be acquired by:</p>
<ul>
<li>GPS/A-GPS, i.e., provided by specific on-board circuitry such as GPS
or A-GPS;</li>
<li>Manual, i.e., manually configured via the Device local GUI</li>
<li>External, i.e., remotely configured via a number of protocols,
including e.g., TR-069</li>
</ul>
<p>Location objects can be created autonomously by the device, based on
the location information it receives by CWMP or USP. When the Location
object is created autonomously by the device, the device itself will
fill the DataObject parameter with location data coming from GPS/AGPS,
local GUI or an external protocol (not CWMP). When created by CWMP or
USP, it is up to the CWMP or USP protocol to configure the DataObject
parameter. Regardless of how a Location object is created, the device is
responsible for populating the values of all of the location metadata
(i.e., all parameters except the DataObject that contains the location
information and the AcquiredTime) not writable by any external
mechanism.</p>
<p>When a Location object is updated, the object can only be updated
through the same mechanism that created it. The device will update the
AcquiredTime as necessary and place the updated location data in the
DataObject.</p>
<p>When a Location object is deleted, the object can only be deleted
through the same mechanism that created it.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:multiple-instances-of-location-data">XVIII.2 Multiple Instances
of Location Data</h2>
<p>Devices that need to make use of location data will need to have
rules around how to deal with multiple instances of location data. These
rules are out of scope for CWMP or USP and the Device:2 data model.
These rules may need to be specific to a particular application. For
example, if a VoIP device chooses to send location data in a SIP
message, the device can include all of the instances of DataObject in
that message, order the Locations Objects according to the acquisition
date and time (parameter AcquiredDateTime, most recent is first) or
order the Location objects according to some sort of protocol
preference, such as GPS, A-GPS, DHCP, HELD, CWMP, USP, and then all
others according to acquisition date and time.</p>
<p>A Femtocell Access Point (FAP) with multiple sources of location can
also need rules for use of the Location object. If it must make
decisions locally based on location, the FAP will need rules to
determine the preferred location. If the FAP must send its location
elsewhere, the FAP will need rules to determine whether the FAP sends
all of its location data, or selects certain locations based on specific
criteria.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:cwmp-usp-manual-gps-and-agps-configured-location">XVIII.3 CWMP,
USP, Manual, GPS, and AGPS Configured Location</h2>
<p>As noted in the description of the Device:2 data model parameter
&lt;rootObject&gt;.Location.{i}.DataObject., Manual, GPS, and AGPS
mechanisms are formatted by the device according to the following
formats specified by the IETF. A Controller that is creating an
External:CWMP or an External:USP location will use one of these
formats:</p>
<ol>
<li><p>Geographical coordinates formatted according to the XML syntax
specified in IETF RFC 5491 <span class="citation"
data-cites="RFC5491"><a href="#ref-RFC5491"
role="doc-biblioref">[40]</a></span> (update of RFC 4119 <span
class="citation" data-cites="RFC4119"><a href="#ref-RFC4119"
role="doc-biblioref">[27]</a></span>)</p></li>
<li><p>Civic addresses according to the XML syntax specified in IETF RFC
5139 <span class="citation" data-cites="RFC5139"><a href="#ref-RFC5139"
role="doc-biblioref">[39]</a></span> (update of RFC 4119 <span
class="citation" data-cites="RFC4119"><a href="#ref-RFC4119"
role="doc-biblioref">[27]</a></span>)</p></li>
</ol>
<p>Location information in these IETF RFCs is specified within the IETF
framework of presence information. While these IETF RFCs specify
presence information different from the Location component model assumed
in the TR-069 framework, the IETF data format is adopted by BBF
independent of these higher level differences.</p>
<p>IETF defines its XML syntax for geographical information as a subset
of presence information (&lt;presence&gt; object in the XML example
below), generally related to a device (&lt;device&gt; object) or a user
(&lt;user&gt; object). IETF location information is represented using a
Presence Information Data Format Location Object (PIDF-LO). This is
represented as the &lt;geopriv&gt; object in the XML example below.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:example-manual-gps-agps-and-externalcwmp-rootobject.location.i.dataobject.-format">XVIII.3.1
Example: Manual, GPS, AGPS, and External:CWMP
&lt;rootObject&gt;.Location.{i}.DataObject. Format</h3>
<p>This example, modified from an example in RFC5491, explains how to
format location information in a
&lt;rootObject&gt;.Location.{i}.DataObject. parameter with both
geographical coordinates and civic location information according to the
above-referenced IETF RFCs. The schema associated with the civic
location namespace “urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr” is
specified in RFC 5139 <span class="citation" data-cites="RFC5139"><a
href="#ref-RFC5139" role="doc-biblioref">[39]</a></span>.</p>
<pre><code>&lt;presence xmlns=&quot;urn:ietf:params:xml:ns:pidf&quot;
          xmlns:dm=&quot;urn:ietf:params:xml:ns:pidf:data-model&quot;
          xmlns:gp=&quot;urn:ietf:params:xml:ns:pidf:geopriv10&quot;
          xmlns:gml=&quot;http://www.opengis.net/gml&quot;
          xmlns:cl=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;
          entity=&quot; &quot;&gt;
    &lt;dm:device id=&quot; FFFFFF-FAP-123456789 &quot;&gt;
        &lt;gp:geopriv&gt;
            &lt;gp:location-info&gt;
                &lt;gml:Point srsName=&quot;urn:ogc:def:crs:EPSG::4326&quot;&gt;
                    &lt;gml:pos&gt;-43.5723 153.21760&lt;/gml:pos&gt;
                &lt;/gml:Point&gt;
                &lt;cl:civicAddress&gt;
                    &lt;cl:FLR&gt;2&lt;/cl:FLR&gt;
                &lt;/cl:civicAddress&gt;
            &lt;/gp:location-info&gt;
            &lt;gp:usage-rules/&gt;
            &lt;gp:method&gt;Wiremap&lt;/gp:method&gt;
        &lt;/gp:geopriv&gt;
        &lt;dm:deviceID&gt;mac:8asd7d7d70&lt;/dm:deviceID&gt;
        &lt;dm:timestamp&gt;2007-06-22T20:57:29Z&lt;/dm:timestamp&gt;
    &lt;/dm:device&gt;
&lt;/presence&gt;</code></pre>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:rfc-5491-and-rfc-5139-location-element-definitions">XVIII.3.2
RFC 5491 and RFC 5139 Location Element Definitions</h3>
<p>The XML elements are defined as follows by the IETF in RFC 5491 <span
class="citation" data-cites="RFC5491"><a href="#ref-RFC5491"
role="doc-biblioref">[40]</a></span> and related documents:</p>
<ol>
<li><p>&lt;presence&gt; (RFC 5491 <span class="citation"
data-cites="RFC5491"><a href="#ref-RFC5491"
role="doc-biblioref">[40]</a></span>)</p>
<p>The &lt;presence&gt; element MUST have an ‘entity’ attribute. The
value of the ‘entity’ attribute is the ‘pres’ URL of the presentity
publishing this presence document.</p>
<p>The &lt;presence&gt; element MUST contain a namespace declaration
(‘xmlns’) to indicate the namespace on which the presence document is
based. The presence document compliant to this specification MUST have
the namespace ‘urn:ietf:params:xml:ns:pidf:’. It MAY contain other
namespace declarations for the extensions used in the presence XML
document.</p></li>
<li><p>&lt;device&gt; (RFC 5491 <span class="citation"
data-cites="RFC5491"><a href="#ref-RFC5491"
role="doc-biblioref">[40]</a></span>)</p>
<p>The &lt;device&gt; element […] can appear as a child to
&lt;presence&gt;. There can be zero or more occurrences of this element
per document. Each &lt;device&gt; element has a mandatory “id”
attribute, which contains the occurrence identifier for the device. In
the TR-069 framework the id attribute will contain the CWMP Identifier
of the device, in the form OUI-ProductClass-SerialNumber.</p></li>
<li><p>&lt;geopriv&gt; (RFC 5491 <span class="citation"
data-cites="RFC5491"><a href="#ref-RFC5491"
role="doc-biblioref">[40]</a></span>, RFC 5139 <span class="citation"
data-cites="RFC5139"><a href="#ref-RFC5139"
role="doc-biblioref">[39]</a></span>)</p>
<p>Location information in a PIDF-LO can be described in a geospatial
manner based on a subset of Geography Markup Language (GML) 3.1.1 or as
civic location information specified in RFC 5139 <span class="citation"
data-cites="RFC5139"><a href="#ref-RFC5139"
role="doc-biblioref">[39]</a></span>. The PIDF-LO Geodetic Shapes
specification provides a specific GML profile for expressing commonly
used shapes using simple GML representations. This profile defines eight
shape types, the simplest ones being a 2-D and a 3-D Point. The PIDF-LO
Geodetic Shapes specification also mandates the use of the World
Geodetic System 1984 (WGS84) coordinate reference system and the usage
of European Petroleum Survey Group (EPSG) code 4326 (as identified by
the URN urn:ogc:def:crs:EPSG::4326) for two-dimensional (2d) shape
representations and EPSG 4979 (as identified by the URN
urn:ogc:def:crs:EPSG::4979) for three-dimensional (3d) volume
representations.</p>
<p>Each &lt;geopriv&gt; element must contain at least the following two
child elements: &lt;location-info&gt; element and &lt;usage-rules&gt;
element. One or more elements containing location information are
contained inside a &lt;location-info&gt; element.</p>
<ol>
<li>&lt;location-info&gt; element can contain one or more elements
bearing location information.
<ol>
<li>&lt;Point&gt; element contains geographical data in the coordinate
system specified by its srsName attribute. In the example above
(WGS84/EPSG 4326), the syntax is latitude, longitude expressed in
degrees</li>
<li>Civic information elements are specified by IETF and can be added to
the geographical data, though mixing information is not
recommended.</li>
<li>&lt;relative-location&gt; element is being proposed by IETF</li>
</ol></li>
<li>&lt;usage-rules&gt; can contain the following optional elements:
<ol>
<li>&lt;retransmission-allowed&gt;: When the value of this element is
‘no’, the recipient of this Location Object is not permitted to share
the enclosed Location Information, or the object as a whole, with other
parties. RFC 4119 <span class="citation" data-cites="RFC4119"><a
href="#ref-RFC4119" role="doc-biblioref">[27]</a></span> specifies that
“by default, the value MUST be assumed to be ‘no’”.</li>
<li>&lt;retention expires&gt;: This field specifies an absolute date at
which time the Recipient is no longer permitted to possess the location
information</li>
<li>&lt;external ruleset&gt;: This field contains a URI that indicates
where a fuller ruleset of policies, related to this object, can be
found</li>
<li>&lt;notewell&gt;: This field contains a block of text containing
further generic privacy directives.</li>
</ol></li>
<li>&lt;method&gt; is an optional element that describes the way that
the location information was derived or discovered. Values allowed by
RFC 4119 <span class="citation" data-cites="RFC4119"><a
href="#ref-RFC4119" role="doc-biblioref">[27]</a></span> are stored in
the IANA registry as “Method Tokens” <span class="citation"
data-cites="IANA-Method-Tokens"><a href="#ref-IANA-Method-Tokens"
role="doc-biblioref">[7]</a></span>. The “Wiremap” value listed in the
example is described as “Location determined using wiremap correlations
to circuit identifiers”</li>
</ol></li>
<li><p>&lt;deviceID&gt; element is mandatory. It contains a globally
unique identifier, in the form of a URN, for each of the presentity
devices (RFC 4479 <span class="citation" data-cites="RFC4479"><a
href="#ref-RFC4479" role="doc-biblioref">[34]</a></span>)</p></li>
<li><p>&lt;timestamp&gt; is optional (RFC 4479 <span class="citation"
data-cites="RFC4479"><a href="#ref-RFC4479"
role="doc-biblioref">[34]</a></span>)</p></li>
</ol>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:use-of-rfc-5491-and-rfc-5139-location-xml-elements-in-cwmp-or-usp">XVIII.3.3
Use of RFC 5491 and RFC 5139 Location XML Elements in CWMP or USP</h3>
<ol>
<li><p>&lt;presence&gt;<br />
The entity attribute conveys no useful information and its value should
be conventionally set to an empty string.</p></li>
<li><p>&lt;device&gt;<br />
In RFC 5491 <span class="citation" data-cites="RFC5491"><a
href="#ref-RFC5491" role="doc-biblioref">[40]</a></span> this is one of
the devices associated to the presentity. Devices are identified in the
presence document by means of an instance identifier specified in the id
attribute.</p></li>
<li><p>&lt;geopriv&gt;</p>
<ol>
<li>&lt;location-info&gt;<br />
2-D geographical coordinates with no additional civic information are
sufficient in the simplest case.
<ul>
<li>&lt;Point&gt;<br />
For 2-D applications the value of the srsName attribute should be set to
the specified value “urn:ogc:def:crs:EPSG::4326”</li>
</ul></li>
<li>&lt;usage-rules&gt;
<ul>
<li>&lt;retransmission-allowed&gt;<br />
Note that this field is not intended as instruction to the device whose
location this is. Rather, it is intended to provide instruction to other
systems that the device sends its location to (via SIP or other
mechanisms). Therefore, the device will need to maintain its own policy
(no standardized TR-069 data model is provided for this) as to when and
where to send its location to others, and how to set this parameter when
transmitting this location information. The device can choose to set
this parameter to “yes” or to “no” when sending its location to others.
RFC 4119 <span class="citation" data-cites="RFC4119"><a
href="#ref-RFC4119" role="doc-biblioref">[27]</a></span> specifies that
this element’s default value is “no”.</li>
</ul></li>
<li>&lt;method&gt;<br />
If this location object is being created by the device as a result of
GPS, A-GPS, or Manual mechanisms, the &lt;method&gt; parameter will be
populated with “GPS”, “A-GPS”, or “Manual”, respectively. If the
location object is being created by External:CWMP, then this parameter
will not be used or populated by the Controller.</li>
</ol></li>
<li><p>&lt;deviceID&gt; It contains a globally unique identifier, in the
form of a URN, for each of the presentity devices (RFC 4479 <span
class="citation" data-cites="RFC4479"><a href="#ref-RFC4479"
role="doc-biblioref">[34]</a></span>).</p></li>
<li><p>&lt;timestamp&gt; is optional. The device (GPS, A-GPS, Manual),
ACS (External:CWMP) or USP-Controller (External:USP) can set this to the
time the location was set or acquired.</p></li>
</ol>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:fault-management">Appendix XIX: Fault
Management</h1>
<p>This section discusses the Theory of Operation for Fault Management
using CWMP <span class="citation" data-cites="TR-069"><a
href="#ref-TR-069" role="doc-biblioref">[58]</a></span> or USP <span
class="citation" data-cites="TR-369"><a href="#ref-TR-369"
role="doc-biblioref">[67]</a></span> and the FaultMgmt object defined in
the Root data model.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:overview-4">XIX.1 Overview</h2>
<p>There are four types of alarm event handling:</p>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<tbody>
<tr class="odd">
<td>Expedited Event</td>
<td>Alarm event is immediately notified to the Controller with the use
of Active Notification mechanism</td>
</tr>
<tr class="even">
<td>Queued Event</td>
<td>Alarm event is notified to the Controller at the next opportunity
with the use of Passive Notification mechanism</td>
</tr>
<tr class="odd">
<td>Logged Event</td>
<td>The CPE stores the alarm event locally but does not notify the
Controller</td>
</tr>
<tr class="even">
<td>Disabled Event</td>
<td>The CPE ignores the alarm event and takes no action</td>
</tr>
</tbody>
</table>
<p>Note that all Fault Management tables are cleared when the device
reboots.</p>
<p><a href="#tbl:fm-object-definition" class="table">Table 16</a> shows
the multi-instance objects for FM to manage the alarm events.</p>
<table id="tbl:fm-object-definition">
<caption><div class="auto-hoverlink"
data-anchor="tbl:fm-object-definition">
Table 16: FM Object Definition
</div></caption>
<colgroup>
<col style="width: 20%" />
<col style="width: 9%" />
<col style="width: 14%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>Object name (<em>&lt;rootobject&gt;.FaultMgmt.</em>)</th>
<th>Table size</th>
<th>Content</th>
<th>Purpose and usage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SupportedAlarm.{i}.</td>
<td>Fixed</td>
<td>Static &amp; fixed content</td>
<td>Defines all alarms that the CPE supports. <em>ReportedMechanism</em>
defines how the alarm is to be handled within the CPE: <em>0 –
Expedited, 1 – Queued, 2 – Logged, 3 – Disabled</em><br />
<br />
The table size is fixed and its content is static in order to drive the
alarm handling behavior in the CPE.</td>
</tr>
<tr class="even">
<td>ExpeditedEvent.{i}.</td>
<td>Fixed</td>
<td>Dynamically updated</td>
<td>Contains all <em>“Expedited”</em> type alarm events since the last
device initialization. This includes events that are already reported or
not yet reported to the Controller. One entry exists for each event. In
other words, raising and clearing of the same alarm are two separate
entries. As the table size is fixed (vendor defined), new alarm event
overwrites the oldest entry in FIFO fashion after the table becomes
full.</td>
</tr>
<tr class="odd">
<td>QueuedEvent.{i}.</td>
<td>Fixed</td>
<td>Dynamically updated</td>
<td>Contains all <em>“Queued”</em> type alarm events since the last
device initialization. This includes events that are already reported or
not yet reported to the Controller. One entry exists for each event. In
other words, raising and clearing of the same alarm are two separate
entries.<br />
<br />
As the table size is fixed (vendor defined), new alarm event overwrites
the oldest entry in FIFO fashion after the table becomes full.</td>
</tr>
<tr class="even">
<td>CurrentAlarm.{i}.</td>
<td>Variable</td>
<td>Dynamically updated</td>
<td>Contains all the currently active alarms (i.e., outstanding alarms
that are not yet cleared) since the last device initialization. When an
outstanding alarm is cleared, that entry is deleted from this table.
Therefore, only 1 entry exists for a given unique alarm.<br />
<br />
A Controller can retrieve the content of this table to get the entire
view of the currently outstanding alarms.<br />
<br />
As this is a variable size table, the size changes as alarm event is
raised and cleared.<br />
<br />
If maximum entries for this table are reached, the next event overrides
the object with instance number 1. Subsequent entries override objects
at sequentially increasing instance numbers. This logic provides for
automatic “rolling” of records.<br />
<br />
When a new alarm replaces an existing alarm, then all parameter values
for that instance are considered as changed for the purposes of value
change notifications to the Controller (even if their new values are
identical to those of the prior alarm).</td>
</tr>
<tr class="odd">
<td>HistoryEvent.{i}.</td>
<td>Fixed</td>
<td>Dynamically updated</td>
<td>Contains all alarm events as a historical record keeping purpose.
One entry exists for each event. In other words, raising and clearing of
the same alarm are two separate entries.<br />
<br />
The Controller can retrieve the content of this table to get the entire
chronological history of the alarm events on the CPE.<br />
<br />
As the table size is fixed (vendor defined), new alarm event overwrites
the oldest entry in FIFO fashion after the table becomes full.</td>
</tr>
</tbody>
</table>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:basapm-and-lmap-theory-of-operation">Appendix
XX: BASAPM and LMAP Theory of Operation</h1>
<p>Broadband Access Service Attributes and Performance Metrics (BASAPM)
and Large-Scale Measurement of Broadband Performance (LMAP) data model
components are derived from TR-304 <span class="citation"
data-cites="TR-304"><a href="#ref-TR-304"
role="doc-biblioref">[66]</a></span> and the IETF LMAP information model
<span class="citation" data-cites="RFC8193"><a href="#ref-RFC8193"
role="doc-biblioref">[55]</a></span>, respectively.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:tr-069-family-of-specifications-in-the-context-of-tr-304">XX.1
TR-069 Family of Specifications in the Context of TR-304</h2>
<p>This section describes possible deployment scenarios where the CWMP
and IPDR protocols are used for the respective TR-304 protocols.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:tr-304-and-ietf-lmap-frameworks">XX.1.1 TR-304 and IETF LMAP
Frameworks</h3>
<p>The IETF (LMAP) and BBF (TR-304) use a similar framework for
diagnostics where each framework consists of a Measurement Controller,
Data Collector and Measurement Agent. While there are differences
between TR-304 and LMAP elements in various deployment scenarios, in
residential scenarios the behavior of Measurement Agent in the home is
consistent between the IETF LMAP and BBF TR-304 frameworks.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:tr-304-framework">XX.1.1.1 TR-304 Framework</h4>
<p>The TR-304 framework consists of a Management Server that is used to
manage and configure the Measurement Agent. This would also include
receiving logging and status information as well as the capability to
schedule the Measurement Agent for tests. The TR-304 framework also has
a Measurement Controller with the responsibility to schedule the
Measurement Agent for tests to be performed provide test admin control.
TR-304 framework also has multiple channels where a Measurement Agent
can send reports to the different Data Collectors.</p>
<figure id="fig:tr-304-framework">
<img src="images/tr-304-framework.png" id="img:tr-304-framework"
alt="TR-304 Framework" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:tr-304-framework">
Figure 71:
TR-304 Framework
</div></figcaption>
</figure>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:ietf-lmap-framework">XX.1.1.2 IETF LMAP Framework</h4>
<p>The IETF LMAP framework, like the BBF TR-304 framework, consists of a
Management Server that is used to pre-configure the Measurement Agent.
Note that this also could be done at the manufacturing stage of the
device. The LMAP framework also has a Measurement Controller with the
responsibility to configure the Measurement Agent for tests to be
performed; provide instructions about the test and receive status and
logging information the Measurement agents. In the IETF LMAP framework
these functions are treated as individual channels that can be assigned
to different Measurement Controllers. Likewise the Reporting interface
also has multiple channels where a Measurement Agent can send reports to
the different Data Collectors.</p>
<figure id="fig:lmap-framework">
<img src="images/lmap-framework.png" id="img:lmap-framework"
alt="LMAP Framework" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:lmap-framework">
Figure 72:
LMAP Framework
</div></figcaption>
</figure>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:cwmp-for-pre-configuration">XX.1.2 CWMP for
Pre-configuration</h3>
<p>In the IETF LMAP and TR-304 frameworks, CWMP can be used to
pre-configure the Measurement Agent; where the Controller and Data
Collector could use other protocols (e.g., IETF LMAP protocol).</p>
<figure id="fig:cwmp-for-pre-configuration">
<img src="images/cwmp-for-pre-configuration.png"
id="img:cwmp-for-pre-configuration" alt="CWMP for Pre-configuration" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:cwmp-for-pre-configuration">
Figure 73:
CWMP for Pre-configuration
</div></figcaption>
</figure>
<p>Note that in the TR-304 framework the Status and Logging functions
have not been explicitly identified as capabilities of the
Controller.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:cwmp-for-control-and-pre-configuration-ipdr-for-reporting">XX.1.3
CWMP for Control and Pre-configuration, IPDR for Reporting</h3>
<p>In the IETF LMAP and TR-304 frameworks, CWMP can be used to
pre-configure the Measurement Agent and manage/schedule the tests.
Likewise the IPDR protocol can be used to report the test results. In
this scenario, the ACS would act as the Management Server and
Measurement Controller. This scenario would place a constraint on the
IETF LMAP framework in that there would be allowed only 1 Measurement
Controller per Measurement Agent. See <em><a
href="#sec:bulk-data-collection-in-the-context-of-lmap"
class="heading">Bulk Data Collection in the Context of LMAP</a></em> for
additional information on use of the BulkData.Profile object in the
context of LMAP.</p>
<figure
id="fig:cwmp-for-control-and-pre-configuration-ipdr-for-reporting">
<img
src="images/cwmp-for-control-and-pre-configuration-ipdr-for-reporting.png"
id="img:cwmp-for-control-and-pre-configuration-ipdr-for-reporting"
alt="CWMP for Control and Pre-configuration, IPDR for Reporting" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:cwmp-for-control-and-pre-configuration-ipdr-for-reporting">
Figure 74:
CWMP for Control and Pre-configuration, IPDR for Reporting
</div></figcaption>
</figure>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:cwmp-as-a-proxier-ipdr-for-reporting">XX.1.4 CWMP as a Proxier,
IPDR for Reporting</h3>
<p>In scenarios where Measurement Agent does not have connectivity with
the Measurement Controller, CWMP can be used to act as a proxy between
the Measurement Controller and Measurement Agent. In this scenario, if
the CWMP Proxy is an Embedded Device then both Measurement Agents are
associated with the same ACS. If the Measurement Agents need to be
associated with different Measurement Controllers then the CWMP Virtual
Device mechanism is to be used.</p>
<figure id="fig:cwmp-proxy-device-deployment">
<img src="images/cwmp-proxy-device-deployment.png"
id="img:cwmp-proxy-device-deployment"
alt="CWMP Proxy Device Deployment" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:cwmp-proxy-device-deployment">
Figure 75:
CWMP Proxy Device Deployment
</div></figcaption>
</figure>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:multi-acs-deployment">XX.1.5 Multi-ACS Deployment</h3>
<p>In the IETF LMAP framework, the Measurement Agent could interact with
different elements that implement the functionality of the Management
Server and Measurement Controller. In addition, the IETF LMAP framework
also permits the functionality of the Measurement Controller to be
implemented in multiple elements.</p>
<p>For a CWMP framework, this would require a different CWMP Agent for
each application. As such this type of scenario is not realistically
supported by CWMP.</p>
<figure id="fig:cwmp-multi-acs-deployment">
<img src="images/cwmp-multi-acs-deployment.png"
id="img:cwmp-multi-acs-deployment" alt="CWMP Multi-ACS Deployment" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:cwmp-multi-acs-deployment">
Figure 76:
CWMP Multi-ACS Deployment
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:derivation-of-data-model-elements">XX.2 Derivation of Data Model
Elements</h2>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:device.basapm">XX.2.1 Device.BASAPM</h3>
<p>Device.BASAPM provides a TR-304 <span class="citation"
data-cites="TR-304"><a href="#ref-TR-304"
role="doc-biblioref">[66]</a></span> wrapper for a Device.LMAP.
MeasurementAgent instance. Device.BASAPM provides parameters related to
the operational domain, device ownership, device identification,
geographic location, and measurement reference point of a referenced
Device.LMAP.MeasurementAgent instance.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:device.lmap.measurementagent">XX.2.2
Device.LMAP.MeasurementAgent</h3>
<p>The Device.LMAP objects and parameters are mostly described in the
IETF LMAP information model <span class="citation"
data-cites="RFC8193"><a href="#ref-RFC8193"
role="doc-biblioref">[55]</a></span>. That document serves as the
primary vehicle for describing theory of operations for
Device.LMAP.MeasurementAgent.</p>
<p>The base Device.LMAP.MeasurementAgent.{i} object contains parameters
defined in LMAP information model ma-config-obj, ma-status-obj, and
ma-capability-obj. The ma-preconfig-obj parameters are not modeled in
Device:2 data model , because there is no need for pre-configuration
values in a CWMP/USP-managed Measurement Agent. The information model
parameters map to Device:2 data model parameters as shown in <a
href="#tbl:mapping-lmap-information-model-parameters-to-data-model-parameters"
class="table">Table 17</a>:</p>
<table
id="tbl:mapping-lmap-information-model-parameters-to-data-model-parameters">
<caption><div class="auto-hoverlink"
data-anchor="tbl:mapping-lmap-information-model-parameters-to-data-model-parameters">
Table 17: Mapping LMAP Information Model Parameters to Data Model
Parameters
</div></caption>
<colgroup>
<col style="width: 37%" />
<col style="width: 62%" />
</colgroup>
<thead>
<tr class="header">
<th>IETF LMAP Information Model<br />
Parameter</th>
<th>Device:2 data model parameter<br />
(in Device.LMAP.MeasurementAgent.{i})</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ma-config-agent-id</td>
<td>Identifier</td>
</tr>
<tr class="even">
<td>ma-config-credentials</td>
<td>PublicCredential, PrivateCredential</td>
</tr>
<tr class="odd">
<td>ma-config-group-id</td>
<td>GroupIdentifier</td>
</tr>
<tr class="even">
<td>ma-config-measurement-point</td>
<td>MeasurementPoint</td>
</tr>
<tr class="odd">
<td>ma-config-report-agent-id</td>
<td>UseAgentIdentifierInReports</td>
</tr>
<tr class="even">
<td>ma-config-report-group-id</td>
<td>UseGroupIdentifierInReports</td>
</tr>
<tr class="odd">
<td>ma-config-report-measurement-point</td>
<td>UseMeasurementPointInReports</td>
</tr>
<tr class="even">
<td>ma-config-controller-timeout</td>
<td>Controller. ControllerTimeout</td>
</tr>
<tr class="odd">
<td>ma-status-last-started</td>
<td>LastStarted</td>
</tr>
<tr class="even">
<td>ma-capability-hardware</td>
<td>not included in Device.LMAP because it duplicates
Device.DeviceInfo.HardwareVersion</td>
</tr>
<tr class="odd">
<td>ma-capability-firmware</td>
<td>not included in Device.LMAP because it duplicates
Device.DeviceInfo.SoftwareVersion</td>
</tr>
<tr class="even">
<td>ma-capability-version</td>
<td>Version</td>
</tr>
<tr class="odd">
<td>ma-capability-tags</td>
<td>CapabilityTags</td>
</tr>
</tbody>
</table>
<p>All of the other IETF LMAP information model parameters can be
readily mapped to objects and parameters in
Device.LMAP.MeasurementAgent.{i}.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:bulk-data-collection-in-the-context-of-lmap">XX.3 Bulk Data
Collection in the Context of LMAP</h2>
<p>The TR-069 family of specifications has defined protocols that can be
used for the collection of bulk data between a CWMP Agent and an ACS.
These protocols are defined for IPDR <span class="citation"
data-cites="TR-232"><a href="#ref-TR-232"
role="doc-biblioref">[65]</a></span> and HTTP <span class="citation"
data-cites="TR-069"><a href="#ref-TR-069"
role="doc-biblioref">[58]</a></span>. The Device:2 data model described
in <em><a href="#sec:derivation-of-data-model-elements"
class="heading">Derivation of Data Model Elements</a></em> includes the
ability to use these protocols for transferring test results between a
Measurement Agent and a Data Collector.</p>
<p>When integrating the test results of the Device:2 data model (i.e.,
LMAP.Report object instance) into the bulk data objects and parameters
provided by the Device:2 data model, the LMAP.Report object instance
becomes the referenced parameter of the Bulk Data Profile
(BulkData.Profile object instance). In addition, there is a linkage
needed within the LMAP data model to identify the BulkData.Profile
object instance. This is done through the reference of the
BulkData.Profile object instance from the LMAP data model’s
Communication Channel for a Scheduled Action.</p>
<figure id="fig:integration-of-bulk-data-profiles-with-lmap">
<img src="images/integration-of-bulk-data-profiles-with-lmap.png"
id="img:integration-of-bulk-data-profiles-with-lmap"
alt="Integration of Bulk Data Profiles with LMAP" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:integration-of-bulk-data-profiles-with-lmap">
Figure 77:
Integration of Bulk Data Profiles with LMAP
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:tr-143-diagnostics-in-lmap">XX.4 TR-143 Diagnostics in LMAP</h2>
<p>TR-143 <span class="citation" data-cites="TR-143"><a
href="#ref-TR-143" role="doc-biblioref">[62]</a></span> describes a set
of tests that can be used within the context of TR-304 based on the IETF
LMAP framework <span class="citation" data-cites="RFC7594"><a
href="#ref-RFC7594" role="doc-biblioref">[50]</a></span> and Information
Model <span class="citation" data-cites="RFC8193"><a href="#ref-RFC8193"
role="doc-biblioref">[55]</a></span> and implemented using the Device:2
data model in <em><a href="#sec:derivation-of-data-model-elements"
class="heading">Derivation of Data Model Elements</a></em>. These tests
could be defined using the following procedure:</p>
<ol>
<li>The TR-143 diagnostic needs to be identified as a URI in the
registry entry
(Device.LMAP.MeasurementAgent.{i}.TaskCapability.{i}.Registry.{i}.RegistryEntry):
<ul>
<li>The URI is in the form of: urn:bbf:lmap:&lt;BBF
TR&gt;:&lt;DiagnosticProfileName&gt;</li>
<li>For example a TR-143 upload diagnostic could be:
“urn:bbf:lmap:tr-181-2-11-0:UploadDiagnostics-1”</li>
</ul></li>
<li>The TR-143 diagnostic’s parameters and objects that are modifiable
by the Controller/Measurement Controller are encoded in the
Device.LMAP.MeasurementAgent.{i}.Task.{i}.Option.{i}. or
Device.LMAP.MeasurementAgent.{i}.Schedule.{i}.Action.{i}.Option.{i}
objects.
<ul>
<li>For example:
Device.IP.Diagnostics.UploadDiagnostics.DiagnosticsState=requested</li>
</ul></li>
<li>The TR-143 diagnostic’s parameters and objects that are read-only
are encoded in the Device.LMAP.Report.{i}.Task.{i}.Result.{i}.Values
where each parameter name is encoded in the
Device.LMAP.Report.{i}.Task.{i}.ColumnLabels parameter.
<ul>
<li>For example:<br />
ColumnLabels:<br />
Device.IP.Diagnostics.UploadDiagnostics.PerConnectionResult.{1}.TotalBytesSent</li>
<li>Value: 30</li>
</ul></li>
</ol>
<div class="note">
<p>These fully qualified names could be shortened or even specified as a
different name based on the specification behind the RegistryEntry
URN.</p>
</div>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:g-theory-of-operation">Appendix XXI: 5G
Theory of Operation</h1>
<p>This section discusses the Theory of Operation for 5G Wireline
Wireless Convergence using CWMP or USP and the supporting Device.WWC,
Device.PDU and Device.FWE objects.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:overview-5">XXI.1 Overview</h2>
<p>A 5G-RG brings with it a completely different way of operation. This
is a direct consequence of features such as:</p>
<ul>
<li>Control User Plane Separation (CUPS)</li>
<li>Multiple IP sessions over a PHY</li>
<li>5G QoS</li>
<li>Hybrid Access (Fixed and Cellular)</li>
<li>Network Slicing</li>
</ul>
<p>The above features are supported by the TR-181 data model using new
data model elements comprising:</p>
<ul>
<li>Interface stack layer to support 5G Fixed Encapsulation (5WE)</li>
<li>Objects to describe registration and session management.</li>
<li>Integration with existing TR-181 elements</li>
</ul>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:architecture-1">XXI.2 Architecture</h2>
<p>The 5G converged core represents a significant departure from the
TR-101 <span class="citation" data-cites="TR-101"><a href="#ref-TR-101"
role="doc-biblioref">[59]</a></span> based architecture currently used
to support residential gateway access. Most noteworthy is the alignment
with 3GPP architectural principles. It is important to understand the
two deployment scenarios for the 5G core—Integration and
Interworking.</p>
<p><strong>Integration</strong> – All wireline traffic transits the AGF
(Access Gateway Function) before entering the 3GPP-defined 5G core. Both
5G-RGs and FN-RGs may use the AGF natively. In the case of a 5G-RG, the
AGF will support 5G NAS and PDU (multiple IP sessions) transport. Whilst
a FN-RG is limited to TR-101 and the NAS and PDU (single IP session) is
emulated by the AGF on behalf of the FN-RG, RGs may use wireline,
wireless or both access networks. However, in the case of multiple
access networks, all must use 5G NAS + PDU if ATSSS is to be
supported.</p>
<p><strong>Interworking</strong> – All wireline traffic uses the current
TR-101-based solutions (BNG + AAA). The FMIF emulates all the TR-101
control plane functions needed by the BNG and converts to 5G NAS.
Current thinking is that user plane traffic will continue to be handled
by the BNG. Note: A 5G-RG reverts to FN-RG mode when connected to a BNG.
The interworking scenario is based around a standard FN-RG and has zero
impact on the TR-181 data model</p>
<p>In the diagram below the elements in green, namely 5G-RG, AGF and
FMIF, are BBF-defined.</p>
<figure id="fig:5g-converged-core-network">
<img src="images/5g-converged-core-network.png"
id="img:5g-converged-core-network" alt="5G Converged Core Network" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:5g-converged-core-network">
Figure 78:
5G Converged Core Network
</div></figcaption>
</figure>
<p>The complete 5G architecture is documented in the 3GPP 23.501 <span
class="citation" data-cites="3GPP-TS.23.501"><a
href="#ref-3GPP-TS.23.501" role="doc-biblioref">[1]</a></span> standard.
BBF has produced TR-470 <span class="citation" data-cites="TR-470"><a
href="#ref-TR-470" role="doc-biblioref">[68]</a></span> documenting the
Wireline Wireless Convergence architecture. Shown below is a simplified
architecture with the network functions and interfaces relevant to
supporting a 5G-RG.</p>
<figure id="fig:5g-architecture">
<img src="images/5g-architecture.png" id="img:5g-architecture"
alt="5G Architecture" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:5g-architecture">
Figure 79:
5G Architecture
</div></figcaption>
</figure>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:network-functions">XXI.2.1 Network Functions</h3>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 10%" />
<col style="width: 66%" />
</colgroup>
<thead>
<tr class="header">
<th>Network Function</th>
<th>Plane</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>W-5GAN: Wireline<br />
5G Access Network</td>
<td>Both</td>
<td>Functionally equivalent to a 3GPP RAN. It incorporates both an AGF
and one or more TR-101-based access networks. These networks may be
owned by the service provider or provided by a third party.</td>
</tr>
<tr class="even">
<td>AUSF: Authentication Server Function</td>
<td>Control</td>
<td>Support the AMF authentication function by making the actual
authentication decisions.</td>
</tr>
<tr class="odd">
<td>AMF: Access and<br />
Mobility Management Function</td>
<td>Control</td>
<td>Can be considered to be the entry point to the control plane. From
the perspective of a 5G-RG, the AMF processes all N1 traffic and thus is
the frontend for authentication and the establishment of PDU
sessions.</td>
</tr>
<tr class="even">
<td>NSSF: Network<br />
Slice Selection Function</td>
<td>Control</td>
<td>Selects the network slice instance servicing the 5G-RG. The AGF will
use the NSSF to choose an AMF at the time of registration.</td>
</tr>
<tr class="odd">
<td>PCF: Policy<br />
Control Function</td>
<td>Control</td>
<td>Responsible for control plane policy rules. In particular, supports
the AMF to provide policy rules as part of registration.</td>
</tr>
<tr class="even">
<td>SMF: Session<br />
Management Function</td>
<td>Control</td>
<td>The SMF acts as a controller for the UPF. Major responsibilities
include DHCP (server or relay), QoS handling and user plane policy
enforcement (downstream traffic shaping).</td>
</tr>
<tr class="odd">
<td>UDM: Unified Data<br />
Management</td>
<td>Control</td>
<td>Responsible for subscription data used by other network functions to
authenticate and provide subscription-based policy.</td>
</tr>
<tr class="even">
<td>UPF: User Plane<br />
Function</td>
<td>User</td>
<td>Provides the packet routing and forwarding to the data network.
Other necessary functions include usage, QoS management, user plane
policy and being the anchor point for multipath traffic.</td>
</tr>
</tbody>
</table>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:concepts">XXI.3 Concepts</h2>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:control-user-plane-separation-cups">XXI.3.1 Control User Plane
Separation (CUPS)</h3>
<p>CUPS is integral to the entire 5G architecture. It starts with the
segregation of control and user plane traffic at the 5G-RG and continues
through to the physical separation of control and user plane network
functions. The main driver for separation is to centralize control plane
functions whilst distributing user plane functions deeper into the
network. CUPS is documented in TR-470 Section 5.2 <span class="citation"
data-cites="TR-470"><a href="#ref-TR-470"
role="doc-biblioref">[68]</a></span> whilst TS 23.501 <span
class="citation" data-cites="3GPP-TS.23.501"><a
href="#ref-3GPP-TS.23.501" role="doc-biblioref">[1]</a></span> details
the architectural elements. From the perspective of a 5G-RG, CUPS has
the following impacts:</p>
<ul>
<li>Control plane communications move from transient (DHCP and PPP LCP )
to persistent (NAS). As a result, the operator can now modify a customer
session at any time rather than at the point of authorization.</li>
<li>Traffic for control and user planes uses separate sessions over a
common PHY.</li>
<li>DHCP and DHCPv6 technically move from the control to the user plane
(UPF responsibility). However, both protocols can and need to be used to
deliver configuration via their options.</li>
</ul>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:policy-1">XXI.3.2 Policy</h3>
<p>One of the new design principles brought by 5G to the residential
gateway is that of policy. Previous generations of mobile devices have
been users of policy but 5G takes it to a new level. Policy and the role
of the PCF are documented in TS 23.503 <span class="citation"
data-cites="3GPP-TS.23.503"><a href="#ref-3GPP-TS.23.503"
role="doc-biblioref">[2]</a></span>.</p>
<p><strong>So, what is policy?</strong><br />
The simplest way to think of policy is as a set of per-service rules
sent to the 5G-RG by the network operator. This allows the operator to
dynamically control how a 5G-RG connects to a 5G network in terms of
network slices, data networks and QoS with application level
granularity.</p>
<p><strong>How is it delivered?</strong><br />
Policy is managed by the Policy Control Function (PCF), which provides
policy in two distinct phases. At the time of registration, a routing
policy table (URSP) is provided upon successful authentication. When a
PDU session is created, URSP provides the necessary network slice and
data network information. The second phase of policy is learnt upon
successful PDU creation, where a set of QoS rules is provided.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:multiple-pdu-sessions">XXI.3.3 Multiple PDU sessions</h3>
<p>One of the more significant features of a 5G-RG is the support of
multiple PDU sessions. Each PDU can be considered to be a virtual
circuit between a 5G-RG and a UPF instance. A PDU instance can be
assigned IP addresses, QoS rules and even guaranteed bit rates. This
leads to applications requiring:</p>
<ul>
<li>Separate IP sessions.</li>
<li>Preferential data paths within the operator’s network.</li>
<li>Traffic separation for security.</li>
<li>Guaranteed bit rates for a given application.</li>
</ul>
<p>TR-470 Section 6.2 <span class="citation" data-cites="TR-470"><a
href="#ref-TR-470" role="doc-biblioref">[68]</a></span> provides
examples of multiple PDU scenarios for a 5G-RG.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:g-qos">XXI.3.4 5G QoS</h3>
<p>Unlike the more familiar QoS markings such as DSCP or Ethernet
priority, 5G QoS marking is merely a label called a QoS Flow Indicator
(QFI). End-to-end QoS as documented in TR-470 Section 5.1 <span
class="citation" data-cites="TR-470"><a href="#ref-TR-470"
role="doc-biblioref">[68]</a></span> is a key outcome of policy. As part
of PDU establishment, a set of QoS rules is supplied specific to that
PDU. Consequently, the access network specifies not only the supported
QFI labels but also the properties of the QoS profile. A QoS profile
consists of the following properties:</p>
<ul>
<li>5G QoS Identifier (5QI). Unlike a QFI, 5QI does have a defined set
of properties such as priority and whether its bit rate is
guaranteed.</li>
<li>Allocation and Retention Policy (ARP).</li>
<li>For Guaranteed Bit Rate (GBR) profiles the guaranteed and maximum
upload and download bit rates.</li>
<li>GBR profiles may also specify a maximum packet loss.</li>
</ul>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:data-network-name-dnn">XXI.3.5 Data Network Name (DNN)</h3>
<p>One of the benefits of multiple PDU sessions is the ability to have
preferred data paths within the network. A 5G core achieves this using
DNNs mapped to dedicated UPFs. A DNN is always specified when
establishing a PDU and the 5G-RG learns the preferred DNN through URSP
policy.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:multiple-access-networks">XXI.3.6 Multiple Access Networks</h3>
<p>Whilst FN-RGs are perfectly capable of supporting multiple access
networks, each access network operates independently with separate IP
addresses and an inability to seamlessly switch traffic between them. A
5G-RG can modify a PDU and switch traffic to another supported access
network and maintain all the PDU properties including IP addresses. An
operator can optimize its network usage by sending policy rules to a
5G-RG, indicating the preferred access and data networks. TR-470 Section
4.4 <span class="citation" data-cites="TR-470"><a href="#ref-TR-470"
role="doc-biblioref">[68]</a></span> provides a more in-depth
description of hybrid access.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:network-slicing">XXI.3.7 Network Slicing</h3>
<p>An operator may choose to partition their network infrastructure for
the purposes of resiliency or merely to optimize for a particular
function such as IoT. Each instance of the partitioned network is called
a network slice. Operators will provide slice information as part of
URSP policy rules. Every PDU at the time of establishment must specify a
network slice. Slicing is further documented in TS 23.501 Clause 5.15
<span class="citation" data-cites="3GPP-TS.23.501"><a
href="#ref-3GPP-TS.23.501" role="doc-biblioref">[1]</a></span>.</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:data-model-elements">XXI.4 Data Model Elements</h2>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:interface-stack">XXI.4.1 Interface Stack</h3>
<p>User plane traffic on a 5G-RG is carried as part of a PDU session
carrying L3 traffic (usually IPv4 or IPv6). Whilst cellular networks
have native methods for separating PDU traffic, fixed access networks do
not. Operators have a choice of two multiplexing strategies, both of
which require co-ordination between the 5G-RG and AGF:</p>
<ul>
<li>VLAN: Each PDU uses a separate VLAN with the VLAN id as the session
identifier.</li>
<li>5WE: An encapsulation method designed to carry multiplexed PDU
traffic over existing (non 5G) access networks <span class="citation"
data-cites="RFC8822"><a href="#ref-RFC8822"
role="doc-biblioref">[56]</a></span>.</li>
</ul>
<p>The OSI layer model (see <a
href="#fig:osi-layers-and-interface-objects" class="figure">Figure
10</a>) now has 5WE (Device.FWE.Link in the model) at ‘L2---’ and the
previous ‘L2--’ pushed down to ‘L2---’.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scenario-1---fixed-access-network-only">XXI.4.1.1 Scenario #1 -
Fixed access network only</h4>
<p>This example shows two PDU sessions using a VDSL access network. As
this is a fixed service, the 5WE protocol is used to multiplex the PDU
traffic over the VDSL service. NAS traffic is separate from the PDU
traffic and is carried as PPPoE over the VDSL service. All LAN traffic
remains unchanged on a 5G-RG.</p>
<figure id="fig:fixed-access-only-example">
<img src="images/fixed-access-only-example.png"
id="img:fixed-access-only-example" alt="Fixed access only example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:fixed-access-only-example">
Figure 80:
Fixed access only example
</div></figcaption>
</figure>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scenario-2---cellular-access-network-only">XXI.4.1.2 Scenario #2
- Cellular access network only</h4>
<p>This example shows two PDU sessions using a cellular access network.
In this case the 5G-RG does not to need to multiplex the PDU traffic as
the cellular module handles that internally. NAS traffic does not appear
in this diagram as the requests are made directly to the cellular
module. Depending on the cellular module, each PDU may need to be
carried over a VLAN (this has been omitted for the moment). All LAN
traffic remains unchanged on a 5G-RG.</p>
<figure id="fig:cellular-access-only-example">
<img src="images/cellular-access-only-example.png"
id="img:cellular-access-only-example"
alt="Cellular access only example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:cellular-access-only-example">
Figure 81:
Cellular access only example
</div></figcaption>
</figure>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scenario-3---hybrid-fixed-and-cellular-access">XXI.4.1.3
Scenario #3 - Hybrid (Fixed and Cellular) access</h4>
<p>This example shows two PDU sessions using both VDSL and cellular
access networks. Either access network is capable for carrying either
PDU or both. A PDU in this situation can only be carried on a single
access network at a time. Fixed traffic is multiplexed using 5WE (even
if only one PDU is present) whilst PDU traffic to the cellular network
is multiplexed by the cellular module. NAS traffic using the PPP
interface is for the fixed component only as cellular requests are made
directly to the cellular module. Depending on the cellular module, each
PDU may need to be carried over a VLAN (this has been omitted for the
moment). All LAN traffic remains unchanged on a 5G-RG.</p>
<figure id="fig:hybrid-access-example">
<img src="images/hybrid-access-example.png"
id="img:hybrid-access-example" alt="Hybrid access example" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:hybrid-access-example">
Figure 82:
Hybrid access example
</div></figcaption>
</figure>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:data-model">XXI.4.2 Data Model</h3>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:device.wwc">XXI.4.2.1 Device.WWC</h4>
<p>The relationship between a 5G-RG and the available access networks is
represented by the Device.WWC object tree. All objects are read only and
are intended for service assurance purposes.</p>
<table id="tbl:device.wwc-objects">
<caption><div class="auto-hoverlink"
data-anchor="tbl:device.wwc-objects">
Table 18: Device.WWC objects
</div></caption>
<colgroup>
<col style="width: 35%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th>Object</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Device.WWC</td>
<td>Base object for Wireline Wireless Convergence. The controller can
use this object to learn the supported 5G features and whether the 5G-RG
is operating in 5G mode</td>
</tr>
<tr class="even">
<td>Device.WWC.AccessNetwork</td>
<td>Each table entry describes a single access network. The entire table
is built by the 5G-RG upon startup. The primary purpose is to show the
registration and connectivity status of each access network. Typically,
a 5G-RG would register on each available access network. A minimum of
one access network must be in the CM-CONNECTED state in order to support
N1 messaging</td>
</tr>
<tr class="odd">
<td>Device.WWC.AccessNetwork.GUTI</td>
<td>A 5G Globally Unique Temporary Identity (GUTI) securely identifies
an CPE by keeping the permanent User Equipment (UE identifier (IMSI)
hidden. This identity is globally unique and assigned by the AMF at the
time of registration.</td>
</tr>
<tr class="even">
<td>Device.WWC.URSP</td>
<td>User equipment Route Selection Policy (URSP) is a table of rules
used to determine which network slice and data network to route a PDU
over. Typically, a 5G-RG would search the URSP table in precedence order
matching the traffic descriptor types against the service it was setting
up. For example, a 5G-RG would search for ‘connection capabilities’
matching ‘ims’ in order to establish a dedicated PDU session for
telephony</td>
</tr>
<tr class="odd">
<td>Device.WWC.URSP.{i}.TrafficDescriptor</td>
<td>A set of rules for a given precedence that must be matched in order
to select a router in the form of data network and slice. Selection
criteria range from destination IP addresses to connection
capabilities</td>
</tr>
<tr class="even">
<td>Device.WWC.URSP.{i}.TrafficDescriptor.{i}.RouteSelectionDescriptor</td>
<td>Provides a table of data networks and network slices used in PDU
establishment. Table entries are used in precedence order until a
successful PDU session is established. See TS 23.503 Annex A <span
class="citation" data-cites="3GPP-TS.23.503"><a
href="#ref-3GPP-TS.23.503" role="doc-biblioref">[2]</a></span> for an
example URSP rule traversal</td>
</tr>
<tr class="odd">
<td>Device.WWC.URSP.{i}.TrafficDescriptor.{i}.RouteSelectionDescriptor.{i}.NetworkSlice</td>
<td>Describes all the components of a Single-Network Slice Selection
Assistance Information (S-NSSAI). A S-NSSAI identifies the network slice
a PDU session will be established on</td>
</tr>
</tbody>
</table>
<figure id="fig:device.wwc-objects">
<img src="images/device.wwc-objects.png" id="img:device.wwc-objects"
alt="Device.WWC objects" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device.wwc-objects">
Figure 83:
Device.WWC objects
</div></figcaption>
</figure>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:device.pdu">XXI.4.2.2 Device.PDU</h4>
<p>The logical connection between the 5G-RG and data network is the
Protocol Data Unit (PDU). The Device.PDU subtree describes each PDU
session’s properties together with the QoS rules specific to that PDU
session.</p>
<table id="tbl:device.pdu-objects">
<caption><div class="auto-hoverlink"
data-anchor="tbl:device.pdu-objects">
Table 19: Device.PDU objects
</div></caption>
<colgroup>
<col style="width: 43%" />
<col style="width: 56%" />
</colgroup>
<thead>
<tr class="header">
<th>Object</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Device.PDU</td>
<td>Base object for PDU sessions.</td>
</tr>
<tr class="even">
<td>Device.PDU.Session.{i}</td>
<td>Contains all the properties of a PDU session instance, ranging from
maximum bitrate through to assigned network slice.</td>
</tr>
<tr class="odd">
<td>Device.PDU.Session.{i}.PCO</td>
<td>Policy Configuration Options (PCO) is an optional set of
configuration parameters supplied by the network at the request of the
5G-RG.</td>
</tr>
<tr class="even">
<td>Device.PDU.Session.{i}.NetworkSlice</td>
<td>Describes all the components of a Single -Network Slice Selection
Assistance Information (S-NSSAI). The S-NSSAI identifies the network
slice a PDU session has been established on.</td>
</tr>
<tr class="odd">
<td>Device.PDU.Session.{i}.QoSFlow.{i}</td>
<td>Table of all QoS Flow Indicators (QFI) and their properties
supported by the access network for this particular PDU.</td>
</tr>
<tr class="even">
<td>Device.PDU.Session.{i}.QoSRule.{i}</td>
<td>Set of rules used to select the QFI label for a given packet.</td>
</tr>
<tr class="odd">
<td>Device.PDU.Session.{i}.QoSRule.{i}.QoSRuleFilter.{i}</td>
<td>Table of filters to select a QoS rule. Typical filters include
destination IP and ports.</td>
</tr>
</tbody>
</table>
<figure id="fig:device.pdu-objects">
<img src="images/device.pdu-objects.png" id="img:device.pdu-objects"
alt="Device.PDU objects" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device.pdu-objects">
Figure 84:
Device.PDU objects
</div></figcaption>
</figure>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:device.fwe">XXI.4.2.3 Device.FWE</h4>
<p>5G Wireless Wireline Convergence User Plane Encapsulation <span
class="citation" data-cites="RFC8822"><a href="#ref-RFC8822"
role="doc-biblioref">[56]</a></span> is used to separate each PDU
session when multiplexed over a PHY. A Device.FWE.Link object is
inserted into the interface stack, providing PDU session id as well as
5G QoS markings (QFI, RQI). This is also the level at which fixed QoS
rules are applied in order to traverse access networks that do not
natively support 5G QoS (QFI) markings. An instance of this object will
be created by a 5G-RG whenever a PDU is established.</p>
<table id="tbl:device.fwe-objects">
<caption><div class="auto-hoverlink"
data-anchor="tbl:device.fwe-objects">
Table 20: Device.FWE objects
</div></caption>
<colgroup>
<col style="width: 24%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th>Object</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Device.FWE</td>
<td>Base object for 5WE.</td>
</tr>
<tr class="even">
<td>Device.FWE.Link.{i}</td>
<td>5WE link layer table describing the link layer supporting the 5WE
protocol.</td>
</tr>
<tr class="odd">
<td>Device.FWE.Link.{i}.Stats</td>
<td>Throughput statistics for this link layer</td>
</tr>
</tbody>
</table>
<figure id="fig:device.fwe-objects">
<img src="images/device.fwe-objects.png" id="img:device.fwe-objects"
alt="Device.FWE objects" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:device.fwe-objects">
Figure 85:
Device.FWE objects
</div></figcaption>
</figure>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:examples">XXI.4.3 Examples</h3>
<p>Each example shows a 5G-RG with two PDU sessions. The first is for
general purpose internet traffic and the second for IMS VoIP. Each PDU
session has a default QoS rule matching the intended use. The general
internet PDU also has rule to mark VoWiFi traffic with the same QFI as
IMS traffic.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scenario-1---fixed-access-network-only-1">XXI.4.3.1 Scenario #1
- Fixed access network only</h4>
<pre><code>Device.WWC.
    Capabilities = &quot;FN-RG,5G-RG,W-5GAN&quot;
    Mode = &quot;5G-RG&quot;
    Status = &quot;5G-RG&quot;
    AccessNetworkNumberOfEntries = 1
    URSPNumberOfEntries = 2
Device.WWC.AccessNetwork.1.
    Alias = &quot;cpe-fixed&quot;
    Name = &quot;fixed&quot;
    Interface = Device.Ethernet.5
    RegistrationStatus = &quot;RM-REGISTERED&quot;
    ConnectionStatus = &quot;CM_CONNECTED&quot;
    AccessNetworkType = &quot;W-5GAN&quot;
Device.WWC.AccessNetwork.1.GUTI
    PLMN = 50501
    AMFid = 65601
    TMSI = 60340039
Device.WWC.URSP.1.          # Default traffic rule
    Alias = &quot;cpe-ursp1&quot;
    Precedence = 100
    TrafficDescriptorNumberOfEntries = 1
Device.WWC.URSP.1.TrafficDescriptor.1.
    Alias = &quot;cpe-ursp11&quot;
    Type = 1                # Match all traffic
    Value = &quot;&quot;
    RouteSelectionDescriptorNumberOfEntries = 1
Device.WWC.URSP.1.TrafficDescriptor.1.RouteSelectionDescriptor.1.
    Alias = &quot;cpe-ursp111&quot;
    Precedence = 100
    SSC = 1
    DNN = &quot;provider.internet&quot;
    PDUSessionType = &quot;IPv4v6&quot;
    AccessType = &quot;Non-3GPP access&quot;
Device.WWC.URSP.1.TrafficDescriptor.1.RouteSelectionDescriptor.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
Device.WWC.URSP.2.           # VoUP traffic rule
    Alias = &quot;cpe-ursp2&quot;
    Precedence = 10
    TrafficDescriptorNumberOfEntries = 1
Device.WWC.URSP.2.TrafficDescriptor.1.
    Alias = &quot;cpe-ursp21&quot;
    Type = 144               # Connection Capability Type
    Value = &quot;1&quot;              # IMS
    RouteSelectionDescriptorNumberOfEntries = 1
Device.WWC.URSP.2.TrafficDescriptor.1.RouteSelectionDescriptor.1.
    Alias = &quot;cpe-ursp211&quot;
    Precedence = 100
    SSC = 1
    DNN = &quot;provider.ims&quot;
    PDUSessionType = &quot;IPv6&quot;
    AccessType = &quot;Non-3GPP access&quot;
Device.WWC.URSP.2.TrafficDescriptor.1.RouteSelectionDescriptor.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
Device.PDU.
    SessionNumberOfEntries = 2
Device.PDU.Session.1.
    Alias = &quot;cpe-pdu1&quot;
    Interface = Device.IP.Interface.1
    SessionId = 1
    PTI = 63
    SSC = 1
    SessionAMBRDownlink = 100000000
    SessionAMBRUplink = 40000000
    DNN = &quot;provider.internet&quot;
    QoSRuleNumberOfEntries = 2
    QoSFlowNumberOfEntries = 2
Device.PDU.Session.1.PCO
    IPv6DNS = &quot;2001:db8::1,2001:db8::2&quot;
IPv4DNS = &quot;203.0.113.1,203.0.113.2&quot;
Device.PDU.Session.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
    SliceDifferentiator = 4
Device.PDU.Session.1.QoSRule.1.
    Alias = &quot;cpe-pdu11&quot;
    Identifier = 1
    Precedence = 100
    Segregation = false
    QFI = 1
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.1.QoSRule.1.Filter.1.
    Alias = &quot;cpe-pdu111&quot;
    Direction = &quot;bidirectional&quot;
    Type = 1                  # Match all
Device.PDU.Session.1.QoSRule.2.
    Alias = &quot;cpe-pdu12&quot;
    Identifier = 2
    Precedence = 10
    Segregation = false
    QFI = 32
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.1.QoSRule.2.Filter.1.
    Alias = &quot;cpe-pdu121&quot;
    Direction = &quot;bidirectional&quot;
    Type = 33                  # Destination IPv6
    Value = &quot;2001:db8::2:1&quot;    # VoWiFi ePDG
Device.PDU.Session.1.QoSFlow.1.
    Alias = &quot;cpe-pdu11&quot;
    QFI = 1
    FiveQI = 8
Device.PDU.Session.1.QoSFlow.2.
    Alias = &quot;cpe-pdu11&quot;
    QFI = 32
    FiveQI = 1
    GFBRUplink = 150000
    GFBRDownlink = 150000
Device.PDU.Session.2.
    Alias = &quot;cpe-pdu2&quot;
    Interface = Device.IP.Interface.2
    SessionId = 6
    PTI = 34
    SSC = 1
    SessionAMBRDownlink = 150000
    SessionAMBRUplink = 150000
    DNN = &quot;provider.ims&quot;
    QoSRuleNumberOfEntries = 2
    QoSFlowNumberOfEntries = 1
Device.PDU.Session.2.PCO
    IPv6PCSCF = &quot;2001:db8::1:1&quot;
    IPv6DNS = &quot;2001:db8::1,2001:db8::2&quot;
    IPv4DNS = &quot;203.0.113.1,203.0.113.2&quot;
    IPv4PCSCF = &quot;203.0.113.100&quot;
Device.PDU.Session.2.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
    SliceDifferentiator = 4
Device.PDU.Session.2.QoSRule.1.
    Alias = &quot;cpe-pdu21&quot;
    Identifier = 1
    Precedence = 100
    Segregation = false
    QFI = 32
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.2.QoSRule.1.Filter.1.
    Alias = &quot;cpe-pdu211&quot;
    Direction = &quot;bidirectional&quot;
    Type = 1            # Match all
Device.PDU.Session.2.QoSFlow.1.
    Alias = &quot;cpe-pdu21&quot;
    QFI = 32
    FiveQI = 1
    GFBRUplink = 150000
    GFBRDownlink = 150000
Device.FWE.
    LinkNumberOfEntries
Device.FWE.Link.1.
    Alias = &quot;cpe-fwe1&quot;
    Name = &quot;cpe-fwe1&quot;
    Status = &quot;Up&quot;
    LowerLayers = &quot;Device.Ethernet.5&quot;
Device.FWE.Link,1,Stats
    BytesSent = 478945789
    BytesReceived = 589545478</code></pre>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scenario-2---cellular-access-network-only-1">XXI.4.3.2 Scenario
#2 - Cellular access network only</h4>
<pre><code>Device.WWC.
    Capabilities = &quot;FN-RG,5G-RG,NG-RAN,E-UTRAN&quot;
    Mode = &quot;5G-RG&quot;
    Status = &quot;5G-RG&quot;
    AccessNetworkNumberOfEntries = 1
    URSPNumberOfEntries = 2
Device.WWC.AccessNetwork.1.
    Alias = &quot;cpe-cellular&quot;
    Name = &quot;cellular&quot;
    Interface = Device.Cellular.Interface.1
    RegistrationStatus = &quot;RM-REGISTERED&quot;
    ConnectionStatus = &quot;CM_CONNECTED&quot;
    AccessNetworkType = &quot;NG-RAN&quot;
Device.WWC.AccessNetwork.1.GUTI
    PLMN = 50501
    AMFid = 131137
    TMSI = 54678959
Device.WWC.URSP.1.             # Default traffic rule
    Alias = &quot;cpe-ursp1&quot;
    Precedence = 100
    TrafficDescriptorNumberOfEntries = 1
Device.WWC.URSP.1.TrafficDescriptor.1.
    Alias = &quot;cpe-ursp11&quot;
    Type = 1                   # Match all traffic
    Value = &quot;&quot;
    RouteSelectionDescriptorNumberOfEntries = 1
Device.WWC.URSP.1.TrafficDescriptor.1.RouteSelectionDescriptor.1.
    Alias = &quot;cpe-ursp111&quot;
    Precedence = 100
    SSC = 1
    DNN = &quot;provider.internet&quot;
    PDUSessionType = &quot;IPv4v6&quot;
    AccessType = &quot;3GPP access&quot;
Device.WWC.URSP.1.TrafficDescriptor.1.RouteSelectionDescriptor.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
Device.WWC.URSP.2.             # VoUP traffic rule
    Alias = &quot;cpe-ursp2&quot;
    Precedence = 10
    TrafficDescriptorNumberOfEntries = 1
Device.WWC.URSP.2.TrafficDescriptor.1.
    Alias = &quot;cpe-ursp21&quot;
    Type = 144                 # Connection Capability Type
    Value = &quot;1&quot;                # IMS
    RouteSelectionDescriptorNumberOfEntries = 1
Device.WWC.URSP.2.TrafficDescriptor.1.RouteSelectionDescriptor.1.
    Alias = &quot;cpe-ursp211&quot;
    Precedence = 100
    SSC = 1
    DNN = &quot;provider.ims&quot;
    PDUSessionType = &quot;IPv6&quot;
    AccessType = &quot;3GPP access&quot;
Device.WWC.URSP.2.TrafficDescriptor.1.RouteSelectionDescriptor.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
Device.PDU.
    SessionNumberOfEntries = 2
Device.PDU.Session.1.
    Alias = &quot;cpe-pdu1&quot;
    Interface = Device.IP.Interface.1
    SessionId = 1
    PTI = 63
    SSC = 1
    SessionAMBRDownlink = 100000000
    SessionAMBRUplink = 40000000
    DNN = &quot;provider.internet&quot;
    QoSRuleNumberOfEntries = 2
    QoSFlowNumberOfEntries = 2
Device.PDU.Session.1.PCO
    IPv6DNS = &quot;2001:db8::1,2001:db8::2&quot;
    IPv4DNS = &quot;203.0.113.1,203.0.113.2&quot;
Device.PDU.Session.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
    SliceDifferentiator = 4
Device.PDU.Session.1.QoSRule.1.
    Alias = &quot;cpe-pdu11&quot;
    Identifier = 1
    Precedence = 100
    Segregation = false
    QFI = 1
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.1.QoSRule.1.Filter.1.
    Alias = &quot;cpe-pdu111&quot;
    Direction = &quot;bidirectional&quot;
    Type = 1                   # Match all
Device.PDU.Session.1.QoSRule.2.
    Alias = &quot;cpe-pdu12&quot;
    Identifier = 2
    Precedence = 10
    Segregation = false
    QFI = 32
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.1.QoSRule.2.Filter.1.
    Alias = &quot;cpe-pdu121&quot;
    Direction = &quot;bidirectional&quot;
    Type = 33                  # Destination IPv6
    Value = &quot;2001:db8::2:1&quot;    # VoWiFi ePDG
Device.PDU.Session.1.QoSFlow.1.
    Alias = &quot;cpe-pdu11&quot;
    QFI = 1
    FiveQI = 8
Device.PDU.Session.1.QoSFlow.2.
    Alias = &quot;cpe-pdu11&quot;
    QFI = 32
    FiveQI = 1
    GFBRUplink = 150000
    GFBRDownlink = 150000
Device.PDU.Session.2.
    Alias = &quot;cpe-pdu2&quot;
    Interface = Device.IP.Interface.2
    SessionId = 6
    PTI = 34
    SSC = 1
    SessionAMBRDownlink = 150000
    SessionAMBRUplink = 150000
    DNN = &quot;provider.ims&quot;
    QoSRuleNumberOfEntries = 2
    QoSFlowNumberOfEntries = 1
Device.PDU.Session.2.PCO
    IPv6PCSCF = &quot;2001:db8::1:1&quot;
    IPv6DNS = &quot;2001:db8::1,2001:db8::2&quot;
    IPv4DNS = &quot;203.0.113.1,203.0.113.2&quot;
    IPv4PCSCF = &quot;203.0.113.100&quot;
Device.PDU.Session.2.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
    SliceDifferentiator = 4
Device.PDU.Session.2.QoSRule.1.
    Alias = &quot;cpe-pdu21&quot;
    Identifier = 1
    Precedence = 100
    Segregation = false
    QFI = 32
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.2.QoSRule.1.Filter.1.
    Alias = &quot;cpe-pdu211&quot;
    Direction = &quot;bidirectional&quot;
    Type = 1            # Match all
Device.PDU.Session.2.QoSFlow.1.
    Alias = &quot;cpe-pdu21&quot;
    QFI = 32
    FiveQI = 1
    GFBRUplink = 150000
    GFBRDownlink = 150000</code></pre>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:scenario-3---hybrid-fixed-and-cellular-access-1">XXI.4.3.3
Scenario #3 - Hybrid (Fixed and Cellular) access</h4>
<pre><code>Device.WWC.
    Capabilities = &quot;FN-RG,5G-RG,W-5GAN&quot;
    Mode = &quot;5G-RG&quot;
    Status = &quot;5G-RG&quot;
    AccessNetworkNumberOfEntries = 2
    URSPNumberOfEntries = 2
Device.WWC.AccessNetwork.1.
    Alias = &quot;cpe-fixed&quot;
    Name = &quot;fixed&quot;
    Interface = Device.Ethernet.5
    RegistrationStatus = &quot;RM-REGISTERED&quot;
    ConnectionStatus = &quot;CM_CONNECTED&quot;
    AccessNetworkType = &quot;W-5GAN&quot;
Device.WWC.AccessNetwork.1.GUTI
    PLMN = 50501
    AMFid = 65601
    TMSI = 60340039
Device.WWC.AccessNetwork.2.
    Alias = &quot;cpe-cellular&quot;
    Name = &quot;cellular&quot;
    Interface = Device.Cellular.Interface.1
    RegistrationStatus = &quot;RM-REGISTERED&quot;
    ConnectionStatus = &quot;CM_CONNECTED&quot;
    AccessNetworkType = &quot;NG-RAN&quot;
Device.WWC.AccessNetwork.2.GUTI
    PLMN = 50501
    AMFid = 131137
    TMSI = 54678959
Device.WWC.URSP.1.             # Default traffic rule
    Alias = &quot;cpe-ursp1&quot;
    Precedence = 100
    TrafficDescriptorNumberOfEntries = 1
Device.WWC.URSP.1.TrafficDescriptor.1.
    Alias = &quot;cpe-ursp11&quot;
    Type = 1                   # Match all traffic
    Value = &quot;&quot;
    RouteSelectionDescriptorNumberOfEntries = 1
Device.WWC.URSP.1.TrafficDescriptor.1.RouteSelectionDescriptor.1.
    Alias = &quot;cpe-ursp111&quot;
    Precedence = 100
    SSC = 1
    DNN = &quot;provider.internet&quot;
    PDUSessionType = &quot;IPv4v6&quot;
    AccessType = &quot;Non-3GPP access&quot;
Device.WWC.URSP.1.TrafficDescriptor.1.RouteSelectionDescriptor.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
Device.WWC.URSP.2.             # VoUP traffic rule
    Alias = &quot;cpe-ursp2&quot;
    Precedence = 10
    TrafficDescriptorNumberOfEntries = 1
Device.WWC.URSP.2.TrafficDescriptor.1.
    Alias = &quot;cpe-ursp21&quot;
    Type = 144                 # Connection Capability Type
    Value = &quot;1&quot;                # IMS
    RouteSelectionDescriptorNumberOfEntries = 1
Device.WWC.URSP.2.TrafficDescriptor.1.RouteSelectionDescriptor.1.
    Alias = &quot;cpe-ursp211&quot;
    Precedence = 100
    SSC = 1
    DNN = &quot;provider.ims&quot;
    PDUSessionType = &quot;IPv6&quot;
    AccessType = &quot;Non-3GPP access&quot;
Device.WWC.URSP.2.TrafficDescriptor.1.RouteSelectionDescriptor.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
Device.PDU.
    SessionNumberOfEntries = 2
Device.PDU.Session.1.
    Alias = &quot;cpe-pdu1&quot;
    Interface = Device.IP.Interface.1
    SessionId = 1
    PTI = 63
    SSC = 1
    SessionAMBRDownlink = 100000000
    SessionAMBRUplink = 40000000
    DNN = &quot;provider.internet&quot;
    QoSRuleNumberOfEntries = 2
    QoSFlowNumberOfEntries = 2
Device.PDU.Session.1.PCO
    IPv6DNS = &quot;2001:db8::1,2001:db8::2&quot;
    IPv4DNS = &quot;203.0.113.1,203.0.113.2&quot;
Device.PDU.Session.1.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
    SliceDifferentiator = 4
Device.PDU.Session.1.QoSRule.1.
    Alias = &quot;cpe-pdu11&quot;
    Identifier = 1
    Precedence = 100
    Segregation = false
    QFI = 1
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.1.QoSRule.1.Filter.1.
    Alias = &quot;cpe-pdu111&quot;
    Direction = &quot;bidirectional&quot;
    Type = 1                   # Match all
Device.PDU.Session.1.QoSRule.2.
    Alias = &quot;cpe-pdu12&quot;
    Identifier = 2
    Precedence = 10
    Segregation = false
    QFI = 32
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.1.QoSRule.2.Filter.1.
    Alias = &quot;cpe-pdu121&quot;
    Direction = &quot;bidirectional&quot;
    Type = 33                  # Destination IPv6
    Value = &quot;2001:db8::2:1&quot;    # VoWiFi ePDG
Device.PDU.Session.1.QoSFlow.1.
    Alias = &quot;cpe-pdu11&quot;
    QFI = 1
    FiveQI = 8
Device.PDU.Session.1.QoSFlow.2.
    Alias = &quot;cpe-pdu11&quot;
    QFI = 32
    FiveQI = 1
    GFBRUplink = 150000
    GFBRDownlink = 150000
Device.PDU.Session.2.
    Alias = &quot;cpe-pdu2&quot;
    Interface = Device.IP.Interface.2
    SessionId = 6
    PTI = 34
    SSC = 1
    SessionAMBRDownlink = 150000
    SessionAMBRUplink = 150000
    DNN = &quot;provider.ims&quot;
    QoSRuleNumberOfEntries = 2
    QoSFlowNumberOfEntries = 1
Device.PDU.Session.2.PCO
    IPv6PCSCF = &quot;2001:db8::1:1&quot;
    IPv6DNS = &quot;2001:db8::1,2001:db8::2&quot;
    IPv4DNS = &quot;203.0.113.1,203.0.113.2&quot;
    IPv4PCSCF = &quot;203.0.113.100&quot;
Device.PDU.Session.2.NetworkSlice
    SliceServiceType = &quot;eMBB&quot;
    SliceDifferentiator = 4
Device.PDU.Session.2.QoSRule.1.
    Alias = &quot;cpe-pdu21&quot;
    Identifier = 1
    Precedence = 100
    Segregation = false
    QFI = 32
    DQR = true
    FilterNumberOfEntries = 1
Device.PDU.Session.2.QoSRule.1.Filter.1.
    Alias = &quot;cpe-pdu211&quot;
    Direction = &quot;bidirectional&quot;
    Type = 1            # Match all
Device.PDU.Session.2.QoSFlow.1.
    Alias = &quot;cpe-pdu21&quot;
    QFI = 32
    FiveQI = 1
    GFBRUplink = 150000
    GFBRDownlink = 150000
Device.FWE.
    LinkNumberOfEntries
Device.FWE.Link.1.
    Alias = &quot;cpe-fwe1&quot;
    Name = &quot;cpe-fwe1&quot;
    Status = &quot;Up&quot;
    LowerLayers = Device.Ethernet.5
Device.FWE.Link,1,Stats
    BytesSent = 478945789
    BytesReceived = 589545478</code></pre>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header" id="sec:data-elements-theory-of-operations">Appendix
XXII: Data Elements Theory of Operations</h1>
<p>The contents of this Appendix has moved to Appendix <a
href="#sec:incorporating-wi-fi-data-elements-into-tr-181"
class="heading">III.9</a>.</p>
<h1 class="appendix same-file appendix1 auto-hoverlink"
data-info="header"
id="sec:logical-interfaces-theory-of-operations">Appendix XXIII: Logical
Interfaces Theory of Operations</h1>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:introduction">XXIII.1 Introduction</h2>
<p>The intention of the logical interface concept is to simplify the
configuration management of individual TR-181 services. Instead of
configuring the individual network service with a physical or IP
interface and dealing with reconfiguration problems that can occur
during auto detection of WAN interfaces, the network interface can be
configured with a logical interface. This allows the configuration of
the network service to stay unchanged when switching between WAN
interfaces. The software service responsible for managing WAN interface
changes then only needs to care about rewriting the
<code>LowerLayers</code> parameter of the <code>LogicalInterface</code>
Objects.</p>
<figure id="fig:logical-interfaces-problem-statement">
<img src="images/logicalinterfaces-problem.png"
id="img:logical-interfaces-problem-statement"
alt="Logical interfaces problem statement" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:logical-interfaces-problem-statement">
Figure 86:
Logical interfaces problem statement
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:concept">XXIII.2 Concept</h2>
<p>The idea of the logical interface is that it represents simple
arbitrary concepts such as:</p>
<ul>
<li>lan -&gt; the LAN bridge interface</li>
<li>wan -&gt; the WAN interface</li>
<li>data -&gt; interface to send data traffic (can be seen as a wan
too)</li>
<li>iptv -&gt; interface used for only IPTV traffic</li>
<li>voip -&gt; interface used only for VoIP traffic</li>
<li>mgmt -&gt; interface used only for management traffic</li>
</ul>
<p>Traditionally a network service such as a time server is configured
by pointing <code>Time.Server.{i}.Interface.</code> to a
<code>Device.IP.Interface.{i}</code> object.</p>
<p>Now with logical interfaces, these types of services can be
configured by using a Logical Interface instead of using an IP
interface. For example:</p>
<p><code>Time.Server.{i}.Interface = Device.Logical.Interface.1.</code></p>
<p>And <code>Device.Logical.Interface.1.</code> would in this example be
the WAN interface. And its LowerLayers parameter would be pointing to a
stackable IP interface</p>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:wan-mode-changes">XXIII.3 WAN mode changes</h2>
<p>Requirement IF.WAN.ETH of TR-124 describes at a high-level what an
internal service responsible for detecting the correct WAN interface
must do. The logical interface concept avoids the need for a WAN mode
manager that must be aware of all the specificities of the internal
network services.</p>
<p>Logical interfaces significantly reduce the complexity of the WAN
mode manager. Without it the WAN mode manager needs to be aware of all
the network services, and how to configure them and maybe trigger a
restart. By using the concept of the logical interfaces, the WAN mode
manager only needs to reconfigure the network stack, and update the
LowerLayers parameter of the logical interfaces.</p>
<p>Each individual internal network service must subscribe to the
interface status updates.</p>
<p>When the interface is disabled and re-enabled, it is the
responsibility of the internal service to retrieve the new lower
interface and the associated IP address.</p>
<figure id="fig:solution-using-logical-interfaces">
<img src="images/logicalinterfaces-solution.png"
id="img:solution-using-logical-interfaces"
alt="solution using logical interfaces" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:solution-using-logical-interfaces">
Figure 87:
solution using logical interfaces
</div></figcaption>
</figure>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:how-to-use">XXIII.4 How to use</h2>
<p>A logical interface can be used on top of one or more stackable
interfaces. <a
href="#sec:ipv4-and-ipv6-on-a-different-network-interface"
class="heading">IPv4 and IPv6 on a different network interface</a> is an
example where a logical interface is layered on top of multiple IP
interfaces. Most of the time a logical interface will just be layered on
top of one IP interface. In theory a logical interface could be layered
anywhere in the interface stack topology.</p>
<p>When a logical interface is used for configuring an
<code>Interface</code> parameter, the logical interface will inherit the
parameter type that has been declared in the data model. Meaning when
the expected parameter type is <code>IP.Interface</code> the logical
interface must resolve to an existing <code>IP.Interface</code>.</p>
<p><code>Device.SSH.Server.2.Interface = "Device.Logical.Interface.1."</code></p>
<table>
<thead>
<tr class="header">
<th colspan="2" style="text-align: center;"> WAN Interface</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Interface</td>
<td style="text-align: center;">Logical.Interface.1</td>
</tr>
<tr class="even">
<td style="text-align: center;">LowerLayers</td>
<td style="text-align: center;">IP.Interface.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">LowerLayers</td>
<td style="text-align: center;">Ethernet.Link.1</td>
</tr>
<tr class="even">
<td style="text-align: center;">LowerLayers</td>
<td style="text-align: center;">Ethernet.Interface.1</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<h2 class="appendix2 auto-hoverlink" data-info="header"
id="sec:examples-1">XXIII.5 Examples</h2>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:tagged---untagged-ethernet-switching">XXIII.5.1 Tagged -
untagged Ethernet switching</h3>
<p>In this example the WAN mode manager decides to switch the network
configuration from an untagged Ethernet traffic configuration to a
tagged Ethernet configuration. This is a similar problem to when the WAN
mode manager decides to switch between mono VC and a multi VC xDSL
configuration.</p>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:untagged-ethernet-configuration">XXIII.5.1.1 Untagged Ethernet
configuration</h4>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 26%" />
<col style="width: 26%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr class="header">
<th>WAN interface</th>
<th>VOIP interface</th>
<th>MGMT interface</th>
<th>IPTV interface</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Logical.Interface.1</td>
<td>Logical.Interface.2</td>
<td>Logical.Interface.3</td>
<td>Logical.Interface.4</td>
</tr>
<tr class="even">
<td>IP.Interface.1</td>
<td>IP.Interface.1</td>
<td>IP.Interface.1</td>
<td>IP.Interface.1</td>
</tr>
<tr class="odd">
<td>Ethernet.Link.1</td>
<td>Ethernet.Link.1</td>
<td>Ethernet.Link.1</td>
<td>Ethernet.Link.1</td>
</tr>
<tr class="even">
<td>Ethernet.Interface.1</td>
<td>Ethernet.Interface.1</td>
<td>Ethernet.Interface.1</td>
<td>Ethernet.Interface.1</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<table>
<thead>
<tr class="header">
<th>Time server configuration</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Time.Server.{i}.Interface</td>
<td>Logical.Interface.3</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<h4 class="appendix4 auto-hoverlink" data-info="header"
id="sec:tagged-ethernet-configuration">XXIII.5.1.2 Tagged Ethernet
configuration</h4>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 26%" />
<col style="width: 26%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr class="header">
<th>WAN interface</th>
<th>VOIP interface</th>
<th>MGMT interface</th>
<th>IPTV interface</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Logical.Interface.1</td>
<td>Logical.Interface.2</td>
<td>Logical.Interface.3</td>
<td>Logical.Interface.4</td>
</tr>
<tr class="even">
<td>IP.Interface.1</td>
<td>IP.Interface.2</td>
<td>IP.Interface.3</td>
<td>IP.Interface.4</td>
</tr>
<tr class="odd">
<td>Ethernet.VLANTermination.1</td>
<td>Ethernet.VLANTermination.2</td>
<td>Ethernet.VLANTermination.3</td>
<td>Ethernet.VLANTermination.4</td>
</tr>
<tr class="even">
<td>Ethernet.Link.1</td>
<td>Ethernet.Link.1</td>
<td>Ethernet.Link.1</td>
<td>Ethernet.Link.1</td>
</tr>
<tr class="odd">
<td>Ethernet.Interface.1</td>
<td>Ethernet.Interface.1</td>
<td>Ethernet.Interface.1</td>
<td>Ethernet.Interface.1</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<table>
<thead>
<tr class="header">
<th>Time server configuration</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Time.Server.{i}.Interface</td>
<td>Logical.Interface.3</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<p>By using the logical interface method, it is not necessary any more
to update the configuration of the time server when the WAN mode manager
switches between a tagged and untagged WAN mode.</p>
<h3 class="appendix3 auto-hoverlink" data-info="header"
id="sec:ipv4-and-ipv6-on-a-different-network-interface">XXIII.5.2 IPv4
and IPv6 on a different network interface</h3>
<p>In this example the Time server needs to use the IPv4 and IPv6
addresses of the WAN interfaces. In more traditional scenarios the IPv4
and IPv6 addresses are available on the same network interface, but in
this example the IPv4 and IPv6 addresses are on different network
interfaces.</p>
<table class="vertical-align-bottom">
<thead>
<tr class="header">
<th colspan="2" style="text-align: center;"> WAN Interface</th>
<th style="text-align: center;">VOIP Interface</th>
<th style="text-align: center;">MGMT Interface</th>
<th style="text-align: center;">IPTV Interface</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td colspan="2" style="text-align: center;"> Logical.Interface.1</td>
<td style="text-align: center;">Logical.Interface.2</td>
<td style="text-align: center;">Logical.Interface.3</td>
<td style="text-align: center;">Logical.Interface.4</td>
</tr>
<tr class="even">
<td style="text-align: center;">IP.Interface.1 (IPv4)</td>
<td style="text-align: center;">IP.Interface.2 (IPv6)</td>
<td style="text-align: center;">IP.Interface.3</td>
<td style="text-align: center;">IP.Interface.4</td>
<td style="text-align: center;">IP.Interface.5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">PPP.Interface.1</td>
<td colspan="4" style="text-align: center;"></td>
</tr>
<tr class="even">
<td colspan="2" style="text-align: center;">
Ethernet.VLANTermination.1</td>
<td style="text-align: center;">Ethernet.VLANTermination.2</td>
<td style="text-align: center;">Ethernet.VLANTermination.3</td>
<td style="text-align: center;">Ethernet.VLANTermination.4</td>
</tr>
<tr class="odd">
<td colspan="5" style="text-align: center;"> Ethernet.Link.1</td>
</tr>
<tr class="even">
<td colspan="5" style="text-align: center;"> Ethernet.Interface.1</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<table>
<thead>
<tr class="header">
<th>Time server configuration</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Time.Server.{i}.Interface</td>
<td>Logical.Interface.1</td>
</tr>
</tbody>
</table>
<div class="spacer">

</div>
<p>With the help of the Logical Interface, the Time server can
automatically retrieve the correct IPv4 or IPv6 address from the TR-181
data model without having to know all the details that come from a
certain WAN mode or network configuration.</p>
<figure
id="fig:logical-interfaces-example-ipv4-and-ipv6-are-on-different-network-interface">
<img src="images/logicalinterfaces-example2.png"
id="img:logical-interfaces-example-ipv4-and-ipv6-are-on-different-network-interface"
alt="Logical interfaces example: IPv4 and IPv6 are on different network interface" />
<figcaption><div class="auto-hoverlink"
data-anchor="fig:logical-interfaces-example-ipv4-and-ipv6-are-on-different-network-interface">
Figure 88:
Logical interfaces example: IPv4 and IPv6 are on different network
interface
</div></figcaption>
</figure>
<div class="note">
<p>End of Broadband Forum Technical Report TR-181</p>
</div>
</div>
</body>
</html>
